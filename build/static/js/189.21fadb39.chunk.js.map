{"version":3,"file":"static/js/189.21fadb39.chunk.js","mappings":"4PAmIA,UA9Gc,WACV,IAAMA,GAAUC,EAAAA,EAAAA,MACVC,GAAYC,EAAAA,EAAAA,MAAcC,OAAOC,MAAM,gBAAiB,IACxDC,EAAcC,OAAOL,GAAaA,EAAU,GAAKA,EAAU,GAAK,GACtE,GAAwBM,EAAAA,EAAAA,UAASF,GAAY,eAAtCG,EAAI,KAAEC,EAAO,KACpB,GAA8BF,EAAAA,EAAAA,WAAS,GAAK,eAArCG,EAAO,KAAEC,EAAU,KAC1B,GAA0BJ,EAAAA,EAAAA,UAAS,GAAE,eAAvBK,GAAF,KAAU,OAGtBC,EAAAA,EAAAA,YAAU,WACNR,IAAgBG,GAAQC,EAAQJ,EACpC,GAAG,CAACA,EAAaG,IAEjB,IAAMM,GAAWC,EAAAA,EAAAA,eACXC,GAAQC,EAAAA,EAAAA,cAAY,SAACC,GAAK,OAAKA,EAAMC,MAAMH,KAAK,IAAEI,KAAI,SAACC,GAAC,MAAM,CAChEC,GAAID,EAAEC,GACNC,MAAOF,EAAEE,MACTC,SAAUH,EAAEG,SACZC,aAAcJ,EAAEI,aAChBC,KAAML,EAAEK,KAAKC,KACbC,UAAWP,EAAEO,UACbC,SAAUR,EAAEQ,SAEZC,cAAeT,EAAES,cAAcC,WAC/BC,eAAgBX,EAAEW,eAAeD,WACjCE,UAAUZ,EAAEY,UAAUF,WAAWG,MAAM,KAAK,GAC/C,IAkBD,OAhBArB,EAAAA,EAAAA,YAAU,WAKN,OAJAF,GAAW,GACXG,GAASqB,EAAAA,EAAAA,IAAW,CAAC3B,KAAAA,EAAM4B,SAAU,OAAUC,SAAQ,kBACnD1B,GAAW,EAAM,IAEd,WAAO,CAClB,GAAG,CAACG,EAAUN,KAEdK,EAAAA,EAAAA,YAAU,WAIN,OAHAC,GAASwB,EAAAA,EAAAA,OAAkBC,MAAK,gBAASC,EAAK,EAAZC,MAAK,OACnC7B,EAAS8B,SAASF,GAAO,IAEtB,WAAO,CAClB,GAAG,CAAC1B,KAIA,6BACA,SAAC,IAAM,KACP,gBAAK6B,UAAU,UAAS,UACxB,SAAC,KAAI,WACD,SAAC,KAAI,WACD,UAAC,KAAK,YACF,UAAC,KAAW,oBAER,kBAAOA,UAAU,aAAY,qBAC7B,gBAAKA,UAAU,sBAAqB,UAChC,SAAC,KAAO,CACJC,IAAKC,EAAAA,GACLC,GAAI,mBACJH,UAAU,2BACVI,KAAM,KACNC,MAAM,UAAS,4BAK3B,SAAC,KAAS,WACN,SAAC,IAAU,CACPC,MAAOjC,EACPN,QAASA,EACTwC,OAAQ,CACJ,CAACC,IAAK,QAASC,SAAU,oBACzB,CAACD,IAAK,WAAYE,MAAO,YACzB,eACA,YACA,WACA,OACA,aAEJC,OAAK,EACLC,SAAO,EACPC,QAAM,EACNC,YAAa,CAAE,YAAe,eAC9BC,aApFV,GAqFUC,YAAU,EACVC,eAAa,EACbC,WAAY,SAACC,GAAI,OACb/D,EAAQgE,KAAK,gBAAD,OAAiBD,EAAKxC,IAAK,iBAsBvE,C","sources":["admin/views/users/Users.js"],"sourcesContent":["import {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CDataTable,\n    CPagination,\n    CRow,\n} from '@coreui/react';\nimport React, {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\nimport {\n    fetchUserCount,\n    fetchUsers,\n} from '../../../redux/actionCreators/adminActionCreators';\nimport Header from '../../../site/pages/newHome/Header';\n\nconst PAGE_SIZE = 10;\n\nconst Users = () => {\n    const history = useHistory();\n    const queryPage = useLocation().search.match(/page=([0-9]+)/, '');\n    const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\n    const [page, setPage] = useState(currentPage);\n    const [loading, setLoading] = useState(true);\n    const [count, setCount] = useState(0);\n\n\n    useEffect(() => {\n        currentPage !== page && setPage(currentPage);\n    }, [currentPage, page]);\n\n    const dispatch = useDispatch();\n    const users = useSelector((state) => state.admin.users).map((u) => ({\n        id: u.id,\n        email: u.email,\n        username: u.username,\n        mobileNumber: u.mobileNumber,\n        role: u.role.name,\n        firstName: u.firstName,\n        lastName: u.lastName,\n        // property: u.property ? u.property.email : '',\n        emailVerified: u.emailVerified.toString(),\n        mobileVerified: u.mobileVerified.toString(),\n        createdAt:u.createdAt.toString().split('T')[0]\n    }));\n\n    useEffect(() => {\n        setLoading(true);\n        dispatch(fetchUsers({page, pageSize: 100000})).finally(() =>\n            setLoading(false),\n        );\n        return () => {};\n    }, [dispatch, page]);\n\n    useEffect(() => {\n        dispatch(fetchUserCount()).then(({value: count}) =>\n            setCount(parseInt(count)),\n        );\n        return () => {};\n    }, [dispatch]);\n\n    // console.log('itemsPerPageSelect = ' + PAGE_SIZE);\n    return (\n        <main>\n        <Header />\n        <div className=\"content\">\n        <CRow>\n            <CCol>\n                <CCard>\n                    <CCardHeader>\n                        Users\n                        <small className=\"text-muted\"> Users</small>\n                        <div className=\"card-header-actions\">\n                            <CButton\n                                tag={Link}\n                                to={'/admin/users/new'}\n                                className=\"btn-ghost-primary h-auto\"\n                                size={'sm'}\n                                color=\"primary\">\n                                New User\n                            </CButton>\n                        </div>\n                    </CCardHeader>\n                    <CCardBody>\n                        <CDataTable\n                            items={users}\n                            loading={loading}\n                            fields={[\n                                {key: 'email', _classes: 'font-weight-bold'},\n                                {key: 'username', label: 'Username'},\n                                'mobileNumber',\n                                'firstName',\n                                'lastName',\n                                'role',\n                                'createdAt'\n                            ]}\n                            hover\n                            striped\n                            sorter\n                            tableFilter={{ 'placeholder': 'Keywords...'}}\n                            itemsPerPage = {PAGE_SIZE}\n                            pagination\n                            clickableRows\n                            onRowClick={(item) =>\n                                history.push(`/admin/users/${item.id}`)\n                            }\n                        />\n                        {\n                        // parseInt(count / PAGE_SIZE) ? (\n                        //     <CPagination\n                        //         activePage={page}\n                        //         size={'sm'}\n                        //         onActivePageChange={pageChange}\n                        //         doubleArrows={false}\n                        //         pages={parseInt(Math.ceil(count / PAGE_SIZE))}\n                        //         align=\"end\"\n                        //     />\n                        // ) : null\n                        }\n                    </CCardBody>\n                </CCard>\n            </CCol>\n        </CRow>\n        </div>\n        </main>\n    );\n};\n\nexport default Users;\n"],"names":["history","useHistory","queryPage","useLocation","search","match","currentPage","Number","useState","page","setPage","loading","setLoading","setCount","useEffect","dispatch","useDispatch","users","useSelector","state","admin","map","u","id","email","username","mobileNumber","role","name","firstName","lastName","emailVerified","toString","mobileVerified","createdAt","split","fetchUsers","pageSize","finally","fetchUserCount","then","count","value","parseInt","className","tag","Link","to","size","color","items","fields","key","_classes","label","hover","striped","sorter","tableFilter","itemsPerPage","pagination","clickableRows","onRowClick","item","push"],"sourceRoot":""}