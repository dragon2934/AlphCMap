{"version":3,"file":"static/js/243.ce15a294.chunk.js","mappings":"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","sources":["admin/file-upload/components/FilesUpload.js","admin/file-upload/services/http-common.js","admin/file-upload/services/FileUploadService.js","admin/views/properties/file-upload.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport UploadService from \"../services/FileUploadService\";\nimport { listFiles, updateProperty, updateLatLng } from '../../../redux/actionCreators/adminActionCreators';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst UploadFiles = ({ extension }) => {\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\n  const [progressInfos, setProgressInfos] = useState({ val: [] });\n  const uploadedFiles = useSelector((state) => state.admin.uploadedFiles);\n  const [message, setMessage] = useState([]);\n  const [fileInfos, setFileInfos] = useState([]);\n  const progressInfosRef = useRef(null)\n  const dispatch = useDispatch();\n  const token = useSelector((state) => state.auth.jwt);\n  console.log('extension =' + extension);\n\n\n  useEffect(() => {\n    dispatch(listFiles()).then((response) => {\n      setFileInfos(response.data);\n    });\n  }, []);\n\n  const selectFiles = (event) => {\n    setSelectedFiles(event.target.files);\n    console.log('file selected..' + JSON.stringify(event.target.files));\n    setProgressInfos({ val: [] });\n  };\n\n  const uploadFile = async (idx, file) => {\n    let _progressInfos = [...progressInfosRef.current.val];\n    // dispatch(uploadFiles()).then((response) => {\n    //   setFileInfos(response.data);\n    // });\n    console.log('uploading ..file=' + JSON.stringify(file));\n    return UploadService.upload(file, token, (event) => {\n      _progressInfos[idx].percentage = Math.round(\n        (100 * event.loaded) / event.total\n      );\n      setProgressInfos({ val: _progressInfos });\n    })\n      .then((resp) => {\n        setMessage((prevMessage) => ([\n          ...prevMessage,\n          \"Uploaded the file successfully: \" + file.name,\n        ]));\n        //Do update database for property\n        //resp.url\n        // console.log('upload completed...' + JSON.stringify(resp));\n        const imageData = {\n          id: resp.data[0].id,\n          url: resp.data[0].url\n        }\n        uploadedFiles.push(imageData);\n        const files = Array.from(selectedFiles);\n        idx = idx + 1;\n        if (idx < files.length) {\n          sleep(500);\n          uploadFile(idx, files[idx]);\n        } else {\n          setMessage((prevMessage) => ([\n            ...prevMessage,\n            \"Uploaded Completed!\",\n          ]));\n        }\n\n      })\n      .catch((error) => {\n        console.log('upload file error..' + JSON.stringify(error));\n        _progressInfos[idx].percentage = 0;\n        setProgressInfos({ val: _progressInfos });\n\n        setMessage((prevMessage) => ([\n          ...prevMessage,\n          \"Could not upload the file: \" + file.name,\n        ]));\n      });\n  };\n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n  const uploadSelectedFiles = (event) => {\n    event.preventDefault();\n    const files = Array.from(selectedFiles);\n    console.log('files...' + JSON.stringify(files));\n\n    let _progressInfos = files.map(file => ({ percentage: 0, fileName: file.name }));\n\n    progressInfosRef.current = {\n      val: _progressInfos,\n    }\n\n    //Start upload\n    uploadFile(0, files[0]);\n\n    // const uploadPromises = files.map((file, i) =>{ \n    //   uploadFile(i, file);\n    //   sleep(500);//wait for database update\n    // });\n\n    // Promise.all(uploadPromises)\n    //   .then((files) => {\n    //     setFileInfos(files.data);\n    //     console.log('all uploads...' + files.data);\n    //   });\n\n    // setMessage([]);\n  };\n\n  return (\n    <div>\n      {progressInfos && progressInfos.val.length > 0 &&\n        progressInfos.val.map((progressInfo, index) => (\n          <div className=\"mb-2\" key={index}>\n            <span>{progressInfo.fileName}</span>\n            <div className=\"progress\">\n              <div\n                className=\"progress-bar progress-bar-info\"\n                role=\"progressbar\"\n                aria-valuenow={progressInfo.percentage}\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                style={{ width: progressInfo.percentage + \"%\" }}\n              >\n                {progressInfo.percentage}%\n              </div>\n            </div>\n          </div>\n        ))}\n\n      <div className=\"row my-3\">\n        <div className=\"col-8\">\n          <label className=\"btn btn-default p-0\">\n            <input type=\"file\" accept={extension} multiple onChange={selectFiles} />\n          </label>\n        </div>\n\n        <div className=\"col-4\">\n          <button\n            className=\"btn btn-success btn-sm\"\n            disabled={!selectedFiles}\n            onClick={uploadSelectedFiles}\n          >\n            Upload\n          </button>\n        </div>\n      </div>\n\n      {message.length > 0 && (\n        <div className=\"alert alert-secondary\" role=\"alert\">\n          <ul>\n            {message.map((item, i) => {\n              return <li key={i}>{item}</li>;\n            })}\n          </ul>\n        </div>\n      )}\n\n    </div>\n  );\n};\n\nexport default UploadFiles;\n","import axios from \"axios\";\n\nexport default axios.create({\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n\n// export const fetchUser = (id) => {\n//   return (dispatch, getState) => {\n//       const token = getState().auth.jwt;\n\n//       return dispatch({\n//           type: ADMIN_FETCH_USER,\n//           payload: fetch(`${SERVICE_URL}/users/${id}?tenant=${PARTNER_TOKEN}`, {\n//               headers: {\n//                   Accept: 'application/json',\n//                   'Content-Type': 'application/json',\n//                   Authorization: `Bearer ${token}`,\n//               },\n//               method: 'GET',\n//           })\n//               .then((r) => r.json())\n//               .then((responseData) => {\n//                   if (responseData.statusCode >= 300) {\n//                       return Promise.reject(responseData);\n//                   } else {\n//                       return responseData;\n//                   }\n//               }),\n//       });\n//   };\n// };\n","import http from \"./http-common\";\nimport {SERVICE_URL} from '../../../constants';\n// const { listFiles,uploadFiles} = require('../../../redux/actionCreators/adminActionCreators');\nconst upload = (file,token, onUploadProgress) => {\n  let formData = new FormData();\n\n  formData.append(\"files\", file);\n\n  return http.post(SERVICE_URL+\"/upload\", formData, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n      Authorization: `Bearer ${token}`,\n    },\n    onUploadProgress,\n  });\n};\n\nconst getFiles = (token) => {\n  return http.get(\n    SERVICE_URL+\"/upload/files?_limit=10&_start=0&_sort=updatedAt:DESC\");\n  // return listFiles();\n};\n\nconst FileUploadService = {\n  upload,\n  getFiles,\n};\n\nexport default FileUploadService; \n","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\n// import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport {\n  CButton,\n} from '@coreui/react';\n\nimport FilesUpload from '../../file-upload/components/FilesUpload';\n\nimport { TheSidebar, TheFooter, TheHeader } from '../../containers/index';\nimport { CContainer } from '@coreui/react';\nimport '../../../styles/admin/style.scss';\nimport { batchImportCompany } from '../../../redux/actionCreators/adminActionCreators';\nimport { toastr } from 'react-redux-toastr';\nconst PropertyFileUpload = () => {\n  const uploadedFiles = useSelector((state) => state.admin.uploadedFiles);\n  const dispatch = useDispatch();\n  const importCSVData = useCallback(() => {\n    console.log('. start to import csv data...uploadedFiles..' + JSON.stringify(uploadedFiles));\n    const data = {\n      fileName: uploadedFiles[0].url\n    }\n    dispatch(batchImportCompany(data)).then(resp => {\n      console.log('...batch import ..', resp);\n    }).catch(error => {\n      console.log('..import error');\n      toastr.error('Error', 'Data import failed');\n    });\n  });\n  return (\n    <div className=\"c-app c-default-layout\">\n      <TheSidebar />\n      <div className=\"c-wrapper\">\n\n        <TheHeader />\n        <div className=\"c-body\">\n          <main className=\"c-main\">\n            <CContainer fluid className={'h-100'}>\n              <div className=\"content\">\n                <div className=\"container\" style={{ width: \"600px\" }}>\n                  <div className=\"my-3\">\n                    <h4>Batch  Import Company</h4>\n                  </div>\n\n                  <FilesUpload extension={'.csv'} />\n\n                  <hr />\n                  <CButton\n                    onClick={() =>\n                      importCSVData()\n                    }\n                    type=\"button\"\n                    size=\"sm\"\n                    color=\"primary\">\n                    Import\n                  </CButton>{' '}\n                </div>\n              </div>\n            </CContainer>\n          </main>\n        </div>\n        <TheFooter />\n      </div>\n    </div>\n  );\n}\n\nexport default PropertyFileUpload;\n"],"names":["extension","useState","undefined","selectedFiles","setSelectedFiles","val","progressInfos","setProgressInfos","uploadedFiles","useSelector","state","admin","message","setMessage","setFileInfos","progressInfosRef","useRef","dispatch","useDispatch","token","auth","jwt","console","log","useEffect","listFiles","then","response","data","uploadFile","idx","file","_progressInfos","current","JSON","stringify","UploadService","event","percentage","Math","round","loaded","total","resp","prevMessage","name","imageData","id","url","push","files","Array","from","length","sleep","catch","error","milliseconds","Promise","resolve","setTimeout","map","progressInfo","index","className","fileName","role","style","width","type","accept","multiple","onChange","target","disabled","onClick","preventDefault","item","i","axios","headers","upload","onUploadProgress","formData","FormData","append","http","SERVICE_URL","Authorization","getFiles","importCSVData","useCallback","batchImportCompany","toastr","fluid","FilesUpload","size","color"],"sourceRoot":""}