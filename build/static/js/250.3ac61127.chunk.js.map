{"version":3,"file":"static/js/250.3ac61127.chunk.js","mappings":"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","sources":["admin/routes.js","admin/containers/TheFooter.js","admin/containers/TheContent.js","admin/containers/TheHeader.js","admin/containers/TheHeaderDropdown.js","admin/containers/TheSidebar.js","admin/views/templates/TemplateEdit.js"],"sourcesContent":["import React from \"react\";\nconst Users = React.lazy(() => import('./views/users/Users'));\nconst User = React.lazy(() => import('./views/users/User'));\nconst UserEdit = React.lazy(() => import('./views/users/UserEdit'));\n\nconst Properties = React.lazy(() => import('./views/properties/Properties'));\nconst Property = React.lazy(() => import('./views/properties/Property'));\nconst PropertyEdit = React.lazy(() =>\n    import('./views/properties/PropertyEdit'),\n);\n\nconst PropertyFileUpload = React.lazy(() => import('./views/properties/file-upload'));\n\nconst routes = [\n    { path: '/admin/', exact: true, name: 'Home' },\n    // User Routes\n    { path: '/admin/users', exact: true, name: 'Users', component: Users },\n    {\n        path: '/admin/users/new',\n        exact: true,\n        name: 'New User',\n        component: UserEdit,\n    },\n    {\n        path: '/admin/users/:id',\n        exact: true,\n        name: 'User Details',\n        component: User,\n    },\n    {\n        path: '/admin/edit/user/:id',\n        exact: true,\n        name: 'Edit User',\n        component: UserEdit,\n    },\n\n    {\n        path: '/admin/file-upload',\n        exact: true,\n        name: 'FileUpload',\n        component: PropertyFileUpload,\n    },\n    {\n        path: '/admin/properties',\n        exact: true,\n        name: 'Properties',\n        component: Properties,\n    },\n    {\n        path: '/admin/properties/new',\n        exact: true,\n        name: 'New Property',\n        component: PropertyEdit,\n    },\n    {\n        path: '/admin/properties/:id',\n        exact: true,\n        name: 'Property Details',\n        component: Property,\n    },\n    {\n        path: '/admin/edit/property/:id',\n        exact: true,\n        name: 'Edit Property',\n        component: PropertyEdit,\n    },\n    {\n        path: '/admin/properties/:id',\n        exact: true,\n        name: 'User Details',\n        component: User,\n    },\n];\n\nexport default routes;\n","import React from \"react\";\nimport {CFooter} from '@coreui/react';\n\nconst TheFooter = () => {\n    return <CFooter fixed={false}></CFooter>;\n};\n\nexport default React.memo(TheFooter);\n","import React, {Suspense} from \"react\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport {CContainer, CFade} from '@coreui/react';\nimport {Spinner} from 'reactstrap';\n\n// routes config\nimport routes from '../routes';\n\nconst loading = (\n    <div className={'loader'}>\n        <Spinner\n            type={'grow'}\n            color={'primary'}\n            style={{width: '5rem', height: '5rem'}}>\n            {''}\n        </Spinner>\n    </div>\n);\n\nconst TheContent = () => {\n    return (\n        <main className=\"c-main\">\n            <CContainer fluid className={'h-100'}>\n                <Suspense fallback={loading}>\n                    <Switch>\n                        {routes.map((route, idx) => {\n                            return (\n                                route.component && (\n                                    <Route\n                                        key={idx}\n                                        path={route.path}\n                                        exact={route.exact}\n                                        name={route.name}\n                                        render={(props) => (\n                                            <CFade className={'h-100'}>\n                                                <route.component {...props} />\n                                            </CFade>\n                                        )}\n                                    />\n                                )\n                            );\n                        })}\n                        <Redirect from=\"/\" to=\"/admin/users\" />\n                    </Switch>\n                </Suspense>\n            </CContainer>\n        </main>\n    );\n};\n\nexport default React.memo(TheContent);\n","import {\n    CBreadcrumbRouter,\n    CHeader,\n    CHeaderBrand,\n    CHeaderNav,\n    CSubheader,\n    CToggler,\n} from '@coreui/react';\nimport React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setShowSidebar } from '../../redux/actionCreators/adminActionCreators';\n\n// routes config\nimport routes from '../routes';\n\nimport { TheHeaderDropdown } from './index';\n\nconst TheHeader = () => {\n    const dispatch = useDispatch();\n    const sidebarShow = useSelector((state) => state.admin.sidebarShow);\n\n    const toggleSidebar = () => {\n        const val = [true, 'responsive'].includes(sidebarShow)\n            ? false\n            : 'responsive';\n        dispatch(setShowSidebar(val));\n    };\n\n    const toggleSidebarMobile = () => {\n        const val = [false, 'responsive'].includes(sidebarShow)\n            ? true\n            : 'responsive';\n        dispatch(setShowSidebar(val));\n    };\n\n    return (\n        <CHeader withSubheader>\n            <CToggler\n                inHeader\n                className=\"ml-md-3 d-lg-none\"\n                onClick={toggleSidebarMobile}\n            />\n            <CToggler\n                inHeader\n                className=\"ml-3 d-md-down-none\"\n                onClick={toggleSidebar}\n            />\n            <CHeaderBrand className=\"mx-auto d-lg-none\" to=\"/\" />\n\n            <CHeaderNav className=\"d-md-down-none mr-auto\" />\n\n            <CHeaderNav className=\"px-3\">\n                <TheHeaderDropdown />\n            </CHeaderNav>\n\n            <CSubheader className=\"px-3 justify-content-between\">\n                <CBreadcrumbRouter\n                    className=\"border-0 c-subheader-nav m-0 px-0 px-md-3\"\n                    routes={routes}\n                />\n            </CSubheader>\n        </CHeader>\n    );\n};\n\nexport default TheHeader;\n","import CIcon from '@coreui/icons-react';\nimport {\n    CDropdown,\n    CDropdownItem,\n    CDropdownMenu,\n    CDropdownToggle,\n    CImg,\n} from '@coreui/react';\nimport React from \"react\";\n// import {useSelector} from 'react-redux';\nimport { Link } from \"react-router-dom\";\n\nconst TheHeaderDropdown = () => {\n\n    return (\n        <CDropdown inNav className=\"c-header-nav-items mx-2\" direction=\"down\">\n            <CDropdownToggle className=\"c-header-nav-link\" caret={false}>\n                <div className=\"c-avatar\">\n                    <CImg\n                        src={`/assets/img/default-user.png`}\n                        className=\"c-avatar-img\"\n                        style={{ backgroundColor: \"black\" }}\n                    />\n                </div>\n            </CDropdownToggle>\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n                <CDropdownItem tag={Link} to={'/logout'}>\n                    <CIcon name=\"cil-lock-locked\" className=\"mfe-2\" />\n                    Logout\n                </CDropdownItem>\n            </CDropdownMenu>\n        </CDropdown>\n    );\n};\n\nexport default TheHeaderDropdown;\n","import CIcon from '@coreui/icons-react';\nimport {\n    CCreateElement,\n    CImg,\n    CSidebar,\n    CSidebarBrand,\n    CSidebarMinimizer,\n    CSidebarNav,\n    CSidebarNavDivider,\n    CSidebarNavDropdown,\n    CSidebarNavItem,\n    CSidebarNavTitle,\n} from '@coreui/react';\nimport React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setShowSidebar } from '../../redux/actionCreators/adminActionCreators';\n\n// sidebar nav config\n// import navigation from './_nav';\nconst TheSidebar = () => {\n    const dispatch = useDispatch();\n    const navigation = [\n        {\n            _tag: 'CSidebarNavTitle',\n            _children: ['Data'],\n        },\n        {\n            _tag: 'CSidebarNavItem',\n            name: 'Users',\n            to: '/admin/users',\n            icon: 'cil-user',\n        },\n        {\n            _tag: 'CSidebarNavItem',\n            name: 'Properties',\n            to: '/admin/properties',\n            icon: 'cil-home',\n        },\n        {\n            _tag: 'CSidebarNavTitle',\n            _children: ['Campaigns'],\n        },\n        {\n            _tag: 'CSidebarNavItem',\n            name: 'Email Campaigns',\n            to: '/admin/email-campaigns',\n            icon: 'cil-home',\n        },\n        {\n            _tag: 'CSidebarNavItem',\n            name: 'Templates',\n            to: '/admin/templates',\n            icon: 'cil-home',\n        },\n        {\n            _tag: 'CSidebarNavTitle',\n            _children: ['Marketing'],\n        },\n        {\n            _tag: 'CSidebarNavItem',\n            name: 'Coupons',\n            to: '/admin/coupons',\n            icon: 'cil-user',\n        },\n        {\n            _tag: 'CSidebarNavItem',\n            name: 'Flyer',\n            to: '/admin/flyers',\n            icon: 'cil-user',\n        },\n        {\n            _tag: 'CSidebarNavItem',\n            name: 'Promting Events',\n            to: '/admin/events',\n            icon: 'cil-user',\n        },\n    ];\n    const show = useSelector((state) => state.admin.sidebarShow);\n    return (\n        <CSidebar\n            show={show}\n            onShowChange={(val) => dispatch(setShowSidebar(val))}>\n            <CSidebarBrand className=\"d-md-down-none\" to=\"/\">\n                <CImg\n                    className=\"c-sidebar-brand-full\"\n                    src={'/assets/img/logo-sm.png'}\n                    height={35}\n                />\n                <CImg\n                    className=\"c-sidebar-brand-minimized\"\n                    src={'/assets/img/icon-white-small.png'}\n                    height={35}\n                />\n            </CSidebarBrand>\n            <CSidebarNav>\n                <CCreateElement\n                    items={navigation}\n                    components={{\n                        CSidebarNavDivider,\n                        CSidebarNavDropdown,\n                        CSidebarNavItem,\n                        CSidebarNavTitle,\n                    }}\n                />\n            </CSidebarNav>\n            <CSidebarMinimizer className=\"c-d-md-down-none\" />\n        </CSidebar>\n    );\n};\n\nexport default React.memo(TheSidebar);\n","import {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    CCardHeader,\n    CCol,\n    CForm,\n    CFormGroup,\n    CInput,\n    CInvalidFeedback,\n    CLabel,\n    CRow,\n    CSpinner,\n} from '@coreui/react';\nimport { useFormik } from 'formik';\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport * as Yup from 'yup';\n// import MapContext from '../../../common/contexts/MapContext/MapContext';\nimport {\n\n    fetchTemplate,\n    saveTemplate\n} from '../../../redux/actionCreators/adminActionCreators';\n\nimport TextArea from \"antd/lib/input/TextArea\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport draftToHtml from 'draftjs-to-html';\nimport { EditorState, convertToRaw, ContentState, convertFromHTML } from 'draft-js';\n\n\nimport { TheSidebar, TheFooter, TheHeader } from '../../containers/index';\nimport { CContainer } from '@coreui/react';\nimport '../../../styles/admin/style.scss';\n\nconst validationSchema = Yup.object().shape({\n    from_name: Yup.string().required('From name is required'),\n    template_name: Yup.string().required('Template name is required'),\n    subject: Yup.string().required('Subject is required'),\n\n\n});\n\nconst TemplateEdit = ({ match }) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const roles = useSelector((state) => state.admin.roles);\n    const loginedUser = useSelector((state) => state.auth.me);\n\n\n    const [editorState, setEditorState] = useState(EditorState.createEmpty())\n\n    // console.log('loginedUser=' + JSON.stringify(loginedUser.role));\n    const formik = useFormik({\n        initialValues: {\n            id: match.params.id,\n            from_name: '',\n            template_name: '',\n            subject: '',\n            from_email: '',\n            template_body: '',\n        },\n        validationSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n            //PM add a tenant\n            const user = {\n                ...values,\n                owner_id: loginedUser.id,\n                tenant: loginedUser.id,\n                // propertyId: property!=null && property!=undefined ? property.id:landlordId,\n                // unitNo: unitNo\n            };\n\n            dispatch(saveTemplate(user))\n                .then((resp) => {\n                    console.log('..save template..', resp);\n                    if (match.params.id)\n                        history.push(`/admin/templates/${match.params.id}`);\n                    else history.push('/admin/templates');\n                })\n                .catch(() => setSubmitting(false));\n\n        },\n    });\n\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        values,\n        isValid,\n        isSubmitting,\n        resetForm,\n        setValues,\n        setFieldValue,\n        setFieldTouched,\n    } = formik;\n    // const [properties,setProperties] = useState(null);\n    // const [property,setProperty] = useState(null);\n    const [loading, setLoading] = useState(true);\n    // const [landlordId,setLandlordId] = useState('');\n    useEffect(() => {\n        if (match.params.id) {\n            dispatch(fetchTemplate(match.params.id)).then(({ value: record }) => {\n\n                console.log('...fetch template..', record);\n                setValues({\n                    id: record.data.id,\n                    template_name: record.data.attributes.template_name,\n                    subject: record.data.attributes.subject,\n                    from_email: record.data.attributes.from_email,\n                    from_name: record.data.attributes.from_name,\n                    template_body: record.data.attributes.template_body,\n                });\n                setEditorState(\n                    EditorState.createWithContent(\n                        ContentState.createFromBlockArray(\n                            convertFromHTML(record.data.attributes.template_body)\n                        )\n                    )\n                );\n            });\n        }\n\n    }, [dispatch, loginedUser, match.params.id, setValues]);\n\n\n    const onEditorStateChange = (state) => {\n        setEditorState(state);\n        const htmlContent = draftToHtml(convertToRaw(state.getCurrentContent()));\n        console.log('..htmlContent..' + htmlContent);\n        // const title = values.promotionTitle;\n        setValues({\n            ...values,\n            template_body: htmlContent\n        })\n    }\n    const [uploadedImages, setUploadedImages] = useState([]);\n    const uploadCallback = async (fileData) => {\n        let formData = new FormData();\n\n        formData.append(\"files\", fileData);\n\n        const imgData = await http.post(apiUrl + \"/upload\", formData, {\n            headers: {\n                // \"Content-Type\": \"multipart/form-data\",\n                \"Authorization\": `Bearer ${token}`,\n            },\n        });\n        console.log('..imgData..' + JSON.stringify(imgData));\n        return Promise.resolve({\n            data: {\n                link: `https://rest.klosertoyou.com${imgData.data[0].url}`\n            }\n        });\n    }\n    // const [unitNo,setUnitNo] = useState('');\n    return (\n        <div className=\"c-app c-default-layout\">\n            <TheSidebar />\n            <div className=\"c-wrapper\">\n\n                <TheHeader />\n                <div className=\"c-body\">\n                    <main className=\"c-main\">\n                        <CContainer fluid className={'h-100'}>\n                            <div className=\"content\">\n                                <CRow>\n                                    <CCol md={12}>\n                                        <CForm onSubmit={handleSubmit}>\n                                            <CCard>\n                                                <CCardHeader>Template id: {match.params.id}</CCardHeader>\n                                                <CCardBody>\n                                                    <CCol xs=\"12\">\n                                                        <CFormGroup>\n                                                            <CLabel htmlFor=\"template_name\">\n                                                                Template Name\n                                                            </CLabel>\n                                                            <CInput\n                                                                id=\"template_name\"\n                                                                name=\"template_name\"\n                                                                onChange={handleChange}\n                                                                onBlur={handleBlur}\n                                                                value={values.template_name}\n                                                                invalid={\n                                                                    touched.template_name &&\n                                                                    errors.template_name\n                                                                }\n                                                            />\n                                                            <CInvalidFeedback>\n                                                                {errors.template_name}\n                                                            </CInvalidFeedback>\n                                                        </CFormGroup>\n                                                    </CCol>\n                                                    <CCol xs=\"12\">\n                                                        <CFormGroup>\n                                                            <CLabel htmlFor=\"subject\">\n                                                                Subject\n                                                            </CLabel>\n                                                            <CInput\n                                                                id=\"subject\"\n                                                                name=\"subject\"\n                                                                onChange={handleChange}\n                                                                onBlur={handleBlur}\n                                                                value={values.subject}\n                                                                invalid={\n                                                                    touched.subject && errors.subject\n                                                                }\n                                                            />\n                                                            <CInvalidFeedback>\n                                                                {errors.subject}\n                                                            </CInvalidFeedback>\n                                                        </CFormGroup>\n                                                    </CCol>\n                                                    <CCol xs=\"12\">\n                                                        <CFormGroup>\n                                                            <CLabel htmlFor=\"from_email\">\n                                                                From Email\n                                                            </CLabel>\n                                                            <CInput\n                                                                id=\"from_email\"\n                                                                name=\"from_email\"\n                                                                onChange={handleChange}\n                                                                onBlur={handleBlur}\n                                                                value={values.from_email}\n                                                                invalid={\n                                                                    touched.from_email && errors.from_email\n                                                                }\n                                                            />\n                                                            <CInvalidFeedback>\n                                                                {errors.from_email}\n                                                            </CInvalidFeedback>\n                                                        </CFormGroup>\n                                                    </CCol>\n                                                    <CCol xs=\"12\">\n                                                        <CFormGroup>\n                                                            <CLabel htmlFor=\"from_name\">\n                                                                From Name\n                                                            </CLabel>\n                                                            <CInput\n                                                                id=\"from_name\"\n                                                                name=\"from_name\"\n                                                                onChange={handleChange}\n                                                                onBlur={handleBlur}\n                                                                value={values.from_name}\n                                                                invalid={\n                                                                    touched.from_name && errors.from_name\n                                                                }\n                                                            />\n                                                            <CInvalidFeedback>\n                                                                {errors.from_name}\n                                                            </CInvalidFeedback>\n                                                        </CFormGroup>\n                                                    </CCol>\n                                                    <CCol xs=\"12\">\n                                                        <TextArea\n                                                            disabled\n                                                            style={{ width: \"1px\", height: \"1px\", visibility: \"hidden\" }}\n                                                            type=\"text\"\n                                                            name=\"template_body\"\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n\n                                                            value={values.template_body}\n                                                            invalid={touched.template_body && errors.template_body}\n                                                        />\n                                                        <Editor\n                                                            editorState={editorState}\n                                                            toolbarClassName=\"toolbarClassName\"\n                                                            wrapperClassName=\"wrapperClassName\"\n                                                            editorClassName=\"editorClassName\"\n                                                            onEditorStateChange={onEditorStateChange}\n                                                            toolbar={{\n                                                                options: ['inline', 'fontSize', 'fontFamily', 'list',\n                                                                    'textAlign', 'colorPicker', 'link', 'image'],\n                                                                link: {\n                                                                    defaultTargetOption: '_blank',\n                                                                    popupClassName: \"mail-editor-link\"\n                                                                },\n                                                                image: {\n                                                                    urlEnabled: true,\n                                                                    uploadEnabled: true,\n                                                                    uploadCallback: uploadCallback,\n                                                                    alignmentEnabled: true,\n                                                                    defaultSize: {\n                                                                        height: 'auto',\n                                                                        width: '600px',\n                                                                    },\n                                                                    inputAccept: 'application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel,image/gif,image/jpeg,image/jpg,image/png,image/svg'\n                                                                }\n                                                            }}\n                                                        />\n                                                    </CCol>\n\n\n\n\n                                                </CCardBody>\n                                                <CCardFooter className=\"text-right\">\n                                                    <CButton\n                                                        disabled={!isValid || isSubmitting}\n                                                        type=\"submit\"\n                                                        size=\"sm\"\n                                                        color=\"primary\">\n                                                        {isSubmitting ? (\n                                                            <CSpinner size=\"sm\" />\n                                                        ) : (\n                                                            'Submit'\n                                                        )}\n                                                    </CButton>{' '}\n                                                    <CButton\n                                                        type=\"reset\"\n                                                        size=\"sm\"\n                                                        color=\"danger\"\n                                                        onClick={() => resetForm()}>\n                                                        Reset\n                                                    </CButton>\n                                                </CCardFooter>\n                                            </CCard>\n                                        </CForm>\n                                    </CCol>\n                                </CRow>\n                                <CRow>\n                                    <br /> <br /> <br /> <br /> <br />\n                                </CRow>\n                            </div>\n                        </CContainer>\n                    </main>\n                </div>\n                <TheFooter />\n            </div>\n        </div>\n    );\n};\n\nexport default TemplateEdit;\n"],"names":["Users","React","User","UserEdit","Properties","Property","PropertyEdit","path","exact","name","component","TheFooter","Spinner","fixed","dispatch","useDispatch","sidebarShow","useSelector","state","admin","withSubheader","inHeader","className","onClick","val","includes","setShowSidebar","to","routes","inNav","direction","caret","src","style","backgroundColor","placement","tag","Link","TheSidebar","show","onShowChange","height","items","_tag","_children","icon","components","CSidebarNavDivider","CSidebarNavDropdown","CSidebarNavItem","CSidebarNavTitle","validationSchema","Yup","shape","from_name","required","template_name","subject","match","history","useHistory","loginedUser","roles","auth","me","useState","EditorState","editorState","setEditorState","formik","useFormik","initialValues","id","params","from_email","template_body","onSubmit","values","setSubmitting","user","owner_id","tenant","saveTemplate","then","resp","console","log","push","catch","handleChange","handleBlur","handleSubmit","errors","touched","isValid","isSubmitting","resetForm","setValues","setFieldValue","setFieldTouched","useEffect","fetchTemplate","record","value","data","attributes","ContentState","convertFromHTML","uploadCallback","fileData","formData","FormData","append","http","post","apiUrl","headers","token","imgData","JSON","stringify","Promise","resolve","link","url","fluid","md","xs","htmlFor","onChange","onBlur","invalid","disabled","width","visibility","type","Editor","toolbarClassName","wrapperClassName","editorClassName","onEditorStateChange","htmlContent","draftToHtml","convertToRaw","getCurrentContent","toolbar","options","defaultTargetOption","popupClassName","image","urlEnabled","uploadEnabled","alignmentEnabled","defaultSize","inputAccept","size","color"],"sourceRoot":""}