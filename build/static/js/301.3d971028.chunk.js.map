{"version":3,"file":"static/js/301.3d971028.chunk.js","mappings":"uPAAmBA,EAAQ,OAA3B,IAEaC,EACPC,6BAEOC,EAAgBD,2BAEhBE,EAAaF,4BAEbG,EAAgB,CACzBC,SAAU,CACNC,QAAS,iCACTC,WAAY,gCACZC,QAAS,iCACTC,KAAM,kCACNC,UAAW,oCAEfC,KAAM,CACFL,QAAS,iCACTM,QAAS,gCACTJ,QAAS,iCACTC,KAAM,kCACNI,KAAM,oC,8sBCuBDC,EAAiB,SAACC,GAC3B,OAAO,SAACC,GACJ,OAAOA,EAAS,CACZC,KAAMC,EAAAA,GACNC,QAASJ,GAEjB,CACJ,EA0IaK,EAAa,SAAH,GAAqC,IAAD,IAA9BC,KAAAA,OAAI,MAAG,EAAC,MAAEC,SAAAA,OAAQ,MAAG,GAAE,EAChD,OAAO,SAACN,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IACxBC,GAASN,EAAO,GAAKC,EAE3B,OAAON,EAAS,CACZC,KAAMW,EAAAA,GACNT,QAASU,MAAM,GAAD,OACP7B,EAAAA,GAAW,yBAAiB2B,EAAK,mBAAWL,GAC/C,CACIQ,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,QAGXC,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAEaI,EAAY,SAACC,GACtB,OAAO,SAAC1B,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAM0B,EAAAA,GACNxB,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,kBAAU0C,GAAM,CACzCZ,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,QAEPC,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAEaO,EAAiB,WAC1B,OAAO,SAAC5B,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAM4B,EAAAA,GACN1B,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,gBAAgB,CACzC8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,QAEPC,MAAK,SAACC,GAAC,OAAKA,EAAEW,MAAM,IACpBZ,MAAK,SAACG,GACH,OAAOA,CACX,KAEZ,CACJ,EAEaU,EAAa,SAACL,GACvB,OAAO,SAAC1B,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAM+B,EAAAA,GACN7B,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,kBAAU0C,GAAM,CACzCZ,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,WAEPC,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAGaY,EAAa,SAAClC,GACvB,OAAO,SAACC,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAExBwB,EAAG,UAAMlD,EAAAA,GAAW,0BAG1B,OADAmD,QAAQC,IAAI,eAAiBC,KAAKC,UAAUvC,IACrCC,EAAS,CACZC,KAAMsC,EAAAA,GACNpC,QAASU,MAAMqB,EAAK,CAChBM,KAAMH,KAAKC,UAAUvC,GACrBe,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,SAEPC,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EACaoB,EAAW,SAAC1C,GACrB,OAAO,SAACC,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAExBwB,EAAMnC,EAAK2B,GAAE,UACV1C,EAAAA,GAAW,kBAAUe,EAAK2B,IAAE,UAC5B1C,EAAAA,GAAW,UAGpB,OADAmD,QAAQC,IAAI,aAAeC,KAAKC,UAAUvC,IACnCC,EAAS,CACZC,KAAMsC,EAAAA,GACNpC,QAASU,MAAMqB,EAAK,CAChBM,KAAMH,KAAKC,UAAUvC,GACrBe,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQlB,EAAK2B,GAAK,MAAQ,SAEzBR,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAqEaqB,EAAkB,SAAH,GAAyD,IAAD,IAAlDrC,KAAAA,OAAI,MAAG,EAAC,MAAEC,SAAAA,OAAQ,MAAG,GAAE,MAAEqC,SAAAA,OAAQ,MAAG,QAAO,EACzE,OAAO,SAAC3C,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IACxBf,EAAOY,IAAWE,KAAKd,KAC7B,GAAa,OAATA,QAA0BiD,IAATjD,EAAoB,CAKrC,MAJqB,CACjB2B,WAAY,IACZuB,MAAO,GAGf,CACA,IAAMC,EAASnD,EAAKoD,aACdpC,GAASN,EAAO,GAAKC,EACvB4B,EAAG,UAAMlD,EAAAA,GAAW,8BAAsB2B,EAAK,mBAAWL,EAAQ,qDAA6CwC,GAMnH,MALgB,mBAAZH,IACAT,GAAY,iBAITlC,EAAS,CACZC,KAAM+C,EAAAA,GACN7C,QAASU,MACLqB,EACA,CACIpB,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,QAGXC,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,EAAatB,IAE5B,KAEZ,CACJ,EAgCakD,EAAgB,SAACC,GAC1B,OAAO,SAAClD,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAExByC,EAASC,MAAMC,QAAQH,GACvB,IACF,IAAII,gBACAJ,EAAMK,KAAI,SAAC7B,GACP,MAAO,CAAC,QAASA,EACrB,KAEFwB,EAEN,OAAOlD,EAAS,CACZC,KAAMuD,EAAAA,GACNrD,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,uBAAemE,GAAU,CAClDrC,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,QAEPC,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EA4BaoC,EAAqB,WAC9B,OAAO,SAACzD,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAMyD,EAAAA,GACNvD,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,qBAAqB,CAC9C8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,QAEPC,MAAK,SAACC,GAAC,OAAKA,EAAEW,MAAM,IACpBZ,MAAK,SAACG,GACH,OAAOA,CACX,KAEZ,CACJ,EAEasC,EAAiB,SAACjC,GAC3B,OAAO,SAAC1B,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAM2D,EAAAA,GACNzD,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,uBAAe0C,GAAM,CAC9CZ,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,WAEPC,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAEawC,EAAe,SAAC9D,GACzB,OAAO,SAACC,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAExBwB,EAAMnC,EAAK2B,GAAE,UACV1C,EAAAA,GAAW,uBAAee,EAAK2B,IAAE,UACjC1C,EAAAA,GAAW,eAEpB,OAAOgB,EAAS,CACZC,KAAM6D,EAAAA,GACN3D,QAASU,MAAMqB,EAAK,CAChBM,KAAMH,KAAKC,UAAUvC,GACrBe,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQlB,EAAK2B,GAAK,MAAQ,SAEzBR,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EA0Ia0C,EAAa,WACtB,OAAO,SAAC/D,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAM+D,EAAAA,GACN7D,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,4BAA4B,CACrD8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,QAEPC,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,EAAa4C,KAE5B,KAEZ,CACJ,EAGaC,EAAY,WACrB,OAAO,SAAClE,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAMkE,EAAAA,GACNhE,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,yDAAyD,CAClF8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,QAEPC,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EA2Ba+C,EAAiB,SAACC,EAAUC,GACrC,OAAO,SAACtE,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAExBX,EAAO,CACTsE,SAAUA,EACVC,QAASA,GAEb,OAAOtE,EAAS,CACZC,KAAMsE,EAAAA,GACNpE,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,kCAAkC,CAC3D8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,OACRuB,KAAMH,KAAKC,UAAUvC,KAEpBmB,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAGamD,EAAe,WACxB,OAAO,SAACxE,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAK9B,OAAOV,EAAS,CACZC,KAAMwE,EAAAA,GACNtE,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,8BAA8B,CACvD8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,OACRuB,KAAMH,KAAKC,UAZN,CAEb,KAYSpB,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAEaqD,EAAkB,SAAC3E,GAC5B,OAAO,SAACC,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAM0E,EAAAA,GACNxE,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,uBAAuB,CAChD8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,OACRuB,KAAMH,KAAKC,UAAUvC,KAEpBmB,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAEauD,EAAwB,SAAC7E,GAClC,OAAO,SAACC,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAM4E,EAAAA,GACN1E,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,iCAAiC,CAC1D8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,OACRuB,KAAMH,KAAKC,UAAUvC,KAEpBmB,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAEayD,EAAsB,SAAC/E,GAChC,OAAO,SAACC,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAM8E,EAAAA,GACN5E,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,4CAA4C,CACrE8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,OACRuB,KAAMH,KAAKC,UAAUvC,KAEpBmB,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAEa2D,EAAqB,SAACjF,GAC/B,OAAO,SAACC,EAAUO,GACAA,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAMgF,EAAAA,GACN9E,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,iCAAiC,CAC1D8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,oBAEpBE,OAAQ,OACRuB,KAAMH,KAAKC,UAAUvC,KAEpBmB,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAEa6D,EAAsB,SAACnF,GAGhC,MAAQ,CACJE,KAAMkF,EAAAA,GACNhF,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,iCAAiC,CAC1D8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,oBAEpBE,OAAQ,QAEPC,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,IAGZ,EACa+D,EAAgB,SAACrF,GAE1B,IAAMsF,GAAYC,EAAAA,EAAAA,gBAClB,OAAO,SAACtF,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAC9B,OAAOV,EAAS,CACZC,KAAMkF,EAAAA,GACNhF,QAASU,MAAM,UAAG7B,EAAAA,GAAW,wCAAyCqG,EAAW,CAC7EvE,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,QAEPC,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EACakE,EAAyB,SAACxF,GACnC,OAAO,SAACC,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAMuF,EAAAA,GACNrF,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,+BAA+B,CACxD8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,OACRuB,KAAMH,KAAKC,UAAUvC,KAEpBmB,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAIaoE,EAAmB,SAAC1F,GAC7B,OAAO,SAACC,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAMyF,EAAAA,GACNvF,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,mBAAmB,CAC5C8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,OACRuB,KAAMH,KAAKC,UAAUvC,KAEpBmB,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EA4BasE,EAAwB,SAAC5F,GAClC,OAAO,SAACC,EAAUO,GACd,IAAMC,EAAQD,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAMuF,EAAAA,GACNrF,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,kCAAkC,CAC3D8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYR,IAE7BS,OAAQ,OACRuB,KAAMH,KAAKC,UAAUvC,KAEpBmB,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAEauE,EAAsB,SAAC7F,GAChC,OAAO,SAACC,EAAUO,GACAA,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAM4F,EAAAA,GACN1F,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,uBAAuB,CAChD8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,oBAEpBE,OAAQ,OACRuB,KAAMH,KAAKC,UAAUvC,KAEpBmB,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,EAEayE,EAAqB,SAAC/F,GAC/B,OAAO,SAACC,EAAUO,GACAA,IAAWE,KAAKC,IAE9B,OAAOV,EAAS,CACZC,KAAM8F,EAAAA,GACN5F,QAASU,MAAM,GAAD,OAAI7B,EAAAA,GAAW,2BAA2B,CACpD8B,QAAS,CACLC,OAAQ,mBACR,eAAgB,oBAEpBE,OAAQ,OACRuB,KAAMH,KAAKC,UAAUvC,KAEpBmB,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IACpBF,MAAK,SAACG,GACH,OAAIA,EAAaC,YAAc,IACpBC,QAAQC,OAAOH,GAEfA,CAEf,KAEZ,CACJ,C","sources":["constants.js","redux/actionCreators/adminActionCreators.js"],"sourcesContent":["const utilsTools = require('./utils/utils');\n\nexport const SERVICE_URL = process.env.REACT_APP_SERVICE_URL\n    ? process.env.REACT_APP_SERVICE_URL\n    : 'http://localhost:1337';\nexport const PARTNER_TOKEN = process.env.REACT_APP_PARTNER_TOKEN;\n\nexport const STRIPE_URL = process.env.REACT_APP_SOCKET_SERVER\n\nexport const MapMarkerUrls = {\n    property: {\n        default: '/map-markers/blue_home_pin.png',\n        hasInjured: '/map-markers/red_home_pin.png',\n        pending: '/map-markers/grey_home_pin.png',\n        safe: '/map-markers/green_home_pin.png',\n        secondary: '/map-markers/second_home_pin.png',\n    },\n    user: {\n        default: '/map-markers/blue_user_pin.png',\n        injured: '/map-markers/red_user_pin.png',\n        pending: '/map-markers/grey_user_pin.png',\n        safe: '/map-markers/green_user_pin.png',\n        away: '/map-markers/yellow_user_pin.png',\n    },\n};\n\nexport const PropertyStatus = {\n    DEFAULT: 'default',\n    PENDING: 'pending',\n    SAFE: 'safe',\n    HAS_INJURED: 'hasInjured',\n    SECONDARY: 'secondary'\n};\n\nexport const AlertStatus = {\n    PENDING: 'pending',\n    SENT: 'sent',\n    RECEIVED: 'received',\n    SAFE: 'safe',\n    AWAY: 'away',\n    INJURED: 'injured',\n};\n\nexport const PendingStatuses = [\n    AlertStatus.PENDING,\n    AlertStatus.SENT,\n    AlertStatus.RECEIVED,\n];\n\nexport const SafeStatuses = [AlertStatus.SAFE, AlertStatus.AWAY];\nexport const NotSafeStatuses = [AlertStatus.INJURED];\n\nexport const RespondedStatuses = [\n    AlertStatus.INJURED,\n    AlertStatus.SAFE,\n    AlertStatus.AWAY,\n];\n\n// Not received state\n// This is needed for messaging action creators\n// Dont change this array or face the consequences.\nexport const NotRespondedStatuses = [AlertStatus.PENDING, AlertStatus.SENT];\n","import { SERVICE_URL } from '../../constants';\nimport {\n    ADMIN_ADD_PROPERTY,\n    ADMIN_ADD_USER,\n    ADMIN_DELETE_PROPERTY,\n    ADMIN_DELETE_USER,\n    ADMIN_FETCH_ALERT,\n    ADMIN_FETCH_ALERT_COUNT,\n    ADMIN_FETCH_ALERTS,\n    ADMIN_FETCH_PROPERTIES,\n    ADMIN_FETCH_PROPERTY,\n    ADMIN_FETCH_PROPERTY_ALERT,\n    ADMIN_FETCH_PROPERTY_COUNT,\n    ADMIN_FETCH_PROPERTY_RESIDENTS,\n    ADMIN_FETCH_ROLES,\n    ADMIN_FETCH_USER,\n    ADMIN_FETCH_USER_ALERT,\n    ADMIN_FETCH_USER_COUNT,\n    ADMIN_FETCH_USERS,\n    ADMIN_SEARCH_USERS,\n    ADMIN_SHOW_SIDEBAR,\n    ADMIN_LIST_FILES,\n    ADMIN_UPLOAD_FILE,\n    ADMIN_UPDATE_LAT_LNG,\n    ADMIN_SEARCH_PROPERTIES,\n    ADMIN_FETCH_CITIES,\n    ADMIN_FETCH_CITY,\n    ADMIN_FETCH_CITY_COUNT,\n    ADMIN_DELETE_CITY,\n    ADMIN_ADD_CITY,\n    ADMIN_PROPERTY_BINDING,\n    ADMIN_SEND_PROMOTE_EMAIL,\n    ADMIN_SAVE_BUSINESS_PROFILE,\n    ADMIN_GET_BUSINESS_PROFILE,\n    ADMIN_GET_BUSINESS_ADDRESS,\n    ADMIN_SAVE_MERCHANT_CONNECTION,\n    ADMIN_SAVE_SHOPPING_CART,\n    ADMIN_LOAD_SHOPPING_CART,\n    ADMIN_UNSUBSCRIBE,\n    ADMIN_TOTAL_CONNECTED\n} from '../actionTypes';\n\nimport { getLoginType } from '../../utils/utils';\n// UI\n\nexport const setShowSidebar = (data) => {\n    return (dispatch) => {\n        return dispatch({\n            type: ADMIN_SHOW_SIDEBAR,\n            payload: data,\n        });\n    };\n};\n\n\nexport const fetchCity = (id) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_FETCH_CITY,\n            payload: fetch(`${SERVICE_URL}/cities/${id}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const saveCity = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        const url = data.id\n            ? `${SERVICE_URL}/cities/${data.id}`\n            : `${SERVICE_URL}/cities`;\n\n        console.log('save city=' + JSON.stringify(data));\n        return dispatch({\n            type: ADMIN_ADD_CITY,\n            payload: fetch(url, {\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: data.id ? 'PUT' : 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\nexport const fetchCityCount = () => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_FETCH_CITY_COUNT,\n            payload: fetch(`${SERVICE_URL}/cities/count`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.text())\n                .then((responseData) => {\n                    return responseData;\n                }),\n        });\n    };\n};\nexport const fetchCities = ({ page = 1, pageSize = 10 }) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n        const start = (page - 1) * pageSize;\n\n        return dispatch({\n            type: ADMIN_FETCH_CITIES,\n            payload: fetch(\n                `${SERVICE_URL}/cities?_start=${start}&_limit=${pageSize}`,\n                {\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`,\n                    },\n                    method: 'GET',\n                },\n            )\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\nexport const deleteCity = (id) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_DELETE_CITY,\n            payload: fetch(`${SERVICE_URL}/cities/${id}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'DELETE',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\n// Users\n\nexport const fetchUsers = ({ page = 1, pageSize = 10 }) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n        const start = (page - 1) * pageSize;\n\n        return dispatch({\n            type: ADMIN_FETCH_USERS,\n            payload: fetch(\n                `${SERVICE_URL}/users?_start=${start}&_limit=${pageSize}`,\n                {\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`,\n                    },\n                    method: 'GET',\n                },\n            )\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const fetchUser = (id) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_FETCH_USER,\n            payload: fetch(`${SERVICE_URL}/users/${id}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const fetchUserCount = () => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_FETCH_USER_COUNT,\n            payload: fetch(`${SERVICE_URL}/users/count`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.text())\n                .then((responseData) => {\n                    return responseData;\n                }),\n        });\n    };\n};\n\nexport const deleteUser = (id) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_DELETE_USER,\n            payload: fetch(`${SERVICE_URL}/users/${id}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'DELETE',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\n\nexport const saveTenant = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        const url = `${SERVICE_URL}/residents/save-tenant`;\n\n        console.log('save Tenant=' + JSON.stringify(data));\n        return dispatch({\n            type: ADMIN_ADD_USER,\n            payload: fetch(url, {\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\nexport const saveUser = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        const url = data.id\n            ? `${SERVICE_URL}/users/${data.id}`\n            : `${SERVICE_URL}/users`;\n\n        console.log('save user=' + JSON.stringify(data));\n        return dispatch({\n            type: ADMIN_ADD_USER,\n            payload: fetch(url, {\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: data.id ? 'PUT' : 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const searchUsers = (value) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_SEARCH_USERS,\n            payload: fetch(\n                `${SERVICE_URL}/users?_limit=10&mobileNumber_contains=${value}`,\n                {\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`,\n                    },\n                    method: 'GET',\n                },\n            )\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\n///properties/search-by-keyword\nexport const searchProperties = (keywords, searchType, cityShorName) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n        let url = `${SERVICE_URL}/properties/search-by-keyword`;\n\n        const data = {\n            keywords: keywords,\n            searchType: searchType,\n            cityShorName: cityShorName\n        }\n        return dispatch({\n            type: ADMIN_SEARCH_PROPERTIES,\n            payload: fetch(\n                url,\n                {\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`,\n                    },\n                    body: JSON.stringify(data),\n                    method: 'POST',\n                },\n            )\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\n// Properties\nexport const fetchProperties = ({ page = 1, pageSize = 10, roleName = 'Admin' }) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n        const user = getState().auth.user;\n        if (user === null || user === undefined) {\n            const responseData = {\n                statusCode: 200,\n                value: []\n            }\n            return responseData;\n        }\n        const mobile = user.mobileNumber;\n        const start = (page - 1) * pageSize;\n        let url = `${SERVICE_URL}/properties?_start=${start}&_limit=${pageSize}&filters[$and][0][ownerMobileNumber][$eq]=${mobile}`;\n        if (roleName == 'PropertyManager') {\n            url = url + '&hidden=false'\n        }\n        // console.log('fetchProperties=' + url);\n\n        return dispatch({\n            type: ADMIN_FETCH_PROPERTIES,\n            payload: fetch(\n                url,\n                {\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`,\n                    },\n                    method: 'GET',\n                },\n            )\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData.data;\n                    }\n                }),\n        });\n    };\n};\nexport const fetchPropertiesByLandlordId = (landlordId) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n        let url = `${SERVICE_URL}/properties/get-by-landlord-id?landlordId=${landlordId}`;\n\n        return dispatch({\n            type: ADMIN_FETCH_PROPERTIES,\n            payload: fetch(\n                url,\n                {\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`,\n                    },\n                    method: 'GET',\n                },\n            )\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\n\nexport const fetchProperty = (param) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        const params = Array.isArray(param)\n            ? '?' +\n            new URLSearchParams(\n                param.map((id) => {\n                    return ['id_in', id];\n                }),\n            )\n            : param;\n\n        return dispatch({\n            type: ADMIN_FETCH_PROPERTY,\n            payload: fetch(`${SERVICE_URL}/properties/${params}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const fetchPropertyResidents = (propertyId) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_FETCH_PROPERTY_RESIDENTS,\n            payload: fetch(`${SERVICE_URL}/users?property=${propertyId}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const fetchPropertyCount = () => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_FETCH_PROPERTY_COUNT,\n            payload: fetch(`${SERVICE_URL}/properties/count`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.text())\n                .then((responseData) => {\n                    return responseData;\n                }),\n        });\n    };\n};\n\nexport const deleteProperty = (id) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_DELETE_PROPERTY,\n            payload: fetch(`${SERVICE_URL}/properties/${id}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'DELETE',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const saveProperty = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        const url = data.id\n            ? `${SERVICE_URL}/properties/${data.id}`\n            : `${SERVICE_URL}/properties`;\n\n        return dispatch({\n            type: ADMIN_ADD_PROPERTY,\n            payload: fetch(url, {\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: data.id ? 'PUT' : 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\n// Alerts\n// \nexport const fetchAlerts = ({ page = 1, pageSize = 10 }) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n        const start = (page - 1) * pageSize;\n\n        return dispatch({\n            type: ADMIN_FETCH_ALERTS,\n            payload: fetch(\n                `${SERVICE_URL}/alerts?_start=${start}&_limit=${pageSize}&status=1`,\n                {\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`,\n                    },\n                    method: 'GET',\n                },\n            )\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const fetchAlert = (id) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_FETCH_ALERT,\n            payload: fetch(`${SERVICE_URL}/alerts/${id}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const fetchAlertCount = () => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_FETCH_ALERT_COUNT,\n            payload: fetch(`${SERVICE_URL}/alerts/count?status=1`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.text())\n                .then((responseData) => {\n                    return responseData;\n                }),\n        });\n    };\n};\n\nexport const fetchPropertyAlerts = (alertId) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_FETCH_PROPERTY_ALERT,\n            payload: fetch(`${SERVICE_URL}/property-alerts?alert=${alertId}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const fetchUserAlerts = (alertId) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_FETCH_USER_ALERT,\n            payload: fetch(`${SERVICE_URL}/user-alerts?alert=${alertId}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\n\n\n// Roles\n\nexport const fetchRoles = () => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_FETCH_ROLES,\n            payload: fetch(`${SERVICE_URL}/users-permissions/roles`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData.roles;\n                    }\n                }),\n        });\n    };\n};\n\n\nexport const listFiles = () => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_LIST_FILES,\n            payload: fetch(`${SERVICE_URL}/upload/files?_limit=10&_start=0&_sort=updatedAt:DESC`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const uploadFiles = () => {\n    return (dispatch, getState) => {\n        // const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_UPLOAD_FILE,\n            payload: fetch(`${SERVICE_URL}/upload`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const updateProperty = (fileName, fileUrl) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        const data = {\n            fileName: fileName,\n            fileUrl: fileUrl\n        }\n        return dispatch({\n            type: ADMIN_UPLOAD_FILE,\n            payload: fetch(`${SERVICE_URL}/properties/update-by-filename`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n                body: JSON.stringify(data),\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\n///\nexport const updateLatLng = () => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        const data = {\n\n        }\n        return dispatch({\n            type: ADMIN_UPDATE_LAT_LNG,\n            payload: fetch(`${SERVICE_URL}/properties/update-lat-lng`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n                body: JSON.stringify(data),\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const propertyBinding = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_PROPERTY_BINDING,\n            payload: fetch(`${SERVICE_URL}/properties/binding`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n                body: JSON.stringify(data),\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const sendPromotionContents = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_SEND_PROMOTE_EMAIL,\n            payload: fetch(`${SERVICE_URL}/residents/send-promote-email`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n                body: JSON.stringify(data),\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const saveBusinessProfile = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_SAVE_BUSINESS_PROFILE,\n            payload: fetch(`${SERVICE_URL}/business-profiles/save-business-profile`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n                body: JSON.stringify(data),\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const getBusinessProfile = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_GET_BUSINESS_PROFILE,\n            payload: fetch(`${SERVICE_URL}/public/load-business-profile`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                method: 'POST',\n                body: JSON.stringify(data),\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const loadBusinessAddress = (data) => {\n\n\n    return ({\n        type: ADMIN_GET_BUSINESS_ADDRESS,\n        payload: fetch(`${SERVICE_URL}/public/load-business-address`, {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            method: 'GET',\n        })\n            .then((r) => r.json())\n            .then((responseData) => {\n                if (responseData.statusCode >= 300) {\n                    return Promise.reject(responseData);\n                } else {\n                    return responseData;\n                }\n            }),\n    });\n\n};\nexport const loadConnected = (data) => {\n\n    const loginType = getLoginType();\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n        return dispatch({\n            type: ADMIN_GET_BUSINESS_ADDRESS,\n            payload: fetch(`${SERVICE_URL}/residents/load-connected?loginType=` + loginType, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\nexport const saveMerchantConnection = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_SAVE_MERCHANT_CONNECTION,\n            payload: fetch(`${SERVICE_URL}/residents/connect-merchant`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n                body: JSON.stringify(data),\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\n// /api/shopping-carts\n\nexport const saveShoppingCart = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_SAVE_SHOPPING_CART,\n            payload: fetch(`${SERVICE_URL}/shopping-carts`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n                body: JSON.stringify(data),\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const loadShoppingCart = (userId) => {\n\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n        return dispatch({\n            type: ADMIN_LOAD_SHOPPING_CART,\n            payload: fetch(`${SERVICE_URL}/shopping-carts?filters[$and][0][users_id][$eq]=` + userId, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const disConnectionMerchant = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_SAVE_MERCHANT_CONNECTION,\n            payload: fetch(`${SERVICE_URL}/residents/disconnect-merchant`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n                body: JSON.stringify(data),\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const unSubscribeMerchant = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_UNSUBSCRIBE,\n            payload: fetch(`${SERVICE_URL}/public/unsubscribe`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                method: 'POST',\n                body: JSON.stringify(data),\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const loadConnectedTotal = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: ADMIN_TOTAL_CONNECTED,\n            payload: fetch(`${SERVICE_URL}/public/total-connected`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                method: 'POST',\n                body: JSON.stringify(data),\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};"],"names":["require","SERVICE_URL","process","PARTNER_TOKEN","STRIPE_URL","MapMarkerUrls","property","default","hasInjured","pending","safe","secondary","user","injured","away","setShowSidebar","data","dispatch","type","ADMIN_SHOW_SIDEBAR","payload","fetchUsers","page","pageSize","getState","token","auth","jwt","start","ADMIN_FETCH_USERS","fetch","headers","Accept","Authorization","method","then","r","json","responseData","statusCode","Promise","reject","fetchUser","id","ADMIN_FETCH_USER","fetchUserCount","ADMIN_FETCH_USER_COUNT","text","deleteUser","ADMIN_DELETE_USER","saveTenant","url","console","log","JSON","stringify","ADMIN_ADD_USER","body","saveUser","fetchProperties","roleName","undefined","value","mobile","mobileNumber","ADMIN_FETCH_PROPERTIES","fetchProperty","param","params","Array","isArray","URLSearchParams","map","ADMIN_FETCH_PROPERTY","fetchPropertyCount","ADMIN_FETCH_PROPERTY_COUNT","deleteProperty","ADMIN_DELETE_PROPERTY","saveProperty","ADMIN_ADD_PROPERTY","fetchRoles","ADMIN_FETCH_ROLES","roles","listFiles","ADMIN_LIST_FILES","updateProperty","fileName","fileUrl","ADMIN_UPLOAD_FILE","updateLatLng","ADMIN_UPDATE_LAT_LNG","propertyBinding","ADMIN_PROPERTY_BINDING","sendPromotionContents","ADMIN_SEND_PROMOTE_EMAIL","saveBusinessProfile","ADMIN_SAVE_BUSINESS_PROFILE","getBusinessProfile","ADMIN_GET_BUSINESS_PROFILE","loadBusinessAddress","ADMIN_GET_BUSINESS_ADDRESS","loadConnected","loginType","getLoginType","saveMerchantConnection","ADMIN_SAVE_MERCHANT_CONNECTION","saveShoppingCart","ADMIN_SAVE_SHOPPING_CART","disConnectionMerchant","unSubscribeMerchant","ADMIN_UNSUBSCRIBE","loadConnectedTotal","ADMIN_TOTAL_CONNECTED"],"sourceRoot":""}