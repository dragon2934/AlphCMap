{"version":3,"file":"static/js/536.2fce48bc.chunk.js","mappings":"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","sources":["site/pages/AccountVerification.js","site/layouts/HomeLayout.js","common/components/Map.js","admin/components/PropertiesTooltip.js","site/pages/property/AddressDetailsStep.js","site/pages/property/AddressInfoStep.js","site/pages/property/SuccessStep.js","site/pages/property/UserInfoStep.js","site/pages/property/PropertyForm.js","site/pages/newHome/ChangeColorForm.js","site/pages/newHome/BindingForm.js","site/pages/newHome/FlyerForm.js","site/pages/newHome/BusinessInfo.js","site/pages/newHome/Showcase.js","site/pages/newHome/Splash.js","site/pages/Home.js"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Button, Modal, ModalBody, Row } from 'reactstrap';\nimport { toggleVerificationModal } from '../../redux/actionCreators/appActionCreators';\nimport EmailVerification from './accountVerification/EmailVerification';\nimport MobileVerification from './accountVerification/MobileVerification';\n\nconst AccountVerification = () => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const showVerificationModal = useSelector(\n        (state) => state.app.showVerificationModal,\n    );\n\n    const registrationUser = useSelector((state) => state.registerForm.user);\n    let user = useSelector((state) => state.auth.user);\n    // const user1 = useSelector((state) => state.auth.user);\n    // const state = useSelector((state) => state);\n    // console.log('..state..' + JSON.stringify(state));\n    if (registrationUser) return null;\n    // if (user === null || user === undefined) {\n    //     user = user1;\n    // }\n\n    if (!user) return null;\n\n    const userHasEmail = user.username !== user.email;\n\n    const userVerified =\n        (userHasEmail && user.emailVerified && user.mobileVerified) ||\n        (!userHasEmail && user.mobileVerified);\n\n    if (!showVerificationModal) return null;\n\n    return (\n        <Modal\n            size=\"lg\"\n            isOpen={true}\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered>\n            <ModalBody>\n                {!userVerified && (\n                    <div className=\"pb-3\">\n                        Please verify your email and mobile phone to start using\n                        website.\n                    </div>\n                )}\n                <EmailVerification />\n                <MobileVerification />\n                {userVerified && (\n                    <>\n                        <div className={'success mt-5 mb-3'}>\n                            Verification Successful!\n                        </div>\n                        <Button\n                            block\n                            color={'success'}\n                            onClick={() => {\n                                try {\n                                    window.ReactNativeWebView.postMessage(\n                                        JSON.stringify({ action: 'goBack' }),\n                                    );\n                                } catch (e) { }\n\n                                dispatch(toggleVerificationModal());\n                                setTimeout(function () {\n                                    location.reload(true);\n                                }, 500)\n                            }}>\n                            Start Using Website\n                        </Button>\n                    </>\n                )}\n\n                {!userVerified && (\n                    <Row noGutters className=\"justify-content-end\">\n                        <Button\n                            color={'link'}\n                            size={'sm'}\n                            onClick={() => {\n                                history.push('/logout');\n                            }}>\n                            Logout\n                        </Button>\n                    </Row>\n                )}\n            </ModalBody>\n        </Modal>\n    );\n};\n\nexport default AccountVerification;\n","import React from \"react\";\n\nimport Footer from '../pages/newHome/Footer';\nimport Header from '../pages/newHome/Header';\nimport AccountVerification from \"../pages/AccountVerification\";\nconst HomeLayout = ({children}) => {\n    return (\n        <main>\n            <Header />\n            <div className=\"content\">{children}</div>\n            <Footer />\n            <AccountVerification />\n        </main>\n    );\n};\n\nexport default HomeLayout;\n","import mapboxgl from 'mapbox-gl';\nimport React, {\n    useContext,\n    useEffect,\n    useLayoutEffect,\n    useRef,\n    useState,\n} from \"react\";\nimport MapContext from '../contexts/MapContext/MapContext';\nimport MapLegend from './MapLegend';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_GL_ACCESS_TOKEN;\n\nconst Map = ({className}) => {\n    const [map, setMap] = useState(null);\n    const mapContainer = useRef(null);\n\n    const context = useContext(MapContext);\n\n    useLayoutEffect(() => {\n        document.onresize = () => {\n            context.map.resize();\n        };\n    });\n\n    useEffect(() => {\n        const initializeMap = ({setMap, mapContainer}) => {\n            const map = new mapboxgl.Map({\n                container: mapContainer.current,\n                style: 'mapbox://styles/mapbox/streets-v11',\n                center: [-79.4164156, 43.63982499999999],\n                zoom: 7,\n                attributionControl: false,\n            });\n            var nav = new mapboxgl.NavigationControl({\n                showCompass: false,\n                showZoom: true\n              });\n        \n            map.addControl(nav, \"bottom-right\");\n            map.on('load', () => {\n                setMap(map);\n                context.setMap(map);\n                map.resize();\n            });\n            console.log('Map Init......');\n        };\n\n        if (!map) initializeMap({setMap, mapContainer});\n    }, [context, map]);\n\n    return (\n        <div className={`d-flex flex-fill ${className ? className : ''}`}>\n            <MapLegend />\n            <div\n                className=\"flex-fill\"\n                ref={(el) => (mapContainer.current = el)}\n            />\n        </div>\n    );\n};\n\nexport default Map;\n","import { CButton } from '@coreui/react';\nimport React from 'react';\nimport { Button, Col, Row } from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst PropertiesTooltip = ({ id, email, property, cb, changeColor, editMode, cbBinding, cbSendEmail, cbBusiness, user, cbBusinessInfo }) => {\n    console.log('....render property..' + JSON.stringify(property))\n    // const utilsData = useSelector((state) => state.utilsData);\n\n    console.log('..me..' + JSON.stringify(user));\n    return (\n        <>\n            <h4>{email}</h4>\n\n            <Row className=\"justify-content-end\">\n                {property.bindingName && property.bindingName !== null && property.bindingName !== 'null' ? <Col className='bindingInfo'>Name: {property.bindingName}  </Col> : null}\n                {property.bindingEmail && property.bindingEmail !== null && property.bindingEmail !== 'null' ? <Col className='bindingInfo'>Email: {property.bindingEmail} <CButton onClick={(e) => cbSendEmail(e, property)} >Send Email</CButton>  </Col> : null}\n            </Row>\n            <Row className=\"justify-content-end\">\n                {property.bindingPhone && property.bindingPhone !== null && property.bindingPhone !== 'null' ? <Col className='bindingInfo'>Phone: {property.bindingPhone}  </Col> : null}\n                {property.bindingOthers && property.bindingOthers !== null && property.bindingOthers !== 'null' ? <Col className='bindingInfo'>Others: {property.bindingOthers}  </Col> : null}\n            </Row>\n            {editMode ?\n                <>\n                    <Row className=\"justify-content-end\">\n                        <Col className=\"list-unstyled text-right\">\n                            <li>\n                                {user !== null && user !== undefined && property.id === user.property.id ? <>  <Button\n                                    size={'sm'}\n                                    onClick={() => cbBusiness(email, property)}>\n                                    Business\n                                </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n                                </> : null\n\n                                }\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => {\n                                        cbBinding(email, property);\n                                    }}>\n                                    Info\n                                </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n                                {/* <Button\n                                    color={'primary'}\n                                    size={'sm'}\n                                    onClick={() =>\n                                        changeColor(email)\n                                    }>\n                                    Color\n                                </Button> &nbsp;&nbsp;&nbsp;&nbsp; */}\n                                {property.ownerMobileNumber === user.mobileNumber ? property.primaryAddress ? <Button\n                                    color={'primary'}\n                                    size={'sm'}\n                                    onClick={() =>\n                                        cb(email, true)\n                                    }>\n                                    Change Location\n                                </Button> : <Button\n                                    color={'primary'}\n                                    size={'sm'}\n                                    onClick={() =>\n                                        cb(email, false)\n                                    }>\n                                    Remove\n                                </Button> : null\n                                }\n                            </li>\n                        </Col>\n                    </Row>\n\n                </>\n                : property.is_business ? property.connected === \"0\" ? <> <Button\n                    size={'sm'}\n                    onClick={() => {\n                        cbBusinessInfo(email, property);\n                    }}>\n                    Info\n                </Button>  </> :\n                    <>\n                        <Button\n                            size={'sm'}\n                            onClick={() => {\n                                cbBusinessInfo(email, property);\n                            }}>\n                            Info\n                        </Button>  </> : null}\n        </>\n    );\n};\n\nexport default PropertiesTooltip;\n","import { useFormik } from 'formik';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    Button,\n    Col,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Spinner,\n} from 'reactstrap';\nimport * as Yup from 'yup';\nimport {\n    resetRegistrationForm,\n    setPropertyRegistrationForm,\n} from '../../../redux/actionCreators/registrationActionCreators';\n\nconst validationSchema = Yup.object().shape({});\n\nconst AddressDetailsStep = ({ wizardInstance }) => {\n    const dispatch = useDispatch();\n    const { address, rural } = useSelector((state) => state.registerForm);\n    const utilsData = useSelector((state) => state.utilsData);\n    address.steps = 1;\n    const formik = useFormik({\n        initialValues: address,\n        validationSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n\n            dispatch(\n                setPropertyRegistrationForm({\n                    address: {\n                        ...address,\n                        ...values,\n                    },\n                }),\n            );\n\n            wizardInstance.nextStep();\n        },\n    });\n\n    const {\n        handleChange,\n        handleBlur: handleBlurOrig,\n        handleSubmit,\n        errors,\n        touched,\n        values,\n        isValid,\n        isSubmitting,\n    } = formik;\n\n    const handleBlur = (...params) => {\n        dispatch(\n            setPropertyRegistrationForm({\n                address: {\n                    ...address,\n                    ...values,\n                },\n            }),\n        );\n        handleBlurOrig(...params);\n    };\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Col>\n                <Input type=\"hidden\" value={1} name=\"steps\" />\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"postalCode\">Postal Code</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"postalCode\"\n                        id=\"postalCode\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.postalCode}\n                        invalid={touched.postalCode && errors.postalCode}\n                        placeholder=\"\"\n                    />\n                    <FormFeedback>{errors.postalCode}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"postalCode\">Street Number</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"streetNumber\"\n                        id=\"streetNumber\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.streetNumber}\n                        invalid={touched.streetNumber && errors.streetNumber}\n                        placeholder=\"\"\n                    />\n                    <FormFeedback>{errors.streetNumber}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"route\">\n                        Street /Route / Lot No / Plot No / Local Identifier\n                    </Label>\n                    <Input\n                        type=\"text\"\n                        name=\"route\"\n                        id=\"route\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.route}\n                        invalid={touched.route && errors.route}\n                        placeholder=\"\"\n                    />\n                    <FormFeedback>{errors.route}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"route\"> City / Locality</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"locality\"\n                        id=\"locality\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.locality}\n                        invalid={touched.locality && errors.locality}\n                        placeholder=\"\"\n                    />\n                    <FormFeedback>{errors.locality}</FormFeedback>\n                </FormGroup>\n            </Col>\n            {rural && (\n                <>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"lotNo\">Lot No</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"lotNo\"\n                                id=\"lotNo\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.lotNo}\n                                invalid={touched.lotNo && errors.lotNo}\n                                placeholder=\"\"\n                            />\n                            <FormFeedback>{errors.lotNo}</FormFeedback>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"plotNo\">Plot No</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"plotNo\"\n                                id=\"plotNo\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.plotNo}\n                                invalid={touched.plotNo && errors.plotNo}\n                                placeholder=\"\"\n                            />\n                            <FormFeedback>{errors.plotNo}</FormFeedback>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"region\">Region</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"region\"\n                                id=\"region\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.region}\n                                invalid={touched.region && errors.region}\n                                placeholder=\"\"\n                            />\n                            <FormFeedback>{errors.region}</FormFeedback>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"province\">Province</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"province\"\n                                id=\"province\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.province}\n                                invalid={touched.province && errors.province}\n                                placeholder=\"\"\n                            />\n                            <FormFeedback>{errors.province}</FormFeedback>\n                        </FormGroup>\n                    </Col>\n                </>\n            )}\n            <Col>\n                <FormGroup>\n                    <Label for=\"route\">Province / State</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"city\"\n                        id=\"city\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.city}\n                        invalid={touched.city && errors.city}\n                        placeholder=\"\"\n                    />\n                    <FormFeedback>{errors.city}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"route\">Country</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"country\"\n                        id=\"country\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.country}\n                        invalid={touched.country && errors.country}\n                        placeholder=\"\"\n                    />\n                    <FormFeedback>{errors.country}</FormFeedback>\n                </FormGroup>\n            </Col>\n\n            <Col>\n                <Button block disabled={!isValid || isSubmitting}>\n                    {isSubmitting ? <Spinner size={'sm'} /> : 'Next'}\n                </Button>\n            </Col>\n            <Col>\n                <Button\n                    className=\"mt-1 mb-5\"\n                    color={'danger'}\n                    block\n                    onClick={() => {\n                        utilsData.connectToMerchantId = 0;\n                        dispatch(resetRegistrationForm())\n                    }}>\n                    Cancel\n                </Button>\n            </Col>\n            <Col>\n                <Label for=\"route\"> ---------------- OR ----------------- </Label>\n            </Col>\n            <Col>\n                <Button\n                    className=\"mt-1 mb-5\"\n\n                    block\n                    onClick={() => {\n                        address.noDelivery = 1;\n                        address.property = utilsData.selectedProperty;\n                        wizardInstance.goToStep(3);\n                        // utilsData.connectToMerchantId = 0;\n                        // dispatch(resetRegistrationForm())\n                    }}>\n                    No Delivery\n                </Button>\n            </Col>\n        </Form>\n    );\n};\n\nexport default AddressDetailsStep;\n","import { useFormik } from 'formik';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    Button,\n    Col,\n    Collapse,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Spinner,\n} from 'reactstrap';\nimport { propertySchema } from '../../../common/validation/propertySchema';\nimport {\n    resetRegistrationForm,\n    setPropertyRegistrationForm,\n    isPropertyRegistered\n} from '../../../redux/actionCreators/registrationActionCreators';\nimport {\n    generateEmail,\n} from '../../../utils/propertyUtils';\n// import { isAppEmbedWebview } from '../../../utils/utils';\n\nconst AddressInfoStep = ({ wizardInstance }) => {\n    const dispatch = useDispatch();\n    const { address } = useSelector((state) => state.registerForm);\n    const utilsData = useSelector((state) => state.utilsData);\n    address.steps = 2;\n    const emailDisplay = generateEmail(address);\n    const formik = useFormik({\n        initialValues: {\n            primaryAddress: true,\n            hightRiseOrCommercial: false,\n            propertyName: '',\n            totalFloors: '1',\n            totalUnitsEachFloor: '1',\n            addressType: '',\n            settlementType: '',\n            unitNo: '',\n        },\n        isInitialValid: false,\n        validationSchema: propertySchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n\n            let email = generateEmail(address);\n            console.log('email=' + email);\n            // if this is hightRiseOrCommercial, check property register\n            if (values.hightRiseOrCommercial) {\n                dispatch(isPropertyRegistered(email)).then(result => {\n                    // console.log('check property registration=' + JSON.stringify( result));\n                    if (result.value.registered) {\n                        //reject with error\n                        setErrorMessage('This address is already registered! Please contact property management');\n                        setSubmitting(false);\n                    } else {\n                        //continue register\n                        if (values.settlementType === 'lowRise') {\n                            values.unitNo = '';\n                        }\n\n                        const { unitNo, ...otherValues } = values;\n\n                        dispatch(\n                            setPropertyRegistrationForm({\n                                ...otherValues,\n                                address: {\n                                    ...address,\n                                    unitNo,\n                                },\n                            }),\n                        );\n\n                        wizardInstance.nextStep();\n                    }\n                }).catch(error => {\n                    console.log('check property error' + error);\n                    setErrorMessage(JSON.stringify(error));\n                    setSubmitting(false);\n                });\n            } else if (values.settlementType == 'highRise') {\n                //check unit number register ?\n                email = values.unitNo + '-' + email;\n                dispatch(isPropertyRegistered(email)).then(result => {\n                    // console.log('check property registration=' + JSON.stringify( result));\n                    if (result.value.registered) {\n                        //reject with error\n                        setErrorMessage('This address is already registered! Please contact anything@alphc.com');\n                        setSubmitting(false);\n                    } else {\n                        //continue register\n                        if (values.settlementType === 'lowRise') {\n                            values.unitNo = '';\n                        }\n                        const { unitNo, ...otherValues } = values;\n                        dispatch(\n                            setPropertyRegistrationForm({\n                                ...otherValues,\n                                address: {\n                                    ...address,\n                                    unitNo,\n                                },\n                            }),\n                        );\n\n                        wizardInstance.nextStep();\n                    }\n                }).catch(error => {\n                    console.log('check property error' + error);\n                    setErrorMessage(JSON.stringify(error));\n                    setSubmitting(false);\n                });\n\n            } else {\n                if (values.settlementType === 'lowRise') {\n                    values.unitNo = '';\n                }\n\n                const { unitNo, ...otherValues } = values;\n\n                dispatch(\n                    setPropertyRegistrationForm({\n                        ...otherValues,\n                        address: {\n                            ...address,\n                            unitNo,\n                        },\n                    }),\n                );\n\n                wizardInstance.nextStep();\n            }\n        },\n    });\n    // Modal open state\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        isValid,\n        isSubmitting,\n        setFieldValue,\n        values,\n    } = formik;\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Col>\n                <Input type=\"hidden\" value={2} name=\"steps\" />\n            </Col>\n            <Col>\n                <FormGroup tag=\"fieldset\">\n                    <FormGroup check>\n                        <Label check>\n                            <Input\n                                type=\"checkbox\"\n                                name=\"primaryAddress\"\n                                onChange={(e) => {\n                                    setFieldValue(\n                                        'primaryAddress',\n                                        e.currentTarget.checked,\n                                    );\n                                }}\n                                checked={values.primaryAddress}\n                                onBlur={handleBlur}\n                                invalid={\n                                    touched.primaryAddress &&\n                                    errors.primaryAddress\n                                }\n                            />\n                            This is my primary address\n                        </Label>\n\n                        {/* <Label check>\n                            <Input\n                                type=\"checkbox\"\n                                name=\"hightRiseOrCommercial\"\n                                onChange={(e) => {\n                                    setFieldValue(\n                                        'hightRiseOrCommercial',\n                                        e.currentTarget.checked,\n                                    );\n                                }}\n                                checked={values.hightRiseOrCommercial}\n                                onBlur={handleBlur}\n                                invalid={\n                                    touched.hightRiseOrCommercial &&\n                                    errors.hightRiseOrCommercial\n                                }\n                            />\n                            High Rise residential/Commercial use ONLY\n                        </Label> */}\n                    </FormGroup>\n                </FormGroup>\n            </Col>\n            <Col>\n                <Collapse isOpen={values.hightRiseOrCommercial === false}>\n\n                    <FormGroup tag=\"fieldset\">\n                        <Label for=\"postalCode\">Address Type</Label>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={'residential'}\n                                    invalid={\n                                        touched.addressType && errors.addressType\n                                    }\n                                />\n                                Residential\n                            </Label>\n                        </FormGroup>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={'commercial'}\n                                    invalid={\n                                        touched.addressType && errors.addressType\n                                    }\n                                />\n                                Commercial\n                            </Label>\n                        </FormGroup>\n                        {/* <FormGroup check>\n                        <Label check>\n                            <Input\n                                type=\"radio\"\n                                name=\"addressType\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={'Incorporate'}\n                                invalid={\n                                    touched.addressType && errors.addressType\n                                }\n                            />\n                            Incorporate\n                        </Label>\n                    </FormGroup> */}\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={'School'}\n                                    invalid={\n                                        touched.addressType && errors.addressType\n                                    }\n                                />\n                                School\n                            </Label>\n                        </FormGroup>\n                    </FormGroup>\n                </Collapse>\n            </Col>\n            <Col>\n                <Collapse isOpen={values.addressType === 'Incorporate' || values.addressType === 'School'}>\n                    <FormGroup>\n                        <Label for=\"lblPropertyName\">Name</Label>\n                        <Input\n                            type=\"text\"\n                            name=\"propertyName\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.propertyName}\n                            invalid={touched.propertyName && errors.propertyName}\n                        />\n                        <FormFeedback>{errors.propertyName}</FormFeedback>\n                    </FormGroup>\n                </Collapse>\n            </Col>\n            <Col>\n                <FormGroup tag=\"fieldset\">\n                    <Label for=\"postalCode\">Settlement Type</Label>\n                    <Collapse isOpen={values.hightRiseOrCommercial === false}>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"settlementType\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={'lowRise'}\n                                    invalid={\n                                        touched.settlementType &&\n                                        errors.settlementType\n                                    }\n                                />\n                                Single Dwelling\n                            </Label>\n                        </FormGroup>\n                    </Collapse>\n                    <FormGroup check>\n                        <Label check>\n                            <Input\n                                type=\"radio\"\n                                name=\"settlementType\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={'highRise'}\n                                invalid={\n                                    touched.settlementType &&\n                                    errors.settlementType\n                                }\n                            />\n                            High Rise / Multiple Units\n                        </Label>\n                    </FormGroup>\n                </FormGroup>\n            </Col>\n            <Col>\n                <Collapse isOpen={values.settlementType === 'highRise'}>\n                    {values.hightRiseOrCommercial ?\n                        <Col>\n                            <FormGroup>\n                                <FormGroup>\n                                    <Label for=\"totalFloors\">Total Floors</Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"totalFloors\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.totalFloors}\n                                        invalid={touched.totalFloors && errors.totalFloors}\n                                    />\n                                    <FormFeedback>{errors.totalFloors}</FormFeedback>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label for=\"totalUnitsEachFloor\">Total Units each floor</Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"totalUnitsEachFloor\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.totalUnitsEachFloor}\n                                        invalid={touched.totalUnitsEachFloor && errors.totalUnitsEachFloor}\n                                    />\n                                    <FormFeedback>{errors.totalUnitsEachFloor}</FormFeedback>\n                                </FormGroup>\n                            </FormGroup>\n                        </Col> :\n                        <Col>\n                            <FormGroup>\n                                <Label for=\"postalCode\">Unit No</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"unitNo\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.unitNo}\n                                    invalid={touched.unitNo && errors.unitNo}\n                                />\n                                <FormFeedback>{errors.unitNo}</FormFeedback>\n                            </FormGroup>\n                        </Col>\n                    }\n                </Collapse>\n            </Col>\n            <Col>\n                <Collapse isOpen={errorMessage.length > 0}>\n                    <Label color={'danger'} for=\"errorMessage\">{errorMessage}</Label>\n                </Collapse>\n            </Col>\n            <Col>\n                <Button block disabled={!isValid || isSubmitting}>\n                    {isSubmitting ? <Spinner size={'sm'} /> : 'Next'}\n                </Button>\n            </Col>\n\n            <Col>\n                <Button\n                    className=\"mt-1 mb-5\"\n                    color={'danger'}\n                    block\n                    onClick={() => {\n                        utilsData.connectToMerchantId = 0;\n                        dispatch(resetRegistrationForm());\n                    }}>\n                    Cancel\n                </Button>\n            </Col>\n            {/* {    isAppEmbedWebview() ?        \n           <Col>\n           <div className={'info-window'}>\n            <div>Your AlphC contact email:</div>\n                <h4 style={{color:'#cccccc'}}>{emailDisplay}@alphc.com</h4>\n                <div>Patented Technology</div>\n            </div>\n           </Col>:null\n} */}\n        </Form>\n    );\n};\n\nexport default AddressInfoStep;\n","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport {Button, Form} from 'reactstrap';\nimport {toggleVerificationModal} from '../../../redux/actionCreators/appActionCreators';\nimport {resetRegistrationForm} from '../../../redux/actionCreators/registrationActionCreators';\nimport {useHistory} from 'react-router';\nconst SuccessStep = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    return (\n        <>\n            <Form>\n                <div className={'success mt-5 mb-3'}>\n                    Registration Successful!\n                </div>\n                <Button\n                    block\n                    color={'success'}\n                    onClick={() => {\n                        \n                        if (window.ReactNativeWebView)\n                        //if(1===1)\n                        {\n                            //To Fix app no active window\n                            setTimeout(\n                            history.push(\n                                `/mobile-verify`,\n                            ),1000);\n                        }else{\n                            dispatch(resetRegistrationForm());\n                            dispatch(toggleVerificationModal());\n                        }\n                    }}>\n                    Verify your account\n                </Button>\n            </Form>\n        </>\n    );\n};\n\nexport default SuccessStep;\n","import { useFormik } from 'formik';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    Button,\n    Col,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Spinner,\n} from 'reactstrap';\nimport * as Yup from 'yup';\nimport MobileInput from '../../../common/components/MobileInput';\nimport {\n    registerUser,\n    resetRegistrationForm,\n    setPropertyRegistrationForm,\n} from '../../../redux/actionCreators/registrationActionCreators';\nimport { generateEmail } from '../../../utils/propertyUtils';\nimport { getMe } from '../../../redux/actionCreators/authActionCreators';\nimport { toastr } from 'react-redux-toastr';\n\nconst validationSchema = Yup.object().shape({\n    mobileNumber: Yup.string().required('Mobile number is required'),\n    email: Yup.string().required('Email is required')\n        .email('Invalid email'),\n    companyName: Yup.string(),\n    lastName: Yup.string(),\n    // email: Yup.string().email('Invalid email'),\n    password: Yup.string()\n        .min(6, 'Password is  too Short!')\n        .max(16, 'Password is too Long!')\n        .required('Password is required'),\n    passwordConfirmation: Yup.string()\n        .required('Password confirmation is required')\n        .oneOf([Yup.ref('password'), null], 'Passwords must match'),\n    consent: Yup.boolean()\n        .required('Confirm you have read Privacy Policy and Terms of Use')\n        .oneOf(\n            [true],\n            'Confirm you have read Privacy Policy and Terms of Use.',\n        ),\n    liability: Yup.boolean()\n        .required('Confirm you have read above instruction')\n        .oneOf(\n            [true],\n            'Confirm you have read above instruction.',\n        )\n\n});\n\nconst UserInfoStep = ({ wizardInstance }) => {\n    const dispatch = useDispatch();\n\n    const registerForm = useSelector((state) => state.registerForm);\n    const utilsData = useSelector((state) => state.utilsData);\n    const { address } = useSelector((state) => state.registerForm);\n    address.steps = 3;\n\n    const formik = useFormik({\n        initialValues: {\n            mobileNumber: '',\n            companyName: '',\n            lastName: '',\n            email: '',\n            password: '',\n            passwordConfirmation: '',\n            consent: false,\n            liability: false\n        },\n        isInitialValid: false,\n        validationSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n\n            const newUser = {\n                property: {\n                    email: generateEmail(registerForm.address),\n                    rural: registerForm.rural,\n                    primaryAddress: registerForm.primaryAddress,\n                    addressType: registerForm.addressType,\n                    hightRiseOrCommercial: registerForm.hightRiseOrCommercial,\n                    totalFloors: registerForm.totalFloors,\n                    propertyName: registerForm.propertyName,\n                    totalUnitsEachFloor: registerForm.totalUnitsEachFloor,\n                    settlementType: registerForm.settlementType,\n                    unitNo: registerForm.unitNo,\n                    location: {\n                        longitude: registerForm.longitude,\n                        latitude: registerForm.latitude,\n                    },\n                    ...registerForm.address,\n                },\n                mobileNumber: values.mobileNumber,\n                companyName: values.companyName,\n                lastName: values.lastName,\n                email: values.email,\n                username: values.email,\n                password: values.password,\n                provider: 'local',\n                connectToMerchantId: utilsData.connectToMerchantId\n            };\n\n            dispatch(registerUser(newUser))\n                .then(() => {\n                    dispatch(getMe()).then(resp => {\n                        console.log('.get me.resp..' + JSON.stringify(resp));\n                        dispatch(\n                            setPropertyRegistrationForm({\n                                user: newUser,\n                                me: resp.value,\n\n                            }),\n                        ).then(() => {\n                            wizardInstance.nextStep();\n                        });\n                    }).catch(error => {\n                        toastr.error('Error', \"Mobile Or Password doesn't match, Please verify!\");\n                    });\n\n                })\n                .catch((response) => {\n                    if (response.message && response.message[0].messages) {\n                        switch (response.message[0].messages[0].id) {\n                            case 'Auth.form.error.mobileNumber.taken':\n                                setFieldError(\n                                    'mobileNumber',\n                                    'Mobile No. already registered',\n                                );\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                })\n                .finally(() => {\n                    setSubmitting(false);\n                });\n        },\n    });\n\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        values,\n        setFieldError,\n        isValid,\n        isSubmitting,\n        setFieldValue,\n        setFieldTouched,\n    } = formik;\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Col>\n                <FormGroup>\n                    <Label for=\"mobileNumber\">Mobile Number</Label>\n                    <MobileInput\n                        setFieldValue={setFieldValue}\n                        setFieldTouched={setFieldTouched}\n                        placeholder=\"Mobile Number\"\n                        name={'mobileNumber'}\n                        value={values.mobileNumber}\n                        invalid={touched.mobileNumber && errors.mobileNumber}\n                    />\n                    <FormFeedback>{errors.mobileNumber}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"companyName\">Company Name</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"companyName\"\n                        id=\"companyName\"\n                        value={values.companyName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        invalid={touched.companyName && errors.companyName}\n                    />\n                    <FormFeedback>{errors.companyName}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"lastName\">Name</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"lastName\"\n                        id=\"lastName\"\n                        value={values.lastName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        invalid={touched.lastName && errors.lastName}\n                    />\n                    <FormFeedback>{errors.lastName}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"email\">Email</Label>\n                    <Input\n                        type=\"email\"\n                        name=\"email\"\n                        id=\"email\"\n                        value={values.email}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        invalid={touched.email && errors.email}\n                        placeholder=\"myemail@email.com\"\n                    />\n                    <FormFeedback>{errors.email}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"password\">Password</Label>\n                    <Input\n                        type=\"password\"\n                        name=\"password\"\n                        id=\"password\"\n                        value={values.password}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        invalid={touched.password && errors.password}\n                        placeholder=\"********\"\n                    />\n                    <FormFeedback>{errors.password}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"passwordConfirmation\">\n                        Password Confirmation\n                    </Label>\n                    <Input\n                        type=\"password\"\n                        name=\"passwordConfirmation\"\n                        id=\"passwordConfirmation\"\n                        value={values.passwordConfirmation}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        invalid={\n                            touched.passwordConfirmation &&\n                            errors.passwordConfirmation\n                        }\n                        placeholder=\"********\"\n                    />\n                    <FormFeedback>{errors.passwordConfirmation}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Input type=\"hidden\" invalid={errors.invalidProperty} />\n                    <FormFeedback>{errors.invalidProperty}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup tag=\"fieldset\">\n                    <FormGroup check>\n                        <Label check>\n                            <Input\n                                type=\"checkbox\"\n                                name=\"consent\"\n                                onChange={(e) => {\n                                    setFieldTouched('consent');\n                                    setFieldValue(\n                                        'consent',\n                                        e.currentTarget.checked,\n                                    );\n                                }}\n                                checked={values.consent}\n                                onBlur={handleBlur}\n                                invalid={touched.consent && errors.consent}\n                            />\n                            I've read{' '}\n                            <a target={'_blank'} href=\"/privacy-policy\">Privacy Policy</a> and{' '}\n                            <a target={'_blank'} href=\"/terms-of-use\">Terms of Use</a>.\n                        </Label>\n                        <Label check>\n                            <Input\n                                type=\"checkbox\"\n                                name=\"liability\"\n                                onChange={(e) => {\n                                    setFieldTouched('liability');\n                                    setFieldValue(\n                                        'liability',\n                                        e.currentTarget.checked,\n                                    );\n                                }}\n                                checked={values.liability}\n                                onBlur={handleBlur}\n                                invalid={touched.liability && errors.liability}\n                            />\n                            Disclaimer: In an emergency contact your local first responder directly. AlphC E-Alert App is only an aid and is not intended to replace first responders. First responders can license this technology to increase the safety of your community.\n                        </Label>\n\n                    </FormGroup>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Input type=\"hidden\" invalid={errors.consent} />\n                    <FormFeedback>{errors.consent}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Input type=\"hidden\" invalid={errors.liability} />\n                    <FormFeedback>{errors.liability}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <Button\n                    block\n                    color={'success'}\n                    disabled={!isValid || isSubmitting}>\n                    {isSubmitting ? <Spinner size={'sm'} /> : 'Create Account'}\n                </Button>\n            </Col>\n            <Col>\n                <Button\n                    className=\"mt-1 mb-5\"\n                    color={'danger'}\n                    block\n                    onClick={() => {\n                        utilsData.connectToMerchantId = 0;\n                        dispatch(resetRegistrationForm());\n                    }}>\n                    Cancel\n                </Button>\n            </Col>\n        </Form>\n    );\n};\n\nexport default UserInfoStep;\n","import React, {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport StepWizard from 'react-step-wizard';\nimport {Col} from 'reactstrap';\nimport AddressDetailsStep from './AddressDetailsStep';\nimport AddressInfoStep from './AddressInfoStep';\nimport SuccessStep from './SuccessStep';\nimport UserInfoStep from './UserInfoStep';\n\nconst PropertyForm = () => {\n    const [transitions] = useState({\n        enterRight: 'animated enterRight',\n        enterLeft: 'animated enterLeft',\n        exitRight: 'animated exitRight',\n        exitLeft: 'animated exitLeft',\n        intro: 'animated intro',\n    });\n    const [wizardInstance, setWizardInstance] = useState();\n\n    return (\n        <Col md={3} sm={12} xs={12} className=\"overlay-form-container\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n\n            <StepWizard\n                className={'step-wizard'}\n                transitions={transitions}\n                isLazyMount={true}\n                instance={(instance) => setWizardInstance(instance)}>\n                <AddressDetailsStep wizardInstance={wizardInstance} />\n                <AddressInfoStep wizardInstance={wizardInstance} />\n                <UserInfoStep wizardInstance={wizardInstance} />\n                <SuccessStep wizardInstance={wizardInstance} />\n            </StepWizard>\n        </Col>\n    );\n};\n\nexport default PropertyForm;\n","import { MapMarkerUrls } from '../../../constants';\nimport React, { useState, useCallback } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Row,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { changePropertyColor, cancelChangePropertyColor } from '../../../redux/actionCreators/appActionCreators';\nimport { useHistory } from 'react-router';\nconst ChangeColorForm = ({ callback }) => {\n\n    const utilsData = useSelector((state) => state.utilsData);\n    console.log('...utilsData..' + JSON.stringify(utilsData));\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [color, setColor] = useState('default');\n    const user = useSelector((state) => state.auth.me);\n\n    const handleChange = useCallback((event) => {\n\n        console.log('..handle change ...' + event.target.value);\n        setColor(event.target.value);\n\n    });\n    return (\n        <Col md={3} sm={12} xs={12} className=\"overlay-form-container\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n\n            <Row style={{ width: \"80%\", paddingLeft: \"70px\" }}>\n\n                <Col style={{ textAlign: \"left\" }}>\n                    <FormGroup tag=\"fieldset\">\n\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    checked={\"checked\"}\n                                    value={\"default\"}\n                                />\n                                <img src={MapMarkerUrls.property.default} style={{ height: \"30px\" }} />\n                            </Label>\n                        </FormGroup>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    value={\"hasInjured\"}\n                                />\n                                <img src={MapMarkerUrls.property.hasInjured} style={{ height: \"30px\" }} />\n                            </Label>\n                        </FormGroup>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    value={\"pending\"}\n                                />\n                                <img src={MapMarkerUrls.property.pending} style={{ height: \"30px\" }} />\n                            </Label>\n                        </FormGroup>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    value={\"safe\"}\n                                />\n                                <img src={MapMarkerUrls.property.safe} style={{ height: \"30px\" }} />\n                            </Label>\n                        </FormGroup>\n                        {/* <FormGroup check>\n                        <Label check>\n                            <Input\n                                type=\"radio\"\n                                name=\"addressType\"\n                                onChange={handleChange}\n                                value={\"secondary\"}\n                            />\n                            <img src={MapMarkerUrls.property.secondary} style={{height:\"30px\"}} />\n                        </Label>\n                    </FormGroup>    */}\n                    </FormGroup>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n\n\n                    <Button\n                        className=\"mt-1 mb-5\"\n                        color={'success'}\n                        block\n                        onClick={() => {\n                            const email = utilsData.emailForChangeColor\n                            const data = {\n                                email: email,\n                                color: color,\n                                ownerMobileNumber: user.mobileNumber,\n                            };\n                            utilsData.changeColor = false;\n                            dispatch(changePropertyColor(data)).then(resp => {\n                                console.log('...change color..' + JSON.stringify(resp));\n                                setTimeout(function () {\n                                    callback(true, color, email);\n                                }, 500)\n\n                                // history.push(\"/\");\n                            })\n                                .catch(error => {\n                                    callback(false, color, email);\n                                    console.log('...change color error..' + JSON.stringify(error));\n                                })\n                        }}>\n                        Confirm\n                    </Button>\n                </Col>\n                <Col>\n                    <Button\n                        className=\"mt-1 mb-5\"\n                        color={'danger'}\n                        block\n                        onClick={() => {\n                            // const data = {\n                            //     email: utilsData.emailForChangeColor,\n                            //     color: color\n                            // };\n                            utilsData.changeColor = false;\n                            dispatch(cancelChangePropertyColor());\n                        }}>\n                        Cancel\n                    </Button>\n                </Col>\n\n\n            </Row>\n        </Col>\n    );\n};\nexport default ChangeColorForm;","import { MapMarkerUrls } from '../../../constants';\nimport React, { useState, useCallback } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Col,\n    Row,\n    Collapse,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Spinner,\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { cancelChangePropertyColor } from '../../../redux/actionCreators/appActionCreators';\nimport { propertyBinding } from '../../../redux/actionCreators/adminActionCreators';\nimport { useHistory } from 'react-router';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nconst bindingSchema = Yup.object().shape({\n\n    bindingName: Yup.string().required('This field is required'),\n    bindingEmail: Yup.string().required('This field is required'),\n    //  bindingPhone: Yup.string().required('This field is required'),\n});\nconst BindingForm = ({ callback }) => {\n\n    const utilsData = useSelector((state) => state.utilsData);\n    console.log('...utilsData..' + JSON.stringify(utilsData));\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [color, setColor] = useState('default');\n    const property = utilsData.selectedProperty;\n    const user = useSelector((state) => state.auth.me);\n\n    const formik = useFormik({\n        initialValues: {\n            bindingName: property !== null && property !== undefined && property.bindingName !== 'null' ? property.bindingName : '',\n            bindingEmail: property !== null && property !== undefined && property.bindingEmail !== 'null' ? property.bindingEmail : '',\n            bindingPhone: property !== null && property !== undefined && property.bindingPhone !== 'null' ? property.bindingPhone : '',\n            bindingOthers: property !== null && property !== undefined && property.bindingOthers !== 'null' ? property.bindingOthers : '',\n        },\n        isInitialValid: false,\n        validationSchema: bindingSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n            utilsData.bindingProperty = false;\n            const email = utilsData.emailForChangeColor\n            const fncCallback = utilsData.fncCallback;\n            const data = {\n                email: email,\n                ownerMobileNumber: user.mobileNumber,\n                ...values\n            }\n            dispatch(propertyBinding(data)).then(resp => {\n                if (fncCallback) {\n                    fncCallback();\n                }\n            })\n        }\n    });\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        isValid,\n        isSubmitting,\n        setFieldValue,\n        values,\n    } = formik;\n\n    return (\n        <Col md={3} sm={12} xs={12} className=\"overlay-form-container\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n            <Form onSubmit={handleSubmit}>\n                <Row >\n\n                    <Col style={{ textAlign: \"left\" }}>\n                        <FormGroup tag=\"fieldset\">\n\n                            <FormGroup>\n                                <Label for=\"lblPropertyName\">Name &nbsp;&nbsp;<span className=\"item_required\">*</span></Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"bindingName\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.bindingName}\n                                    invalid={touched.bindingName && errors.bindingName}\n                                />\n                                <FormFeedback>{errors.bindingName}</FormFeedback>\n                            </FormGroup>\n\n                            <FormGroup>\n                                <Label for=\"lblPropertyName\">Email &nbsp;&nbsp;<span className=\"item_required\">*</span></Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"bindingEmail\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.bindingEmail}\n                                    invalid={touched.bindingEmail && errors.bindingEmail}\n                                />\n                                <FormFeedback>{errors.bindingEmail}</FormFeedback>\n                            </FormGroup>\n\n                            <FormGroup>\n                                <Label for=\"lblPropertyName\">Phone</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"bindingPhone\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.bindingPhone}\n                                    invalid={touched.bindingPhone && errors.bindingPhone}\n                                />\n                                <FormFeedback>{errors.bindingPhone}</FormFeedback>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"lblPropertyName\">Others</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"bindingOthers\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.bindingOthers}\n                                    invalid={touched.bindingOthers && errors.bindingOthers}\n                                />\n                                <FormFeedback>{errors.bindingOthers}</FormFeedback>\n                            </FormGroup>\n                        </FormGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Button block disabled={!isValid || isSubmitting}>\n                            {isSubmitting ? <Spinner size={'sm'} /> : 'Confirm'}\n                        </Button>\n\n                        {/* <Button\n                    className=\"mt-1 mb-5\"\n                    color={'success'}\n                    block\n                    onClick={() => {\n                        const email = utilsData.emailForChangeColor\n                        const data = {\n                            email: email,\n                            color: color\n                        };\n                        utilsData.changeColor = false;\n                        dispatch(changePropertyColor(data)).then(resp=>{\n                            console.log('...change color..' + JSON.stringify(resp));\n                            callback(true, color, email);\n                            // history.push(\"/\");\n                        })\n                        .catch(error=>{\n                            callback(false, color, email);\n                            console.log('...change color error..' + JSON.stringify(error));\n                        })\n                    }}>\n                    Confirm\n                </Button> */}\n                    </Col>\n                    <Col>\n                        <Button\n                            className=\"mt-1 mb-5\"\n                            color={'danger'}\n                            block\n                            onClick={() => {\n                                // const data = {\n                                //     email: utilsData.emailForChangeColor,\n                                //     color: color\n                                // };\n                                utilsData.bindingProperty = false;\n                                dispatch(cancelChangePropertyColor());\n                            }}>\n                            Cancel\n                        </Button>\n                    </Col>\n\n\n                </Row>\n            </Form>\n        </Col>\n    );\n};\nexport default BindingForm;","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Col,\n    Row,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Spinner,\n} from 'reactstrap';\nimport {\n    CLabel,\n    CListGroup,\n    CListGroupItem,\n} from '@coreui/react';\nimport { Link } from 'react-router-dom';\nimport { cancelChangePropertyColor } from '../../../redux/actionCreators/appActionCreators';\nimport { sendPromotionContents } from '../../../redux/actionCreators/adminActionCreators';\nimport { useHistory } from 'react-router';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport TextArea from \"antd/lib/input/TextArea\";\nconst bindingSchema = Yup.object().shape({\n    promotionTitle: Yup.string().required('This field is required'),\n    promotionContent: Yup.string().required('This field is required'),\n\n});\nconst FlyerForm = ({ callback }) => {\n\n    const utilsData = useSelector((state) => state.utilsData);\n    // console.log('...utilsData..' + JSON.stringify(utilsData));\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [color, setColor] = useState('default');\n    const properties = utilsData.selectedProperty;\n\n    let domain = localStorage.getItem('current_domain');\n    if (domain === undefined || domain === null) {\n        domain = 'alphc.com'\n    }\n    const formik = useFormik({\n        initialValues: {\n            promotionTitle: '',\n            promotionContent: ''\n        },\n        isInitialValid: false,\n        validationSchema: bindingSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n            utilsData.drawFinished = false;\n            let bindingEmails = [];\n            properties.map((p) => {\n                console.log('....flyer form, property..' + JSON.stringify(p));\n                if (p.properties.bindingEmail) {\n                    bindingEmails.push(p.properties.bindingEmail);\n                }\n            });\n            const postData = {\n                emails: bindingEmails.join(','),\n                promotionTitle: values.promotionTitle,\n                promotionContent: values.promotionContent\n            }\n            dispatch(sendPromotionContents(postData));\n        }\n    });\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        isValid,\n        isSubmitting,\n        setFieldValue,\n        values,\n    } = formik;\n\n    const [current, setCurrent] = useState(0);\n    const limitWords = (e) => {\n        const currentLength = e.target.value.length;\n        setCurrent(currentLength)\n    }\n    return (\n        <Col md={3} sm={12} xs={12} className=\"overlay-form-container\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n            <Form onSubmit={handleSubmit}>\n                <Row >\n\n                    <Col style={{ textAlign: \"left\" }}>\n                        <FormGroup tag=\"fieldset\">\n                            <CLabel>Send Communication:</CLabel>\n                            <CListGroup accent className=\"mb-3\">\n                                {properties.map((p) => (\n                                    <CListGroupItem key={p.properties.id}>\n                                        {p.properties.email + '@' + domain}\n                                    </CListGroupItem>\n                                ))}\n                            </CListGroup>\n                        </FormGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"lblPropertyName\">Title:</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"promotionTitle\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.promotionTitle}\n                                invalid={touched.promotionTitle && errors.promotionTitle}\n                            />\n                            <FormFeedback>{errors.promotionTitle}</FormFeedback>\n                        </FormGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <FormGroup class=\"wrapper\">\n                            <Label for=\"lblPropertyName\">Content:</Label>\n                            <TextArea\n                                maxLength={1000}\n                                rows={5}\n                                type=\"text\"\n                                name=\"promotionContent\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                onKeyUp={(e) => limitWords(e)}\n                                value={values.promotionContent}\n                                invalid={touched.promotionContent && errors.promotionContent}\n                            />\n                            <div id=\"the-count\">\n                                <span id=\"current\">{current}</span>\n                                <span id=\"maximum\">/ 1000</span>\n                            </div>\n                            <FormFeedback>{errors.promotionContent}</FormFeedback>\n                        </FormGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Button block disabled={!isValid || isSubmitting}>\n                            {isSubmitting ? <Spinner size={'sm'} /> : 'Confirm'}\n                        </Button>\n\n\n                    </Col>\n                    <Col>\n                        <Button\n                            className=\"mt-1 mb-5\"\n                            color={'danger'}\n                            block\n                            onClick={() => {\n                                // const data = {\n                                //     email: utilsData.emailForChangeColor,\n                                //     color: color\n                                // };\n                                utilsData.drawFinished = false;\n                                dispatch(cancelChangePropertyColor());\n                            }}>\n                            Cancel\n                        </Button>\n                    </Col>\n\n\n                </Row>\n            </Form>\n        </Col>\n    );\n};\nexport default FlyerForm;","import { MapMarkerUrls } from '../../../constants';\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Row,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { getBusinessProfile, saveMerchantConnection, disConnectionMerchant, loadConnectedTotal } from '../../../redux/actionCreators/adminActionCreators';\nimport { changePropertyColor, cancelShowBusinessInfo } from '../../../redux/actionCreators/appActionCreators';\nimport { useHistory } from 'react-router';\nimport { setPropertyRegistrationForm } from '../../../redux/actionCreators/registrationActionCreators';\nimport {\n    EmailShareButton,\n    FacebookShareButton,\n    HatenaShareButton,\n    InstapaperShareButton,\n    LineShareButton,\n    LinkedinShareButton,\n    LivejournalShareButton,\n    MailruShareButton,\n    OKShareButton,\n    PinterestShareButton,\n    PocketShareButton,\n    RedditShareButton,\n    TelegramShareButton,\n    TumblrShareButton,\n    TwitterShareButton,\n    ViberShareButton,\n    VKShareButton,\n    WhatsappShareButton,\n    WorkplaceShareButton,\n    WeiboShareButton\n} from \"react-share\";\nimport {\n    EmailIcon,\n    FacebookIcon,\n    FacebookMessengerIcon,\n    HatenaIcon,\n    InstapaperIcon,\n    LineIcon,\n    LinkedinIcon,\n    LivejournalIcon,\n    MailruIcon,\n    OKIcon,\n    PinterestIcon,\n    PocketIcon,\n    RedditIcon,\n    TelegramIcon,\n    TumblrIcon,\n    TwitterIcon,\n    ViberIcon,\n    VKIcon,\n    WeiboIcon,\n    WhatsappIcon,\n    WorkplaceIcon\n} from \"react-share\";\nconst BusinessInfo = ({ }) => {\n\n    const utilsData = useSelector((state) => state.utilsData);\n\n    const dispatch = useDispatch();\n    const property = utilsData.selectedProperty;\n    // console.log('. show business info.property.. ' + JSON.stringify(property));\n    const user = useSelector((state) => state.auth.me);\n    const [companyProfile, setCompanyProfile] = useState(null);\n    const [totalConnected, setTotalConnected] = useState(null);\n    // console.log('. show business info.user.. ' + JSON.stringify(user));\n    const getWorkingHourValue = (hours, dayOfWeek, index) => {\n        const item = hours.filter((hour) => {\n            return parseInt(hour.dayOfWeek) === dayOfWeek;\n\n        });\n        // console.log('..item..' + JSON.stringify(item));\n        if (item && item.length > 0) {\n            if (index === 1) return item[0].openHour;\n            if (index === 2) return item[0].closeHour;\n            if (index === 3) {\n                // console.log('..item[0].closed..' + item[0].closed);\n                return item[0].closed;\n            }\n        }\n        return '';\n    };\n    const [workingHour, setWorkingHour] = useState([]);\n    useEffect(() => {\n        // setLoading(true);\n        dispatch(getBusinessProfile({ id: property.id })).then((resp) => {\n            console.log('..property ..info..' + JSON.stringify(resp.value));\n            setCompanyProfile(resp.value.companyProfile);\n            setWorkingHour(resp.value.workingHour);\n\n        }\n\n        );\n        const jsonData = {\n            id_type: 1,\n            id: property.id\n        }\n        dispatch(loadConnectedTotal(jsonData)).then(resp => {\n            console.log('..get total ..' + JSON.stringify(resp));\n            setTotalConnected(resp.value.value[0].iCount);\n        }).catch(error => {\n\n        });\n        return () => { };\n    }, [dispatch, property]);\n\n    const disConnectToMerchant = () => {\n        const jsonData = {\n            merchant_property_id: property.id\n        }\n        dispatch(disConnectionMerchant(jsonData)).then(resp => {\n            console.log('disconnect ..' + JSON.stringify(resp));\n            utilsData.showBusinessInfo = false;\n            const fncCallback = utilsData.fncCallback;\n            dispatch(cancelShowBusinessInfo());\n            if (fncCallback !== null) {\n                console.log('..should trigger call back');\n                fncCallback();\n            }\n        }).catch(error => {\n\n        })\n\n    }\n    const connectToMerchant = () => {\n\n        //check user whether login\n        if (user !== null && user !== undefined) {\n            //user already login, just connect them together\n            const jsonData = {\n                merchant_property_id: property.id\n            }\n            dispatch(saveMerchantConnection(jsonData)).then(resp => {\n                //need redraw the map\n                //how to pass redraw map ??\n                utilsData.showBusinessInfo = false;\n                dispatch(cancelShowBusinessInfo());\n\n                const fncCallback = utilsData.fncCallback;\n                if (fncCallback !== null) {\n                    console.log('..should trigger call back');\n                    fncCallback();\n                }\n            }).catch(error => {\n                console.log('...save connection error');\n            })\n        } else {\n            utilsData.connectToMerchantId = property.id;\n            console.log('..start to connect to merchant..' + property.id);\n            const blankAddress = {\n                \"postalCode\": \"\",\n                \"streetNumber\": \"\",\n                \"route\": \"\",\n                \"locality\": \"\",\n                \"city\": \"\",\n                \"country\": \"\",\n            };\n            dispatch(setPropertyRegistrationForm({\n                address: blankAddress,\n                active: true,\n            }));\n        }\n    }\n\n    const shareUrl = \"https://alphcmap.com/business-portal/\" + property.id;\n    const title = \"\";\n    return (\n        <Col md={3} sm={12} xs={12} className=\"overlay-form-container\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n\n            <Row style={{ width: \"100%\" }}>\n\n                <Col style={{ textAlign: \"left\" }}>\n                    {\n                        companyProfile && (\n                            <>\n\n                                <Row>\n                                    <Col><h1>{companyProfile.companyName}</h1></Col> </Row>\n                                <Row>   <Col><i className=\"fa-solid fa-address\"></i> {property.street_number + ' ' + property.route + ' ' + property.locality + ',' + property.city + ',' + property.postal_code} </Col> </Row>\n                                <Row>   <Col><i className=\"fa-solid fa-phone\"></i> {companyProfile.phone} </Col> </Row>\n                                <Row>   <Col><i className=\"fa-solid fa-globe\"></i> {companyProfile.website} </Col> </Row>\n                                {totalConnected ? <Row>   <Col>Connected: {totalConnected} </Col> </Row> : null}\n                                {property.binding_email && property.binding_email !== null && property.binding_email !== 'null' ? <Row>   <Col><i className=\"fa-solid fa-envelope\"></i> {property.binding_email} </Col> </Row> : null}\n                                <Row>\n                                    <Col>Working Hours <hr /></Col>\n\n                                </Row>\n                                <Row>\n                                    <Col md={3}>\n                                        <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Monday:</Label>\n                                    </Col>\n                                    {getWorkingHourValue(workingHour, 0, 3) === true ?\n                                        <>       <Col md={9}>\n                                            <Label for=\"lblPropertyName\">We're Closed </Label>\n                                        </Col>\n                                        </> :\n                                        <>\n                                            <Col md={9}>\n                                                <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 0, 1)} - {getWorkingHourValue(workingHour, 0, 2)} </Label>\n                                            </Col>\n                                        </>\n                                    }\n\n                                </Row>\n                                <Row>\n                                    <Col md={3}>\n                                        <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Tuesday:</Label>\n                                    </Col>\n                                    {getWorkingHourValue(workingHour, 1, 3) === true ?\n                                        <>       <Col md={9}>\n                                            <Label for=\"lblPropertyName\">We're Closed </Label>\n                                        </Col>\n                                        </> :\n                                        <>\n                                            <Col md={9}>\n                                                <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 1, 1)} - {getWorkingHourValue(workingHour, 1, 2)} </Label>\n                                            </Col>\n                                        </>\n                                    }\n\n                                </Row>\n                                <Row>\n                                    <Col md={3}>\n                                        <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Wednesday:</Label>\n                                    </Col>\n                                    {getWorkingHourValue(workingHour, 2, 3) === true ?\n                                        <>       <Col md={9}>\n                                            <Label for=\"lblPropertyName\">We're Closed </Label>\n                                        </Col>\n                                        </> :\n                                        <>\n                                            <Col md={9}>\n                                                <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 2, 1)} - {getWorkingHourValue(workingHour, 2, 2)} </Label>\n                                            </Col>\n                                        </>\n                                    }\n\n                                </Row>\n                                <Row>\n                                    <Col md={3}>\n                                        <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Thursday:</Label>\n                                    </Col>\n                                    {getWorkingHourValue(workingHour, 3, 3) === true ?\n                                        <>       <Col md={9}>\n                                            <Label for=\"lblPropertyName\">We're Closed </Label>\n                                        </Col>\n                                        </> :\n                                        <>\n                                            <Col md={9}>\n                                                <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 3, 1)} - {getWorkingHourValue(workingHour, 3, 2)} </Label>\n                                            </Col>\n                                        </>\n                                    }\n\n                                </Row>\n                                <Row>\n                                    <Col md={3}>\n                                        <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Friday:</Label>\n                                    </Col>\n                                    {getWorkingHourValue(workingHour, 4, 3) === true ?\n                                        <>       <Col md={9}>\n                                            <Label for=\"lblPropertyName\">We're Closed </Label>\n                                        </Col>\n                                        </> :\n                                        <>\n                                            <Col md={9}>\n                                                <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 4, 1)} - {getWorkingHourValue(workingHour, 4, 2)} </Label>\n                                            </Col>\n                                        </>\n                                    }\n\n                                </Row>\n                                <Row>\n                                    <Col md={3}>\n                                        <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Saturday:</Label>\n                                    </Col>\n                                    {getWorkingHourValue(workingHour, 5, 3) === true ?\n                                        <>       <Col md={9}>\n                                            <Label for=\"lblPropertyName\">We're Closed </Label>\n                                        </Col>\n                                        </> :\n                                        <>\n                                            <Col md={9}>\n                                                <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 5, 1)} - {getWorkingHourValue(workingHour, 5, 2)} </Label>\n                                            </Col>\n                                        </>\n                                    }\n\n                                </Row>\n                                <Row>\n                                    <Col md={3}>\n                                        <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Sunday:</Label>\n                                    </Col>\n                                    {getWorkingHourValue(workingHour, 6, 3) == true ?\n                                        <>       <Col md={9}>\n                                            <Label for=\"lblPropertyName\">We're Closed </Label>\n                                        </Col>\n                                        </> :\n                                        <>\n                                            <Col md={9}>\n                                                <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 6, 1)} - {getWorkingHourValue(workingHour, 6, 2)} </Label>\n                                            </Col>\n                                        </>\n                                    }\n\n                                </Row>\n                            </>\n                        )\n                    }\n\n                </Col>\n            </Row>\n\n\n            <Row>\n                {\n                    user !== null && user !== undefined && (property.ownerMobileNumber === user.mobileNumber || property.owner_mobile_number === user.mobileNumber) ? null :\n                        <Col>\n\n                            {property.connected === \"1\" ?\n                                <Button\n\n                                    color={'success'}\n                                    block\n                                    onClick={() => disConnectToMerchant()}>\n                                    DisConnect\n                                </Button> :\n                                <Button\n\n                                    color={'success'}\n                                    block\n                                    onClick={() => connectToMerchant()}>\n                                    Connect\n                                </Button>\n                            }\n                        </Col>\n                }\n                <Col>\n                    <Button\n                        className=\"mt-1 mb-5\"\n                        color={'danger'}\n                        block\n                        onClick={() => {\n                            // const data = {\n                            //     email: utilsData.emailForChangeColor,\n                            //     color: color\n                            // };\n                            utilsData.showBusinessInfo = false;\n                            dispatch(cancelShowBusinessInfo());\n                        }}>\n                        Cancel\n                    </Button>\n                </Col>\n\n\n            </Row>\n\n\n            {\n                user !== null && user !== undefined && (property.ownerMobileNumber === user.mobileNumber || property.owner_mobile_number === user.mobileNumber) ?\n                    <>\n                        <Col  >\n                            Share your business <br />\n                            <FacebookShareButton url={shareUrl}\n                                quote={title}> <FacebookIcon size={32} round /></FacebookShareButton>     <TwitterShareButton\n                                    url={shareUrl}\n                                    title={title}\n                                >\n                                <TwitterIcon size={32} round />\n                            </TwitterShareButton>\n                            <WhatsappShareButton\n                                url={shareUrl}\n                                title={title}\n                                separator=\":: \"\n                            >\n                                <WhatsappIcon size={32} round />\n                            </WhatsappShareButton>\n                            <LinkedinShareButton url={shareUrl} >\n                                <LinkedinIcon size={32} round />\n                            </LinkedinShareButton>\n                            <PinterestShareButton\n                                url={String(window.location)}\n\n\n                            >\n                                <PinterestIcon size={32} round />\n                            </PinterestShareButton>\n                            <RedditShareButton\n                                url={shareUrl}\n                                title={title}\n                                windowWidth={660}\n                                windowHeight={460}\n\n                            >\n                                <RedditIcon size={32} round />\n                            </RedditShareButton>\n                            <EmailShareButton\n                                url={shareUrl}\n                                subject={title}\n                                body=\"body\"\n\n                            >\n                                <EmailIcon size={32} round />\n                            </EmailShareButton>\n                            <LineShareButton\n                                url={shareUrl}\n                                title={title}\n\n                            >\n                                <LineIcon size={32} round />\n                            </LineShareButton>\n                            <WeiboShareButton\n                                url={shareUrl}\n                                title={title}\n\n\n                            >\n                                <WeiboIcon size={32} round />\n                            </WeiboShareButton>\n                        </Col>\n                    </> : null\n            }\n        </Col>\n    );\n};\nexport default BusinessInfo;","import mapboxgl from 'mapbox-gl';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Map from '../../../common/components/Map';\nimport MapContext from '../../../common/contexts/MapContext/MapContext';\nimport {\n    fetchUsers,\n    loadBusinessAddress,\n    loadConnected,\n} from '../../../redux/actionCreators/adminActionCreators';\nimport {\n    clearDistancesFromMap,\n    clearPropertiesFromMap,\n    clearResidentsFromMap,\n    showPrimaryDistancesOnMap,\n    showPropertiesOnMap,\n    showLineLayer,\n    clearLayer,\n    removeAllImages\n} from '../../../utils/mapUtils';\nimport { generateString } from '../../../utils/utils';\nimport {\n    generateEmail,\n    geocodeAddress,\n    reverseGeocodePoint,\n} from '../../../utils/propertyUtils';\nimport PropertiesTooltip from '../../../admin/components/PropertiesTooltip';\nimport PropertyForm from '../property/PropertyForm';\nimport { Button, Col, Form, Input, Row } from 'reactstrap';\nimport ReactDOM from 'react-dom';\nimport { setPropertyRegistrationForm } from '../../../redux/actionCreators/registrationActionCreators';\n\nimport { saveBatchProperties, deleteUserAdditionalAddressById } from '../../../redux/actionCreators/appActionCreators';\n\nimport {\n    MapMarkerUrls,\n} from '../../../constants';\nimport ChangeColorForm from './ChangeColorForm';\nimport BindingForm from './BindingForm';\n\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport booleanPointInPolygon from '@turf/boolean-point-in-polygon';\nimport FlyerForm from './FlyerForm';\nimport { convertAttributes, convertLocation, convertGeoProperty } from '../../../utils/utils';\nimport BusinessInfo from './BusinessInfo';\nimport { getLoginType } from '../../../utils/utils';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_GL_ACCESS_TOKEN;\n\nclass Showcase extends Component {\n    static contextType = MapContext;\n\n    state = {\n        pins: [],\n        mapInitialized: false,\n        searchText: '',\n        // active: false,\n        selectedAddress: null,\n        email: '',\n        properties: [],\n        changeColor: false,\n        layerAdded: [],\n        draw: null,\n        drawedBefore: false,\n        drawing: false,\n        selectedProperties: [],\n        feature: null,\n        selectedPropertyEmail: [],\n        satelliteMode: false,\n        showMapLegend: false,\n        showBusinessInfo: false\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { map } = this.context;\n        const { mapInitialized } = this.state;\n        if (!mapInitialized && map) {\n            this.initializeLayers();\n\n            this.setState({\n                mapInitialized: true,\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        const { map } = this.context;\n        try {\n            if (map) {\n                clearPropertiesFromMap(map);\n                clearResidentsFromMap(map);\n                clearDistancesFromMap(map);\n                map.removeLayer('area');\n                map.removeSource('area');\n            }\n        } catch (e) {\n            console.log('..componment unmount error');\n        }\n    }\n\n\n\n    renderPropertiesTooltip = ({ id, email, property }) => {\n        const { utilsData } = this.props;\n        const { auth } = this.props;\n        const user = auth.user;\n        if (property.is_business && property.is_business === true) {\n            utilsData.selectedProperty = property;\n            utilsData.showBusinessInfo = true;\n\n            this.setState({\n                showBusinessInfo: true,\n            });\n        } else {\n            return <PropertiesTooltip email={email} id={id}\n                property={property} cb={this.removeProperty}\n                changeColor={this.changeColor} editMode={utilsData.editMode}\n                cbBinding={this.bindingProperty}\n                cbSendEmail={this.cbSendEmail}\n                cbBusiness={this.cbBusiness}\n                user={user}\n                cbBusinessInfo={this.cbBusinessInfo}\n            />;\n        }\n    };\n    cbSendEmail = (e, property) => {\n        const { utilsData } = this.props;\n        utilsData.drawFinished = true;\n        const data = [];\n        data.push({\n            properties: property\n        });\n        utilsData.selectedProperty = data;\n\n        this.setState({\n            selectedProperties: data,\n        });\n    }\n    changeColor = async (email) => {\n        const { utilsData } = this.props;\n        // const { properties } = this.state;\n        utilsData.changeColor = true;\n        utilsData.emailForChangeColor = email;\n        console.log('....setting utilsData.changeColor.....' + email);\n        this.setState({\n            changeColor: true\n        });\n    }\n    cbBusiness = async (email, property) => {\n        const { history } = this.props;\n        history.push(\"/business-profile?id=\" + property.id);\n    }\n    cbBusinessInfo = async (email, property) => {\n        const { utilsData } = this.props;\n        const { auth } = this.props;\n        utilsData.selectedProperty = property;\n        utilsData.showBusinessInfo = true;\n        utilsData.fncCallback = this.cbBusinessInfoCallBack;\n\n        this.setState({\n            showBusinessInfo: true,\n        });\n    }\n    cbBusinessInfoCallBack = () => {\n        console.log('...call back function works...');\n        this.redrawMap();\n    }\n    bindingProperty = async (email, property) => {\n        const { utilsData } = this.props;\n        if (property && property.is_business && (property.is_business === 1 || property.is_business === true)) {\n            //show business profile\n            utilsData.selectedProperty = property;\n            utilsData.showBusinessInfo = true;\n            utilsData.fncCallback = this.cbBusinessInfoCallBack;\n\n            this.setState({\n                showBusinessInfo: true,\n            });\n        } else {\n            console.log('..binding property..' + JSON.stringify(property));\n            utilsData.bindingProperty = true;\n            utilsData.emailForChangeColor = email;\n            utilsData.selectedProperty = property;\n            utilsData.fncCallback = this.cbBusinessInfoCallBack;\n            console.log('....setting utilsData.bindingProperty.....' + email);\n            this.setState({\n                bindingProperty: true\n            });\n        }\n    }\n    bindingBusiness = (email) => {\n\n    }\n    redrawMap = async () => {\n        const { map } = this.context;\n        if (map) {\n            clearPropertiesFromMap(map);\n            clearResidentsFromMap(map);\n            clearDistancesFromMap(map);\n            map.removeLayer('area');\n            map.removeSource('area');\n        }\n\n        const draw = new MapboxDraw({\n            controls: {\n                point: false,\n                line_string: false,\n                polygon: false,\n                trash: false,\n                combine_features: false,\n                uncombine_features: false,\n            },\n        });\n        const { loadConnected, } = this.props;\n        const { value: properties } = await loadConnected();\n        const convertedProperties = convertLocation(properties.value);\n\n        try {\n            //remove all the markers\n            const { pins } = this.state;\n            pins.map(pin => {\n                const markerTobeRemove = pin.marker;\n                markerTobeRemove.remove();\n            })\n\n            this.setState({\n                properties:\n                    convertedProperties.map((p) => ({\n                        type: 'Feature',\n                        properties: p,\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [\n                                p.location.longitude,\n                                p.location.latitude,\n                            ],\n                        },\n                    })),\n\n                draw: draw\n            });\n            map.addSource('area', {\n                type: 'geojson',\n                data: {\n                    type: 'FeatureCollection',\n                    features: [],\n                },\n            });\n            map.addLayer({\n                id: 'area',\n                type: 'fill',\n                source: 'area',\n                layout: {},\n                paint: {\n                    'fill-color': '#088',\n                    'fill-opacity': 0.8,\n                },\n            });\n\n            const popups = document.getElementsByClassName(\"mapboxgl-popup\");\n\n            if (popups.length) {\n                let popupTotal = popups.length;\n                for (let i = popupTotal - 1; i >= 0; i--) {\n                    console.log('...remove popup box i= ..' + i);\n                    try {\n                        if (popups[i]) {\n                            popups[i].remove();\n                        }\n                    } catch (e1) {\n                        console.log('..remove popup error..');\n                    }\n                };\n            }\n            const { auth } = this.props;\n            const user = auth.user;\n\n            if (user !== null && user !== undefined) {\n                showPropertiesOnMap(map, convertedProperties, this.renderPropertiesTooltip, false, user);\n                showPrimaryDistancesOnMap(map, convertedProperties, user);\n            } else {\n                showPropertiesOnMap(map, convertedProperties, this.renderPropertiesTooltip, false, user);\n                // showPrimaryDistancesOnMap(map, convertedProperties);\n            }\n\n        } catch (e) {\n\n        }\n    }\n\n    changeColorCallack = async (callbackResult, color, email) => {\n        if (callbackResult) {\n            this.redrawMap();\n        } else {\n            // change color failed\n            // find the pin\n            // console.log('..this property not added yet, but we still need to update the color');\n            const { pins } = this.state;\n            const currentPin = pins.filter(item => item.email.split('@')[0] === email.split('@')[0]);\n            const othersPin = pins.filter(item => item.email.split('@')[0] !== email.split('@')[0]);\n            console.log('..others pin..' + othersPin.length + '..current pin..' + currentPin.length + ' email=' + email + ' color=' + color);\n            if (currentPin && currentPin.length > 0) {\n                //change the marker\n                const { map } = this.context;\n                const markerTobeRemove = currentPin[0].marker;\n                markerTobeRemove.remove();\n\n                const el = document.createElement('div');\n                const width = 48;\n                const height = 48;\n                el.className = 'marker';\n                let imgSrc = 'map-markers/blue_home_pin.png';\n                if (color === 'default') imgSrc = '/map-markers/blue_home_pin.png';\n                if (color === 'hasInjured') imgSrc = '/map-markers/red_home_pin.png';\n                if (color === 'pending') imgSrc = '/map-markers/grey_home_pin.png';\n                if (color === 'safe') imgSrc = '/map-markers/green_home_pin.png';\n                if (color === 'secondary') imgSrc = '/map-markers/second_home_pin.png';\n                console.log('..change color..' + imgSrc);\n                el.style.backgroundImage = `url(` + imgSrc + `)`;\n                el.style.width = `${width}px`;\n                el.style.height = `${height}px`;\n                el.style.backgroundSize = '100%';\n\n                const marker = new mapboxgl.Marker(el).setPopup(\n                    new mapboxgl.Popup({\n                        closeOnClick: true,\n                        closeButton: true,\n                        maxWidth: 'none',\n                    }).setHTML('<h1>No address</h1>'),\n                );\n                marker.setLngLat([currentPin[0].geocodeData.longitude, currentPin[0].geocodeData.latitude]);\n                marker.addTo(map);\n\n                const element = document.createElement('div');\n                ReactDOM.render(\n                    <div className={'info-window'}>\n                        <h4>{email}</h4>\n                        <Row className=\"justify-content-end \">\n                            <Col className=\"list-unstyled text-right\">\n\n                                <li>\n                                    <Button\n                                        size={'sm'}\n                                        onClick={() => this.bindingProperty(email)}>\n                                        Info\n                                    </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n                                    {/* <Button\n                                        size={'sm'}\n                                        onClick={() => this.changeColor(email)}>\n                                        Color\n                                    </Button> */}\n                                    {/* &nbsp;&nbsp;&nbsp;&nbsp; */}\n                                    <Button\n                                        size={'sm'}\n                                        onClick={() => this.addAddress()}>\n                                        Add\n                                    </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n\n                                    <Button\n                                        size={'sm'}\n                                        onClick={() => this.removeAddress(email)}>\n                                        Remove\n                                    </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n\n                                </li>\n                            </Col>\n                        </Row>\n                    </div>,\n                    element,\n                );\n\n                marker.getPopup().setDOMContent(element);// setHTML(html);\n\n                this.setState((state) => {\n                    return {\n                        ...state,\n                        pins: [\n                            ...othersPin,\n                            {\n                                marker,\n                                email: currentPin[0].email,\n                                geocodeData: currentPin[0].geocodeData,\n                                color: color\n                            },\n                        ],\n                    };\n                });\n            }\n        }\n    }\n    removeProperty = async (email, primaryAddress) => {\n        console.log('..remove this property..' + email);\n        const prePart = email.split('@')[0];\n        const { properties } = this.state;\n        let tobeRemain = properties.filter(property => property.properties.email.split('@')[0] !== prePart);\n        let tobeDelete = properties.filter(property => property.properties.email.split('@')[0] === prePart);\n        if (primaryAddress) {\n            const { history } = this.props;\n            history.push(\"/edit-property\");\n            return;\n        }\n        console.log('..to be remove..' + JSON.stringify(tobeDelete));\n        //clear everything, then reload\n        const { deleteUserAdditionalAddressById } = this.props;\n\n        if (tobeDelete && tobeDelete.length > 0) {\n            const resp = await deleteUserAdditionalAddressById(tobeDelete[0].properties.id);\n        }\n        const { map } = this.context;\n\n\n        try {\n\n            const popups = document.getElementsByClassName(\"mapboxgl-popup\");\n\n\n            if (popups.length) {\n                let popupTotal = popups.length;\n                for (let i = popupTotal - 1; i >= 0; i--) {\n                    console.log('...remove popup box i= ..' + i);\n                    try {\n                        if (popups[i]) {\n                            popups[i].remove();\n                        }\n                    } catch (e1) {\n                        console.log('..remove popup error..');\n                    }\n                };\n            }\n            // const {pins} = this.state;\n\n            // const currentPin =  pins.filter(item => item.email ===  email);\n            // if(currentPin && currentPin.length >0){\n            //     if (currentPin[0].marker.getPopup().isOpen()) {\n            //         currentPin[0].marker.togglePopup();\n            //       }\n            // }\n\n\n            console.log('...remove map...');\n            if (map) {\n                clearPropertiesFromMap(map);\n                clearResidentsFromMap(map);\n                clearDistancesFromMap(map);\n                // removeAllImages(map);\n            }\n            this.setState({\n                properties: tobeRemain\n            });\n            console.log('...redraw the map after remove property...');\n            const properties = convertGeoProperty(tobeRemain);\n            const { auth } = this.props;\n            const user = auth.user;\n            showPropertiesOnMap(map, properties, this.renderPropertiesTooltip, false, user);\n            // showResidentsOnMap(map, residents, this.renderResidentsTooltip);\n            showPrimaryDistancesOnMap(map, properties, user);\n        } catch (e) {\n\n            console.log('...remove property error...' + JSON.stringify(e));\n        }\n    }\n\n    async initializeLayers() {\n        const { map } = this.context;\n        const { loadConnected, loadBusinessAddress } = this.props;\n        const draw = new MapboxDraw({\n            controls: {\n                point: false,\n                line_string: false,\n                polygon: false,\n                trash: false,\n                combine_features: false,\n                uncombine_features: false,\n            },\n        });\n        const { auth } = this.props;\n        const user = auth.user;\n        let convertedProperties = [];\n\n        if (user === null || user === undefined) {\n            const { value: properties } = await loadBusinessAddress();\n\n            convertedProperties = convertLocation(properties.propertyInfo);\n        } else {\n            const { value: properties } = await loadConnected();\n            convertedProperties = convertLocation(properties.value);\n        }\n\n        // console.log('..load business.. ' + JSON.stringify(convertedProperties));\n        try {\n            this.setState({\n                properties:\n                    convertedProperties.map((p) => ({\n                        type: 'Feature',\n                        properties: p,\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [\n                                p.location.longitude,\n                                p.location.latitude,\n                            ],\n                        },\n                    })),\n\n                draw: draw\n            });\n            map.addSource('area', {\n                type: 'geojson',\n                data: {\n                    type: 'FeatureCollection',\n                    features: [],\n                },\n            });\n            map.addLayer({\n                id: 'area',\n                type: 'fill',\n                source: 'area',\n                layout: {},\n                paint: {\n                    'fill-color': '#088',\n                    'fill-opacity': 0.8,\n                },\n            });\n\n            if (user === null || user === undefined) {\n                showPropertiesOnMap(map, convertedProperties, this.renderPropertiesTooltip, true, null);\n            } else {\n                showPropertiesOnMap(map, convertedProperties, this.renderPropertiesTooltip, true, user);\n                showPrimaryDistancesOnMap(map, convertedProperties, user);\n            }\n            // showResidentsOnMap(map, residents, this.renderResidentsTooltip);\n\n        } catch (e) {\n            console.log('init map layer error:' + JSON.stringify(e));\n        }\n        // map.on('click', this.onClickMap);\n    }\n\n    onClickMap = (e) => {\n        const { lng: longitude, lat: latitude } = e.lngLat;\n        // console.log('..map..on click..' + longitude);\n        const { utilsData, auth } = this.props;\n        const user = auth.user;\n        if (utilsData.editMode) {\n            console.log('..in edit mode..');\n            this.createMarker({ latitude, longitude });\n        } else {\n            if (user === null || user == undefined) {\n                //user logout Or not register\n                this.createMarker({ latitude, longitude });\n            } else {\n                console.log('.. editMode turn off..');\n            }\n        }\n    };\n\n\n    createMarker = async ({ latitude, longitude }) => {\n        // const {domain} = this.state;\n        const { map } = this.context;\n\n        const el = document.createElement('div');\n        const width = 48;\n        const height = 48;\n        el.className = 'marker';\n        el.style.backgroundImage = `url(https://alphcmap.com/map-markers/blue_home_pin.png)`;\n        el.style.width = `${width}px`;\n        el.style.height = `${height}px`;\n        el.style.backgroundSize = '100%';\n\n        const marker = new mapboxgl.Marker(el).setPopup(\n            new mapboxgl.Popup({\n                closeOnClick: true,\n                closeButton: true,\n                maxWidth: 'none',\n            }).setHTML('<h1>No address</h1>'),\n        );\n        marker.setLngLat([longitude, latitude]);\n        marker.addTo(map);\n\n        marker.on('dragend', this.onDragMarker);\n        marker.on('click', () => marker.togglePopup());\n\n        const geocodeData = await reverseGeocodePoint({ longitude, latitude });\n\n        let domain = localStorage.getItem('current_domain');\n        if (domain === undefined || domain === null) {\n            domain = 'alphc.com'\n        }\n        const email = generateEmail(geocodeData) + '@' + domain;\n        this.setState({\n            selectedAddress: geocodeData,\n            email: email\n        });\n        const { auth } = this.props;\n\n\n        const element = document.createElement('div');\n\n        if (auth.user !== null && auth.user !== undefined) {\n            //这里需要区分\n            ReactDOM.render(\n                <div className={'info-window'}>\n                    <h4>{email}</h4>\n                    <Row className=\"justify-content-end \">\n                        <Col className=\"list-unstyled text-right\">\n\n                            <li>\n                                {/* <Button\n                                    size={'sm'}\n                                    onClick={() => this.changeColor(email)}>\n                                    Color\n                                </Button>\n                                &nbsp;&nbsp;&nbsp;&nbsp; */}\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => this.addAddress()}>\n                                    Add\n                                </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => this.removeAddress(email)}>\n                                    Remove\n                                </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n\n                            </li>\n                        </Col>\n                    </Row>\n                </div>,\n                element,\n            );\n        } else {\n            ReactDOM.render(\n                <div className={'info-window'}>\n                    <h4>{email}</h4>\n                    <Row className=\"justify-content-end \">\n                        <Col className=\"list-unstyled text-right\">\n                            <li>\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => this.activateAddress()}>\n                                    Activate this address\n                                </Button>\n                            </li>\n                        </Col>\n                    </Row>\n                </div>,\n                element,\n            );\n        }\n\n        marker.getPopup().setDOMContent(element);// setHTML(html);\n        marker.togglePopup();\n\n\n        const { pins } = this.state;\n        // console.log('..pins..' + JSON.stringify(pins));\n\n\n        if (auth.user !== null && auth.user !== undefined) {\n            pins.forEach((p) => {\n                // console.log('..pins..' + JSON.stringify(p));\n                if (p.marker.getPopup().isOpen()) {\n                    p.marker.togglePopup();\n                }\n            });\n            this.setState((state) => {\n                return {\n                    ...state,\n                    pins: [\n                        ...pins,\n                        {\n                            marker,\n                            email,\n                            geocodeData,\n                            color: 'default'\n                        },\n                    ],\n                };\n            });\n        } else {\n            pins.forEach((p) => {\n                // console.log('..pins..' + JSON.stringify(p));\n                if (p.marker.getPopup().isOpen()) {\n                    p.marker.togglePopup();\n                }\n                const marker = p.marker;\n                marker.remove();\n            });\n            this.setState((state) => {\n                return {\n                    ...state,\n                    pins: [\n                        {\n                            marker,\n                            email,\n                            geocodeData,\n                        },\n                    ],\n                };\n            });\n        }\n    };\n\n    removeAddress = (emailIn) => {\n        const { pins } = this.state;\n        const tobeRemove = pins.filter((p) => p.email === emailIn);\n        const marker = tobeRemove[0].marker;\n        marker.remove();\n        const data = pins.filter((p) => p.email !== emailIn);\n        this.setState((state) => {\n            return {\n                ...state,\n                pins: data,\n            };\n        });\n        //check wheter exist\n        const { layerAdded } = this.state;\n        // console.log('..layerAdded..' + JSON.stringify(layerAdded) + \" ..emailIn..\" + emailIn);\n        let tobeDelete = layerAdded.filter(layer => layer.email === emailIn);\n        const { map } = this.context;\n        if (tobeDelete && tobeDelete.length > 0) {\n            // console.log('..tobeDelete..' + JSON.stringify(tobeDelete));\n            clearLayer(map, tobeDelete[0].layerId);\n        }\n\n    }\n    addAddress = () => {\n        const { selectedAddress, email, properties, pins, layerAdded } = this.state;\n        const { map } = this.context;\n        const currentPin = pins.filter(item => item.email === email);\n        const postData = {\n            item: {\n                email: email,\n                ...selectedAddress,\n                color: currentPin[0].color\n            }\n        }\n        const data = {\n            type: 'Feature',\n            properties: {\n                email: email,\n                ...selectedAddress,\n                color: currentPin[0].color\n            },\n            geometry: {\n                type: 'Point',\n                coordinates: [\n                    selectedAddress.location.longitude,\n                    selectedAddress.location.latitude,\n                ],\n            },\n        }\n        const { saveBatchProperties } = this.props;\n        properties.push(data);\n        saveBatchProperties(postData).then(async (resp) => {\n            console.log('..saveBatchProperties..' + JSON.stringify(resp));\n            //remove the popup and show line\n\n            // console.log('..pins..' + JSON.stringify(pins));\n\n            //  pins.forEach((p) => {\n            //      // console.log('..pins..' + JSON.stringify(p));\n            //      if (p.marker.getPopup().isOpen()) {\n            //          p.marker.togglePopup();\n            //      }\n            //  });\n\n            //  console.log('... current pin ..'  +  currentPin.length );\n            if (currentPin) {\n                //rebind\n                const element = document.createElement('div');\n\n                ReactDOM.render(\n                    <div className={'info-window'}>\n                        <h4>{email}</h4>\n                        <Row className=\"justify-content-end \">\n                            <Col className=\"list-unstyled text-right\">\n\n                                <li>\n                                    <Button\n                                        size={'sm'}\n                                        onClick={() => this.bindingProperty(email)}>\n                                        Info\n                                    </Button>\n                                    &nbsp;&nbsp;&nbsp;&nbsp;\n                                    {/* <Button\n                                        size={'sm'}\n                                        onClick={() => this.changeColor(email)}>\n                                        Color\n                                    </Button>\n                                    &nbsp;&nbsp;&nbsp;&nbsp; */}\n\n                                    <Button\n                                        size={'sm'}\n                                        onClick={() => this.removeAddress(email)}>\n                                        Remove\n                                    </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n\n                                </li>\n                            </Col>\n                        </Row>\n                    </div>,\n                    element,\n                );\n                currentPin[0].marker.getPopup().setDOMContent(element);\n                if (currentPin[0].marker.getPopup().isOpen()) {\n                    currentPin[0].marker.togglePopup();\n                }\n            }\n\n            //  this.redrawMap();\n            //get primery address\n            const primaryAddress = properties.filter(property => property.properties.primaryAddress === true);\n\n\n            const residentsWithLocation = [];\n            residentsWithLocation.push(selectedAddress);\n            const randomString = generateString(10);\n\n            const newItem = {\n                email: email,\n                layerId: randomString\n            };\n            layerAdded.push(newItem);\n            this.setState({\n                layerAdded: layerAdded,\n                properties: properties\n            });\n            showLineLayer(\n                map,\n                MapMarkerUrls.user.injured,\n                randomString,\n                residentsWithLocation,\n                (i) => [\n                    [primaryAddress[0].properties.location.longitude, primaryAddress[0].properties.location.latitude],\n                    [i.location.longitude, i.location.latitude],\n                ],\n            );\n\n        });\n\n    }\n    activateAddress = () => {\n        const { setPropertyRegistrationForm, registerForm } = this.props;\n        const { selectedAddress } = this.state;\n        //  = address;\n        console.log('..selectedAddress..' + JSON.stringify(selectedAddress));\n        let that = this;\n        registerForm.address = selectedAddress;\n        setPropertyRegistrationForm({\n            address: selectedAddress,\n            active: true,\n        });\n        this.setState({\n            // active: true,\n            address: selectedAddress\n        });\n        // dispatch(\n        //     setPropertyRegistrationForm({\n        //         // address: data,\n        //         active: true,\n        //         // rural: Object.values(data).some((value) => !value),\n        //     }),\n        // );\n    };\n    onDragMarker = async (event) => {\n        const { pins } = this.state;\n\n        pins.forEach((p) => {\n            if (p.marker.getPopup().isOpen()) {\n                p.marker.togglePopup();\n            }\n        });\n\n        const { lng: longitude, lat: latitude } = event.target.getLngLat();\n\n        const geocodeData = await reverseGeocodePoint({ longitude, latitude });\n        let domain = localStorage.getItem('current_domain');\n        if (domain === undefined || domain === null) {\n            domain = 'alphc.com'\n        }\n        const email = generateEmail(geocodeData) + '@' + domain;\n        this.setState({\n            selectedAddress: geocodeData,\n            email: email\n        });\n\n        const index = pins.map((p) => p.marker === event.target).indexOf(true);\n\n        const marker = pins[index].marker;\n        const { auth } = this.props;\n\n        const element = document.createElement('div');\n\n        if (auth.user !== null && auth.user !== undefined) {\n            ReactDOM.render(\n                <div className={'info-window'}>\n                    <h4>{email}@alphc.com</h4>\n                    <Row className=\"justify-content-end \">\n                        <Col className=\"list-unstyled text-right\">\n                            <li>\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => this.removeAddress(email)}>\n                                    Remove\n                                </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => this.addAddress()}>\n                                    Add\n                                </Button>\n                            </li>\n                        </Col>\n                    </Row>\n                </div>,\n                element,\n            );\n        } else {\n            ReactDOM.render(\n                <div className={'info-window'}>\n                    <h4>{email}@alphc.com</h4>\n                    <Row className=\"justify-content-end \">\n                        <Col className=\"list-unstyled text-right\">\n                            <li>\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => this.activateAddress()}>\n                                    Activate this address\n                                </Button>\n                            </li>\n                        </Col>\n                    </Row>\n                </div>,\n                element,\n            );\n        }\n\n        marker.getPopup().setDOMContent(element);\n        marker.togglePopup();\n\n        this.setState((state) => {\n            return {\n                ...state,\n                pins: [\n                    ...pins.slice(0, index),\n                    {\n                        marker,\n                        email,\n                    },\n                    ...pins.slice(index + 1, pins.length),\n                ],\n            };\n        });\n    };\n    onSubmitSearch = (e) => {\n        e.preventDefault();\n\n        const { searchText } = this.state;\n\n        if (!searchText.trim()) return;\n        // const { utilsData } = this.props;\n        // if(!utilsData.editMode) return;\n\n        geocodeAddress({ address: searchText }).then((data) => {\n            const { map } = this.context;\n\n            if (data) {\n                this.createMarker({\n                    latitude: data.latitude,\n                    longitude: data.longitude,\n                });\n\n                map.flyTo({\n                    center: [data.longitude, data.latitude],\n                });\n            }\n        });\n    };\n    onChangeSearchText = (e) => {\n        this.setState({\n            searchText: e.currentTarget.value,\n        });\n    };\n    toggleSatelliteMode = (e) => {\n        const { satelliteMode } = this.state;\n        const { map } = this.context;\n        if (!satelliteMode) {\n            map.setStyle('mapbox://styles/mapbox/satellite-streets-v12');\n        } else {\n            map.setStyle('mapbox://styles/mapbox/streets-v12');\n        }\n        this.setState({\n            satelliteMode: !satelliteMode,\n        });\n        this.redrawMap();\n    }\n    toggleDrawing = (e) => {\n        const { drawing, draw, selectedProperties, feature, properties } = this.state;\n        console.log('...toggleDrawing...');\n        const { map } = this.context;\n        const { utilsData } = this.props;\n        utilsData.drawing = !drawing;\n        if (!drawing) {\n            try {\n                map.addControl(draw, 'top-left');\n                draw.changeMode(draw.modes.DRAW_POLYGON);\n\n                map.getSource('area').setData({\n                    type: 'FeatureCollection',\n                    features: [],\n                });\n                this.setState({\n                    drawing: !drawing,\n                    selectedProperties: [],\n                    feature: null,\n                    selectedPropertyEmail: []\n                });\n            } catch (e) {\n\n            }\n        } else {\n            const featureCollection = draw.getAll();\n            try {\n                map.getSource('area').setData(featureCollection);\n            } catch (e) {\n\n            }\n\n            const data = properties.filter((p) =>\n                booleanPointInPolygon(p, featureCollection.features[0]),\n            );\n            let selected = [];\n            selectedProperties.map(property => {\n                let columnJson = {\n                    \"Email\": property.properties.email\n                }\n                selected.push(columnJson)\n            });\n            console.log(' end drawing 1=' + JSON.stringify(data) + ' 2=' + JSON.stringify(selected));\n\n            // const { properties } = this.state;\n            utilsData.drawFinished = true;\n\n            utilsData.selectedProperty = data;\n\n            this.setState({\n                drawing: !drawing,\n                selectedProperties: data,\n                selectedPropertyEmail: selected,\n                feature: featureCollection.features[0]\n            });\n            map.removeControl(draw);\n        }\n\n    }\n    toggleShowMapLegend = (e) => {\n        const { showMapLegend } = this.state;\n        this.setState({\n            showMapLegend: !showMapLegend,\n        });\n    }\n    PropertyMarkerDescriptions = [\n        {\n            marker: MapMarkerUrls.property.default,\n            description: 'Add your Address Makers based on need and requirements',\n        },\n        {\n            marker: MapMarkerUrls.property.hasInjured,\n            description:\n                'Add your Address Makers based on need and requirements',\n        },\n        {\n            marker: MapMarkerUrls.property.pending,\n            description:\n                'Add your Address Makers based on need and requirements',\n        },\n        {\n            marker: MapMarkerUrls.property.safe,\n            description:\n                'Add your Address Makers based on need and requirements',\n        },\n    ];\n    render() {\n        const { pins, searchText, drawing, satelliteMode, showMapLegend } = this.state;\n        const { utilsData, active, editMode, auth } = this.props;\n\n        const user = auth.user;\n        let showIcon = true;\n        const loginType = getLoginType();\n        if (user === null || user === undefined) showIcon = false;\n        if (utilsData.editMode) showIcon = false;\n        if (utilsData.changeColor) showIcon = false;\n        if (utilsData.bindingProperty) showIcon = false;\n        if (utilsData.drawFinished) showIcon = false;\n        if (utilsData.showBusinessInfo) showIcon = false;\n        if (utilsData.connectToMerchantId > 0) showIcon = false;\n        if (showMapLegend) showIcon = false;\n        if (parseInt(loginType) === 1) showIcon = false;\n\n        return <>\n            <div className={'showcase-map-top-actions'}>\n                <div className={'search-actions'}>\n                    {user !== null && user !== undefined && parseInt(loginType) === 1 ? null : <Form onSubmit={this.onSubmitSearch}>\n                        <Input\n                            bsSize={'lg'}\n                            disabled={!utilsData.editMode && user !== null && user !== undefined}\n                            className=\"\"\n                            value={searchText}\n                            onChange={this.onChangeSearchText}\n                            placeholder={'Search...'}\n                        />\n                    </Form>}\n                </div>\n            </div>\n\n            {!showIcon ? null : satelliteMode ? null :\n                drawing ?\n                    (\n\n                        <i title='End Drawing' onClick={(e) => this.toggleDrawing(e)} className=\"draw-button fa-2x fa-solid fa-arrow-pointer\"></i>\n\n                    ) : (\n\n\n                        <i title='Pan, Draw, Connect, Addresses boundary and identify area to Send Email' onClick={(e) => this.toggleDrawing(e)} className=\"draw-button fa-2x fa-solid fa-draw-polygon\"></i>\n\n\n                    )\n            }\n            {\n                !showIcon ? null : satelliteMode ?\n                    (\n                        <i onClick={(e) => this.toggleSatelliteMode(e)} className=\"satellite-button red-color fa-2x fa-solid fa-globe\"></i>\n                    ) :\n                    (\n                        <i onClick={(e) => this.toggleSatelliteMode(e)} className=\"satellite-button fa-2x fa-solid fa-satellite\"></i>\n                    )\n\n\n            }\n\n\n            {!showIcon ? null : !showMapLegend && (\n                <>\n\n                    <i\n                        className=\"mapLegend-button  close-button fa-3x fa fa-question\"\n                        onClick={(e) => this.toggleShowMapLegend(e)}\n                    />\n\n                </>\n            )}\n            {showMapLegend && (\n                <div className=\"map-legend_content\">\n                    <i\n                        className=\"mapLegend-button-close  fa fa-3x fa-close\"\n                        onClick={(e) => this.toggleShowMapLegend(e)}\n                    />\n\n                    <b>Address Markers</b>\n\n                    <table> <tr>\n                        {this.PropertyMarkerDescriptions.map(\n                            ({ marker, description }) => (\n\n                                <td>\n                                    <img\n                                        alt={description}\n                                        src={marker}\n                                        height={40}\n                                    /> &nbsp;&nbsp;\n                                </td>\n\n\n                            ),\n                        )}\n                    </tr>\n                        <tr><td colSpan={this.PropertyMarkerDescriptions.length}><hr />{this.PropertyMarkerDescriptions[0].description}<hr /></td></tr>\n                    </table>\n                    <b>Tools Bar</b>\n                    <table>\n                        <tr><td><i className=\"fa-2x fa-solid fa-draw-polygon\"></i></td><td>Pan, Draw, Connect, Addresses boundary and identify area to Send Email<hr /></td></tr>\n                        <tr><td><i className=\"fa-2x fa-solid fa-arrow-pointer\"></i></td><td>Send Email to identified Opt-in Addresses<hr /></td></tr>\n                        <tr><td><i className=\"fa-2x fa-solid fa-satellite\"></i></td><td>Satellite Mode<hr /></td></tr>\n                        <tr><td><i className=\"fa-2x fa-solid fa-globe\"></i></td><td>Map Mode</td></tr>\n                    </table>\n\n\n\n                </div>\n            )}\n\n            <Map />\n            {active && <PropertyForm />}\n            {utilsData.changeColor && <ChangeColorForm callback={this.changeColorCallack} />}\n            {utilsData.bindingProperty && <BindingForm />}\n            {utilsData.drawFinished && <FlyerForm />}\n            {utilsData.showBusinessInfo && <BusinessInfo />}\n            {utilsData.connectToMerchantId > 0 && <PropertyForm />}\n        </>\n\n            ;\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    registerForm: state.registerForm,\n    active: state.registerForm.active,\n    utilsData: state.utilsData,\n    editMode: state.utilsData.editMode\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    loadBusinessAddress: () =>\n        dispatch(loadBusinessAddress()),\n    loadConnected: (data) =>\n        dispatch(loadConnected(data)),\n    fetchUsers: () => dispatch(fetchUsers({ page: 1, pageSize: 100000 })),\n    setPropertyRegistrationForm: (data) => dispatch(setPropertyRegistrationForm(data)),\n    saveBatchProperties: (data) => dispatch(saveBatchProperties(data)),\n    deleteUserAdditionalAddressById: (propertyId) => dispatch(deleteUserAdditionalAddressById(propertyId))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(withRouter(Showcase));\n","import React from \"react\";\n\nconst Splash = () => {\n    return (\n        <div className=\"full-screen splash-screen isLoading\">\n              <img\n                className=\"splash-image\"\n                src={'/assets/img/logo-alphc.png'}\n                alt={'logo'}\n            />\n            <h1 className=\"splash-text\">INFINITE POSSIBILITIES</h1>\n        </div>\n    );\n};\n\nexport default Splash;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router';\nimport { TabContent, TabPane } from 'reactstrap';\nimport MapProvider from '../../common/contexts/MapContext/MapProvider';\nimport HomeLayout from '../layouts/HomeLayout';\n\nimport Showcase from './newHome/Showcase';\nimport Splash from './newHome/Splash';\n\n// const Users = React.lazy(() => import('../../admin/views/users/Users'));\n// const Properties = React.lazy(() => import('../../admin/views/properties/Properties'));\n\n\n\n\n\nconst Home = () => {\n    const { pathname: location } = useLocation();\n\n\n    const [activeTab, setActiveTab] = useState('');\n    const [timeoutHandle, setTimeoutHandle] = useState(null);\n\n    useEffect(() => {\n        if (location === '/') {\n            setActiveTab(location);\n            const handle = setTimeout(() => {\n                setActiveTab('_showcase');\n            }, 1500);\n\n            setTimeoutHandle(handle);\n        } else {\n            clearTimeout(timeoutHandle);\n            setTimeoutHandle(null);\n            setActiveTab(location);\n        }\n    }, [location]); // eslint-disable-line react-hooks/exhaustive-deps\n    //check login\n    const user = useSelector((state) => state.auth.me);\n    if (user === null || user === undefined) {\n        // window.location.href = '/login';\n        // return;\n    }\n    return (\n        <HomeLayout>\n            <TabContent activeTab={activeTab} className=\"home-tab-content\">\n                <TabPane tabId=\"_showcase\" className=\"\">\n                    <MapProvider>\n                        {activeTab === '_showcase' && <Showcase />}\n                    </MapProvider>\n                </TabPane>\n\n                <TabPane tabId=\"/\" className=\"\">\n                    <Splash />\n                </TabPane>\n\n                {/* <TabPane tabId=\"/admin/users\" className=\"\">\n                    <Users />\n                </TabPane>\n                <TabPane tabId=\"/admin/properties\" className=\"\">\n                    <Properties />\n                </TabPane> */}\n\n\n            </TabContent>\n        </HomeLayout>\n    );\n};\n\nexport default Home;\n"],"names":["history","useHistory","dispatch","useDispatch","showVerificationModal","useSelector","state","app","registrationUser","registerForm","user","auth","userHasEmail","username","email","userVerified","emailVerified","mobileVerified","Modal","size","isOpen","centered","ModalBody","className","EmailVerification","MobileVerification","Button","block","color","onClick","window","ReactNativeWebView","postMessage","JSON","stringify","action","e","toggleVerificationModal","setTimeout","location","reload","Row","noGutters","push","children","Header","Footer","mapboxgl","process","useState","map","setMap","mapContainer","useRef","context","useContext","MapContext","useLayoutEffect","document","onresize","resize","useEffect","container","current","style","center","zoom","attributionControl","nav","showCompass","showZoom","addControl","on","console","log","initializeMap","MapLegend","ref","el","id","property","cb","editMode","changeColor","cbBinding","cbSendEmail","cbBusiness","cbBusinessInfo","bindingName","Col","bindingEmail","bindingPhone","bindingOthers","undefined","ownerMobileNumber","mobileNumber","primaryAddress","is_business","connected","validationSchema","Yup","shape","wizardInstance","address","rural","utilsData","steps","formik","useFormik","initialValues","onSubmit","values","setSubmitting","setPropertyRegistrationForm","nextStep","handleChange","handleBlurOrig","handleBlur","handleSubmit","errors","touched","isValid","isSubmitting","Form","Input","type","value","name","FormGroup","Label","for","onChange","onBlur","postalCode","invalid","placeholder","FormFeedback","streetNumber","route","locality","lotNo","plotNo","region","province","city","country","disabled","Spinner","connectToMerchantId","resetRegistrationForm","noDelivery","selectedProperty","goToStep","generateEmail","hightRiseOrCommercial","propertyName","totalFloors","totalUnitsEachFloor","addressType","settlementType","unitNo","isInitialValid","propertySchema","isPropertyRegistered","then","result","registered","setErrorMessage","otherValues","catch","error","errorMessage","setFieldValue","tag","check","currentTarget","checked","Collapse","length","required","companyName","lastName","password","min","max","passwordConfirmation","oneOf","consent","liability","newUser","longitude","latitude","provider","registerUser","getMe","resp","me","toastr","response","message","messages","setFieldError","finally","setFieldTouched","MobileInput","invalidProperty","target","href","enterRight","enterLeft","exitRight","exitLeft","intro","transitions","setWizardInstance","md","sm","xs","to","src","alt","isLazyMount","instance","callback","setColor","useCallback","event","width","paddingLeft","textAlign","MapMarkerUrls","height","emailForChangeColor","data","changePropertyColor","cancelChangePropertyColor","bindingSchema","bindingProperty","fncCallback","propertyBinding","promotionTitle","promotionContent","properties","domain","localStorage","getItem","drawFinished","bindingEmails","p","postData","emails","join","sendPromotionContents","setCurrent","accent","class","TextArea","maxLength","rows","onKeyUp","currentLength","limitWords","companyProfile","setCompanyProfile","totalConnected","setTotalConnected","getWorkingHourValue","hours","dayOfWeek","index","item","filter","hour","parseInt","openHour","closeHour","closed","workingHour","setWorkingHour","getBusinessProfile","jsonData","id_type","loadConnectedTotal","iCount","shareUrl","title","street_number","postal_code","phone","website","binding_email","owner_mobile_number","merchant_property_id","disConnectionMerchant","showBusinessInfo","cancelShowBusinessInfo","disConnectToMerchant","saveMerchantConnection","active","connectToMerchant","FacebookShareButton","url","quote","FacebookIcon","round","TwitterShareButton","TwitterIcon","WhatsappShareButton","separator","WhatsappIcon","LinkedinShareButton","LinkedinIcon","PinterestShareButton","String","PinterestIcon","RedditShareButton","windowWidth","windowHeight","RedditIcon","EmailShareButton","subject","body","EmailIcon","LineShareButton","LineIcon","WeiboShareButton","WeiboIcon","Showcase","pins","mapInitialized","searchText","selectedAddress","layerAdded","draw","drawedBefore","drawing","selectedProperties","feature","selectedPropertyEmail","satelliteMode","showMapLegend","renderPropertiesTooltip","props","removeProperty","setState","cbBusinessInfoCallBack","redrawMap","bindingBusiness","clearPropertiesFromMap","clearResidentsFromMap","clearDistancesFromMap","removeLayer","removeSource","MapboxDraw","controls","point","line_string","polygon","trash","combine_features","uncombine_features","loadConnected","convertedProperties","convertLocation","pin","marker","remove","geometry","coordinates","addSource","features","addLayer","source","layout","paint","popups","getElementsByClassName","popupTotal","i","e1","showPropertiesOnMap","showPrimaryDistancesOnMap","changeColorCallack","callbackResult","currentPin","split","othersPin","createElement","imgSrc","backgroundImage","backgroundSize","setPopup","closeOnClick","closeButton","maxWidth","setHTML","setLngLat","geocodeData","addTo","element","ReactDOM","addAddress","removeAddress","getPopup","setDOMContent","prePart","tobeRemain","tobeDelete","deleteUserAdditionalAddressById","convertGeoProperty","onClickMap","lngLat","lng","lat","createMarker","onDragMarker","togglePopup","reverseGeocodePoint","activateAddress","forEach","emailIn","layer","clearLayer","layerId","saveBatchProperties","residentsWithLocation","randomString","generateString","newItem","showLineLayer","getLngLat","indexOf","slice","onSubmitSearch","preventDefault","trim","geocodeAddress","flyTo","onChangeSearchText","toggleSatelliteMode","setStyle","toggleDrawing","featureCollection","getAll","getSource","setData","booleanPointInPolygon","selected","columnJson","removeControl","changeMode","modes","DRAW_POLYGON","toggleShowMapLegend","PropertyMarkerDescriptions","description","prevProps","prevState","snapshot","this","initializeLayers","loadBusinessAddress","propertyInfo","showIcon","loginType","getLoginType","bsSize","colSpan","Component","contextType","connect","fetchUsers","page","pageSize","propertyId","withRouter","useLocation","pathname","activeTab","setActiveTab","timeoutHandle","setTimeoutHandle","handle","clearTimeout","HomeLayout","TabContent","TabPane","tabId","MapProvider"],"sourceRoot":""}