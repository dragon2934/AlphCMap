{"version":3,"file":"static/js/70.7021d8f0.chunk.js","mappings":"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","sources":["admin/file-upload/services/http-common.js","admin/file-upload/services/FileUploadService.js","admin/file-upload/components/FilesUpload.js","admin/views/properties/file-upload.js"],"sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n\n// export const fetchUser = (id) => {\n//   return (dispatch, getState) => {\n//       const token = getState().auth.jwt;\n\n//       return dispatch({\n//           type: ADMIN_FETCH_USER,\n//           payload: fetch(`${SERVICE_URL}/users/${id}?tenant=${PARTNER_TOKEN}`, {\n//               headers: {\n//                   Accept: 'application/json',\n//                   'Content-Type': 'application/json',\n//                   Authorization: `Bearer ${token}`,\n//               },\n//               method: 'GET',\n//           })\n//               .then((r) => r.json())\n//               .then((responseData) => {\n//                   if (responseData.statusCode >= 300) {\n//                       return Promise.reject(responseData);\n//                   } else {\n//                       return responseData;\n//                   }\n//               }),\n//       });\n//   };\n// };\n","import http from \"./http-common\";\nimport {SERVICE_URL} from '../../../constants';\n// const { listFiles,uploadFiles} = require('../../../redux/actionCreators/adminActionCreators');\nconst upload = (file,token, onUploadProgress) => {\n  let formData = new FormData();\n\n  formData.append(\"files\", file);\n\n  return http.post(SERVICE_URL+\"/upload\", formData, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n      Authorization: `Bearer ${token}`,\n    },\n    onUploadProgress,\n  });\n};\n\nconst getFiles = (token) => {\n  return http.get(\n    SERVICE_URL+\"/upload/files?_limit=10&_start=0&_sort=updatedAt:DESC\");\n  // return listFiles();\n};\n\nconst FileUploadService = {\n  upload,\n  getFiles,\n};\n\nexport default FileUploadService; \n","import React, { useState, useEffect, useRef } from \"react\";\nimport UploadService from \"../services/FileUploadService\";\nimport { listFiles, updateProperty, updateLatLng } from '../../../redux/actionCreators/adminActionCreators';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst UploadFiles = () => {\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\n  const [progressInfos, setProgressInfos] = useState({ val: [] });\n  const [message, setMessage] = useState([]);\n  const [fileInfos, setFileInfos] = useState([]);\n  const progressInfosRef = useRef(null)\n  const dispatch = useDispatch();\n  const token = useSelector((state) => state.auth.jwt);\n  // console.log('token =' + token );\n\n\n  useEffect(() => {\n    dispatch(listFiles()).then((response) => {\n      setFileInfos(response.data);\n    });\n  }, []);\n\n  const selectFiles = (event) => {\n    setSelectedFiles(event.target.files);\n    console.log('file selected..' + JSON.stringify(event.target.files));\n    setProgressInfos({ val: [] });\n  };\n\n  const uploadFile = async (idx, file) => {\n    let _progressInfos = [...progressInfosRef.current.val];\n    // dispatch(uploadFiles()).then((response) => {\n    //   setFileInfos(response.data);\n    // });\n    console.log('uploading ..file=' + JSON.stringify(file));\n    return UploadService.upload(file, token, (event) => {\n      _progressInfos[idx].percentage = Math.round(\n        (100 * event.loaded) / event.total\n      );\n      setProgressInfos({ val: _progressInfos });\n    })\n      .then((resp) => {\n        setMessage((prevMessage) => ([\n          ...prevMessage,\n          \"Uploaded the file successfully: \" + file.name,\n        ]));\n        //Do update database for property\n        //resp.url\n        // console.log('upload completed...' + JSON.stringify(resp));\n        dispatch(updateProperty(file.name, resp.data[0].url)).then((response) => {\n          console.log(' update property..' + JSON.stringify(response));\n          //upload next\n          const files = Array.from(selectedFiles);\n          idx = idx + 1;\n          if (idx < files.length) {\n            sleep(500);\n            uploadFile(idx, files[idx]);\n          } else {\n            //upload completed\n            // setMessage([]);\n            setMessage((prevMessage) => ([\n              ...prevMessage,\n              \"Uploaded Completed,now update Lat/Lng for the property, please wait.... \",\n            ]));\n            dispatch(updateLatLng()).then(resp => {\n              setMessage((prevMessage) => ([\n                ...prevMessage,\n                \"update Lat/Lng successful \",\n              ]));\n            }).catch(error => {\n              setMessage((prevMessage) => ([\n                ...prevMessage,\n                \"update Lat/Lng error: \" + JSON.stringify(error),\n              ]));\n            })\n\n\n          }\n\n        }).catch(error => {\n          console.log('update property error..' + JSON.stringify(error));\n        });\n\n      })\n      .catch((error) => {\n        console.log('upload file error..' + JSON.stringify(error));\n        _progressInfos[idx].percentage = 0;\n        setProgressInfos({ val: _progressInfos });\n\n        setMessage((prevMessage) => ([\n          ...prevMessage,\n          \"Could not upload the file: \" + file.name,\n        ]));\n      });\n  };\n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n  const uploadSelectedFiles = () => {\n    const files = Array.from(selectedFiles);\n    console.log('files...' + JSON.stringify(files));\n\n    let _progressInfos = files.map(file => ({ percentage: 0, fileName: file.name }));\n\n    progressInfosRef.current = {\n      val: _progressInfos,\n    }\n\n    //Start upload\n    uploadFile(0, files[0]);\n\n    // const uploadPromises = files.map((file, i) =>{ \n    //   uploadFile(i, file);\n    //   sleep(500);//wait for database update\n    // });\n\n    // Promise.all(uploadPromises)\n    //   .then((files) => {\n    //     setFileInfos(files.data);\n    //     console.log('all uploads...' + files.data);\n    //   });\n\n    // setMessage([]);\n  };\n\n  return (\n    <div>\n      {progressInfos && progressInfos.val.length > 0 &&\n        progressInfos.val.map((progressInfo, index) => (\n          <div className=\"mb-2\" key={index}>\n            <span>{progressInfo.fileName}</span>\n            <div className=\"progress\">\n              <div\n                className=\"progress-bar progress-bar-info\"\n                role=\"progressbar\"\n                aria-valuenow={progressInfo.percentage}\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                style={{ width: progressInfo.percentage + \"%\" }}\n              >\n                {progressInfo.percentage}%\n              </div>\n            </div>\n          </div>\n        ))}\n\n      <div className=\"row my-3\">\n        <div className=\"col-8\">\n          <label className=\"btn btn-default p-0\">\n            <input type=\"file\" multiple onChange={selectFiles} />\n          </label>\n        </div>\n\n        <div className=\"col-4\">\n          <button\n            className=\"btn btn-success btn-sm\"\n            disabled={!selectedFiles}\n            onClick={uploadSelectedFiles}\n          >\n            Upload\n          </button>\n        </div>\n      </div>\n\n      {message.length > 0 && (\n        <div className=\"alert alert-secondary\" role=\"alert\">\n          <ul>\n            {message.map((item, i) => {\n              return <li key={i}>{item}</li>;\n            })}\n          </ul>\n        </div>\n      )}\n\n      <div className=\"card\">\n        <div className=\"card-header\">List of Files</div>\n        <ul className=\"list-group list-group-flush\">\n          {fileInfos &&\n            fileInfos.map((file, index) => (\n              <li className=\"list-group-item\" key={index}>\n                <a href={file.url}>{file.name}</a>\n              </li>\n            ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default UploadFiles;\n","import React from \"react\";\n// import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Header from '../../../site/pages/newHome/Header';\nimport FilesUpload from '../../file-upload/components/FilesUpload';\n\nconst PropertyFileUpload = () => {\n  return (\n    <main>\n        <Header />\n        <div className=\"content\">\n    <div className=\"container\" style={{ width: \"600px\" }}>\n      <div className=\"my-3\">\n        <h4>PDF Files Upload</h4>\n      </div>\n\n      <FilesUpload />\n    </div>\n    </div>\n    </main>\n  );\n}\n\nexport default PropertyFileUpload;\n"],"names":["axios","headers","upload","file","token","onUploadProgress","formData","FormData","append","http","SERVICE_URL","Authorization","getFiles","useState","undefined","selectedFiles","setSelectedFiles","val","progressInfos","setProgressInfos","message","setMessage","fileInfos","setFileInfos","progressInfosRef","useRef","dispatch","useDispatch","useSelector","state","auth","jwt","useEffect","listFiles","then","response","data","uploadFile","idx","_progressInfos","current","console","log","JSON","stringify","UploadService","event","percentage","Math","round","loaded","total","resp","prevMessage","name","updateProperty","url","files","Array","from","length","sleep","updateLatLng","catch","error","milliseconds","Promise","resolve","setTimeout","map","progressInfo","index","className","fileName","role","style","width","type","multiple","onChange","target","disabled","onClick","item","i","href","Header","FilesUpload"],"sourceRoot":""}