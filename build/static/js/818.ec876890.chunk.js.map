{"version":3,"file":"static/js/818.ec876890.chunk.js","mappings":"sQAoIA,UAhHmB,WACf,IAAMA,GAAUC,EAAAA,EAAAA,MACVC,GAAYC,EAAAA,EAAAA,MAAcC,OAAOC,MAAM,gBAAiB,IACxDC,EAAcC,OAAOL,GAAaA,EAAU,GAAKA,EAAU,GAAK,GACtE,GAAwBM,EAAAA,EAAAA,UAASF,GAAY,eAAtCG,EAAI,KAAEC,EAAO,KACpB,GAA8BF,EAAAA,EAAAA,WAAS,GAAK,eAArCG,EAAO,KAAEC,EAAU,KAC1B,GAA0BJ,EAAAA,EAAAA,UAAS,GAAE,eAAvBK,GAAF,KAAU,MAChBC,GAAOC,EAAAA,EAAAA,cAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKC,EAAE,KAEjDC,EAAAA,EAAAA,YAAU,WACNb,IAAgBG,GAAQC,EAAQJ,EACpC,GAAG,CAACA,EAAaG,IAEjB,IAAMW,GAAWC,EAAAA,EAAAA,eACXC,GAAaP,EAAAA,EAAAA,cAAY,SAACC,GAAK,OAAKA,EAAMO,MAAMD,UAAU,IAmBhE,OAjBAH,EAAAA,EAAAA,YAAU,WAKN,OAJAP,GAAW,GACXQ,GAASI,EAAAA,EAAAA,IAAgB,CAAEf,KAAAA,EAAMgB,SAAU,IAASC,SAAUZ,EAAKa,KAAKC,QAASC,SAAQ,kBACrFjB,GAAW,EAAM,IAEd,WAAQ,CACnB,GAAG,CAACQ,EAAUX,KAEdU,EAAAA,EAAAA,YAAU,WAIN,OAHAC,GAASU,EAAAA,EAAAA,OAAsBC,MAAK,gBAAUC,EAAK,EAAZC,MAAK,OACxCpB,EAASqB,SAASF,GAAO,IAEtB,WAAQ,CACnB,GAAG,CAACZ,IAEJe,QAAQC,IAAI,eAAgBd,IAGxB,6BACI,SAAC,IAAM,KACP,gBAAKe,UAAU,UAAS,UACpB,SAAC,KAAI,WACD,SAAC,KAAI,WACD,UAAC,KAAK,YACF,UAAC,KAAW,yBAER,kBAAOA,UAAU,aAAY,0BAC7B,iBAAKA,UAAU,sBAAqB,WAChC,SAAC,KAAO,CACJC,IAAKC,EAAAA,GACLC,GAAI,qBACJH,UAAU,2BACVI,KAAM,KACNC,MAAM,UAAS,yBAET,qBACV,SAAC,KAAO,CACJJ,IAAKC,EAAAA,GACLC,GAAI,wBACJH,UAAU,2BACVI,KAAM,KACNC,MAAM,UAAS,iCAK3B,SAAC,KAAS,WACN,SAAC,IAAU,CACPC,MAAOrB,EAAWsB,KAAI,SAACC,GAAC,yBACjBA,GAAC,IACJC,UAAWD,EAAEC,UAAUC,WAAWC,MAAM,KAAK,GAC7CC,UAAWf,SAASW,EAAEI,WACtBC,SAAU,IAAML,EAAEK,SAASC,SAAW,IAAMN,EAAEK,SAASE,UAAY,KAAG,IAE1EzC,QAASA,EACT0C,OAAQ,CACJ,CAAEC,IAAK,UAAWC,SAAU,oBAC5B,OACA,YACA,UACA,WACA,aAEJC,OAAK,EACLC,SAAO,EACPC,QAAM,EAENC,YAAa,CAAE,YAAe,eAC9BC,aAtFlB,GAuFkBC,YAAU,EACVC,eAAa,EACbC,WAAY,SAACC,GAAI,OACbhE,EAAQiE,KAAK,qBAAD,OAAsBD,EAAKE,IAAK,iBAsBpF,C","sources":["admin/views/properties/Properties.js"],"sourcesContent":["import {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CDataTable,\n    CRow,\n} from '@coreui/react';\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport {\n    fetchProperties,\n    fetchPropertyCount,\n} from '../../../redux/actionCreators/adminActionCreators';\nimport Header from '../../../site/pages/newHome/Header';\n// import utilsTools from '../../../utils/utils';\nconst PAGE_SIZE = 20;\n\nconst Properties = () => {\n    const history = useHistory();\n    const queryPage = useLocation().search.match(/page=([0-9]+)/, '');\n    const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\n    const [page, setPage] = useState(currentPage);\n    const [loading, setLoading] = useState(true);\n    const [count, setCount] = useState(0);\n    const user = useSelector((state) => state.auth.me);\n\n    useEffect(() => {\n        currentPage !== page && setPage(currentPage);\n    }, [currentPage, page]);\n\n    const dispatch = useDispatch();\n    const properties = useSelector((state) => state.admin.properties);\n\n    useEffect(() => {\n        setLoading(true);\n        dispatch(fetchProperties({ page, pageSize: 1000000, roleName: user.role.name })).finally(() =>\n            setLoading(false),\n        );\n        return () => { };\n    }, [dispatch, page]);\n\n    useEffect(() => {\n        dispatch(fetchPropertyCount()).then(({ value: count }) =>\n            setCount(parseInt(count)),\n        );\n        return () => { };\n    }, [dispatch]);\n\n    console.log('properties: ', properties);\n\n    return (\n        <main>\n            <Header />\n            <div className=\"content\">\n                <CRow>\n                    <CCol>\n                        <CCard>\n                            <CCardHeader>\n                                Properties\n                                <small className=\"text-muted\"> Properties</small>\n                                <div className=\"card-header-actions\">\n                                    <CButton\n                                        tag={Link}\n                                        to={'/admin/file-upload'}\n                                        className=\"btn-ghost-primary h-auto\"\n                                        size={'sm'}\n                                        color=\"primary\">\n                                        File Upload\n                                    </CButton> &nbsp;&nbsp;&nbsp;&nbsp;\n                                    <CButton\n                                        tag={Link}\n                                        to={'/admin/properties/new'}\n                                        className=\"btn-ghost-primary h-auto\"\n                                        size={'sm'}\n                                        color=\"primary\">\n                                        New Property\n                                    </CButton>\n                                </div>\n                            </CCardHeader>\n                            <CCardBody>\n                                <CDataTable\n                                    items={properties.map((p) => ({\n                                        ...p,\n                                        createdAt: p.createdAt.toString().split('T')[0],\n                                        serial_no: parseInt(p.serial_no),\n                                        location: '[' + p.location.latitude + ',' + p.location.longitude + ']'\n                                    }))}\n                                    loading={loading}\n                                    fields={[\n                                        { key: 'address', _classes: 'font-weight-bold' },\n                                        'area',\n                                        'serial_no',\n                                        'acreage',\n                                        'location',\n                                        'createdAt'\n                                    ]}\n                                    hover\n                                    striped\n                                    sorter\n                                    // columnFilter\n                                    tableFilter={{ 'placeholder': 'Keywords...' }}\n                                    itemsPerPage={PAGE_SIZE}\n                                    pagination\n                                    clickableRows\n                                    onRowClick={(item) =>\n                                        history.push(`/admin/properties/${item.id}`)\n                                    }\n                                />\n                                {\n                                    // parseInt(count / PAGE_SIZE) ? (\n                                    //     <CPagination\n                                    //         activePage={page}\n                                    //         size={'sm'}\n                                    //         onActivePageChange={pageChange}\n                                    //         doubleArrows={false}\n                                    //         pages={parseInt(Math.ceil(count / PAGE_SIZE))}\n                                    //         align=\"end\"\n                                    //     />\n                                    // ) : null\n                                }\n                            </CCardBody>\n                        </CCard>\n                    </CCol>\n                </CRow>\n            </div>\n        </main>\n    );\n};\n\nexport default Properties;\n"],"names":["history","useHistory","queryPage","useLocation","search","match","currentPage","Number","useState","page","setPage","loading","setLoading","setCount","user","useSelector","state","auth","me","useEffect","dispatch","useDispatch","properties","admin","fetchProperties","pageSize","roleName","role","name","finally","fetchPropertyCount","then","count","value","parseInt","console","log","className","tag","Link","to","size","color","items","map","p","createdAt","toString","split","serial_no","location","latitude","longitude","fields","key","_classes","hover","striped","sorter","tableFilter","itemsPerPage","pagination","clickableRows","onRowClick","item","push","id"],"sourceRoot":""}