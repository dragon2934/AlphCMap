{"version":3,"file":"static/js/88.e00359d4.chunk.js","mappings":"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","sources":["admin/views/users/UserEdit.js","common/components/MobileInput.js"],"sourcesContent":["import {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    CCardHeader,\n    CCol,\n    CForm,\n    CFormGroup,\n    CInput,\n    CInvalidFeedback,\n    CLabel,\n    CRow,\n    CSelect,\n    CSpinner,\n} from '@coreui/react';\nimport { useFormik } from 'formik';\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport * as Yup from 'yup';\n// import MapContext from '../../../common/contexts/MapContext/MapContext';\nimport {\n    fetchRoles,\n    fetchUser,\n    saveUser,\n    saveTenant\n} from '../../../redux/actionCreators/adminActionCreators';\nimport MobileInput from '../../../common/components/MobileInput';\nimport Header from '../../../site/pages/newHome/Header';\n\nconst validationSchema = Yup.object().shape({\n    mobileNumber: Yup.number().required('Mobile number is required'),\n    firstName: Yup.string(),\n    lastName: Yup.string(),\n    password: Yup.string()\n        .min(6, 'Password is  too Short!')\n        .max(16, 'Password is too Long!'),\n    role: Yup.string().required('Role is required'),\n});\n\nconst UserEdit = ({ match }) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const roles = useSelector((state) => state.admin.roles);\n    const loginedUser = useSelector((state) => state.auth.me);\n\n\n    // console.log('loginedUser=' + JSON.stringify(loginedUser.role));\n    const formik = useFormik({\n        initialValues: {\n            id: match.params.id,\n            mobileNumber: '',\n            firstName: '',\n            lastName: '',\n            email: '',\n            password: '',\n\n            username: '',\n            role: '',\n            // property: undefined,\n            emailVerified: true,\n            mobileVerified: true,\n            createAt: '',\n            blocked: false,\n            confirmed: true,\n            location: {},\n        },\n        validationSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n\n            if (loginedUser.role.name === process.env.REACT_APP_ROLE_PM_NAME) {\n                //PM add a tenant\n                const user = {\n                    ...values,\n                    tenant: loginedUser.tenant,\n                    // propertyId: property!=null && property!=undefined ? property.id:landlordId,\n                    // unitNo: unitNo\n                };\n\n                dispatch(saveTenant(user))\n                    .then(() => {\n                        if (match.params.id)\n                            history.push(`/admin/users/${match.params.id}`);\n                        else history.push('/admin/users');\n                    })\n                    .catch(() => setSubmitting(false));\n            } else {\n                const user = {\n                    ...values,\n                    tenant: loginedUser.tenant,\n                };\n\n                dispatch(saveUser(user))\n                    .then(() => {\n                        if (match.params.id)\n                            history.push(`/admin/users/${match.params.id}`);\n                        else history.push('/admin/users');\n                    })\n                    .catch(() => setSubmitting(false));\n            }\n        },\n    });\n\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        values,\n        isValid,\n        isSubmitting,\n        resetForm,\n        setValues,\n        setFieldValue,\n        setFieldTouched,\n    } = formik;\n    // const [properties,setProperties] = useState(null);\n    // const [property,setProperty] = useState(null);\n    const [loading, setLoading] = useState(true);\n    // const [landlordId,setLandlordId] = useState('');\n    useEffect(() => {\n        if (match.params.id) {\n            dispatch(fetchUser(match.params.id)).then(({ value: user }) => {\n                delete user.user_alert;\n\n                setValues({\n                    ...user,\n                    role: user.role.id,\n                    // property: user.property.id,\n                });\n\n                // setLandlordId(user.property.landlordId); //房东的ID\n                console.log('property =' + JSON.stringify(user.property));\n\n            });\n        }\n\n    }, [dispatch, loginedUser, match.params.id, setValues]);\n\n\n\n    useEffect(() => {\n        dispatch(fetchRoles());\n    }, [dispatch]);\n\n    // const [unitNo,setUnitNo] = useState('');\n    return (\n        <main>\n            <Header />\n            <div className=\"content\">\n                <CRow>\n                    <CCol md={12}>\n                        <CForm onSubmit={handleSubmit}>\n                            <CCard>\n                                <CCardHeader>User id: {match.params.id}</CCardHeader>\n                                <CCardBody>\n                                    <CCol xs=\"12\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"firstName\">\n                                                First Name\n                                            </CLabel>\n                                            <CInput\n                                                id=\"firstName\"\n                                                name=\"firstName\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.firstName}\n                                                invalid={\n                                                    touched.firstName &&\n                                                    errors.firstName\n                                                }\n                                            />\n                                            <CInvalidFeedback>\n                                                {errors.firstName}\n                                            </CInvalidFeedback>\n                                        </CFormGroup>\n                                    </CCol>\n                                    <CCol xs=\"12\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"lastName\">\n                                                Last Name\n                                            </CLabel>\n                                            <CInput\n                                                id=\"lastName\"\n                                                name=\"lastName\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.lastName}\n                                                invalid={\n                                                    touched.lastName && errors.lastName\n                                                }\n                                            />\n                                            <CInvalidFeedback>\n                                                {errors.lastName}\n                                            </CInvalidFeedback>\n                                        </CFormGroup>\n                                    </CCol>\n                                    <CCol xs=\"12\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"username\">\n                                                User Name\n                                            </CLabel>\n                                            <CInput\n                                                id=\"username\"\n                                                name=\"username\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.username}\n                                                invalid={\n                                                    touched.username && errors.username\n                                                }\n                                            />\n                                            <CInvalidFeedback>\n                                                {errors.username}\n                                            </CInvalidFeedback>\n                                        </CFormGroup>\n                                    </CCol>\n                                    <CCol xs=\"12\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"mobileNumber\">\n                                                Mobile Number\n                                            </CLabel>\n                                            <MobileInput\n                                                setFieldValue={setFieldValue}\n                                                setFieldTouched={setFieldTouched}\n                                                placeholder=\"Mobile Number\"\n                                                name={'mobileNumber'}\n                                                value={values.mobileNumber}\n                                                invalid={\n                                                    touched.mobileNumber &&\n                                                    errors.mobileNumber\n                                                }\n                                            />\n                                            <CInvalidFeedback>\n                                                {errors.mobileNumber}\n                                            </CInvalidFeedback>\n                                        </CFormGroup>\n                                    </CCol>\n                                    <CCol xs=\"12\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"email\">Email</CLabel>\n                                            <CInput\n                                                id=\"email\"\n                                                name=\"email\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.email}\n                                                invalid={touched.email && errors.email}\n                                            />\n                                            <CInvalidFeedback>\n                                                {errors.email}\n                                            </CInvalidFeedback>\n                                        </CFormGroup>\n                                    </CCol>\n\n                                    <CCol xs=\"12\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"role\">Role</CLabel>\n                                            <CSelect\n                                                custom\n                                                id=\"role\"\n                                                name=\"role\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.role}\n                                                invalid={touched.role && errors.role}>\n                                                <option value=\"\">Please select</option>\n                                                {roles.map((r) => (\n                                                    <option key={r.id} value={r.id}>\n                                                        {r.name}\n                                                    </option>\n                                                ))}\n                                            </CSelect>\n                                            <CInvalidFeedback>\n                                                {errors.role}\n                                            </CInvalidFeedback>\n                                        </CFormGroup>\n                                    </CCol>\n                                    <CCol xs=\"12\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"password\">Password</CLabel>\n                                            <CInput\n                                                id=\"password\"\n                                                name=\"password\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.password}\n                                                invalid={\n                                                    touched.password && errors.password\n                                                }\n                                            />\n                                            <CInvalidFeedback>\n                                                {errors.password}\n                                            </CInvalidFeedback>\n                                        </CFormGroup>\n                                    </CCol>\n\n                                </CCardBody>\n                                <CCardFooter className=\"text-right\">\n                                    <CButton\n                                        disabled={!isValid || isSubmitting}\n                                        type=\"submit\"\n                                        size=\"sm\"\n                                        color=\"primary\">\n                                        {isSubmitting ? (\n                                            <CSpinner size=\"sm\" />\n                                        ) : (\n                                            'Submit'\n                                        )}\n                                    </CButton>{' '}\n                                    <CButton\n                                        type=\"reset\"\n                                        size=\"sm\"\n                                        color=\"danger\"\n                                        onClick={() => resetForm()}>\n                                        Reset\n                                    </CButton>\n                                </CCardFooter>\n                            </CCard>\n                        </CForm>\n                    </CCol>\n                </CRow>\n            </div>\n        </main>\n    );\n};\n\nexport default UserEdit;\n","import React from \"react\";\nimport PhoneInput from 'react-phone-input-2';\n\nconst MobileInput = ({\n    value,\n    options,\n    name,\n    invalid,\n    setFieldValue,\n    setFieldTouched,\n    ...rest\n}) => {\n    const classNames = ['custom-react-phone-input', 'form-control'];\n\n    if (invalid) classNames.push('is-invalid');\n\n    return (\n        <PhoneInput\n            type={'number'}\n            country={'us'}\n            name={name}\n            value={value}\n            invalid={invalid}\n            containerClass={classNames.join(' ')}\n            onChange={(value) => setFieldValue(name, value)}\n            onBlur={() => setFieldTouched(name)}\n            {...rest}\n        />\n    );\n};\n\nexport default MobileInput;\n"],"names":["validationSchema","Yup","shape","mobileNumber","required","firstName","lastName","password","min","max","role","match","dispatch","useDispatch","history","useHistory","roles","useSelector","state","admin","loginedUser","auth","me","formik","useFormik","initialValues","id","params","email","username","emailVerified","mobileVerified","createAt","blocked","confirmed","location","onSubmit","values","setSubmitting","process","name","user","tenant","saveTenant","then","push","catch","saveUser","handleChange","handleBlur","handleSubmit","errors","touched","isValid","isSubmitting","resetForm","setValues","setFieldValue","setFieldTouched","useState","useEffect","fetchUser","value","user_alert","console","log","JSON","stringify","property","fetchRoles","className","md","xs","htmlFor","onChange","onBlur","invalid","placeholder","custom","map","r","disabled","type","size","color","onClick","options","rest","classNames","country","containerClass","join"],"sourceRoot":""}