{"version":3,"file":"static/js/9.180a2659.chunk.js","mappings":"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","sources":["admin/components/PropertiesTooltip.js","admin/file-upload/components/FilesUpload.js","admin/file-upload/services/http-common.js","admin/file-upload/services/FileUploadService.js","common/components/Map.js","site/pages/AccountVerification.js","site/layouts/HomeLayout.js","site/pages/property/AddressDetailsStep.js","site/pages/property/AddressInfoStep.js","site/pages/property/SuccessStep.js","site/pages/property/UserInfoStep.js","site/pages/property/PropertyForm.js","site/pages/newHome/ChangeColorForm.js","site/pages/newHome/BindingForm.js","utils/http-common.js","site/pages/newHome/FlyerForm.js","site/pages/newHome/BusinessInfo.js","site/pages/newHome/ShowHighRiseInfo.js","site/pages/newHome/ShowNoDelivery.js","site/pages/newHome/PreferenceForm.js","site/pages/newHome/UploadFlyerForm.js","site/pages/newHome/ImportCustomeForm.js","site/pages/newHome/Showcase.js","site/pages/newHome/Splash.js","site/pages/Home.js"],"sourcesContent":["import { CButton } from '@coreui/react';\nimport React from 'react';\nimport { Button, Col, Row } from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getLoginType } from '../../utils/utils';\n\nconst PropertiesTooltip = ({ id, email, property, cb, changeColor, editMode, cbBinding, cbSendEmail, cbBusiness, user, cbBusinessInfo }) => {\n    console.log('....render property..' + JSON.stringify(property))\n    // const utilsData = useSelector((state) => state.utilsData);\n\n    const loginType = getLoginType();\n    // console.log('..me..' + JSON.stringify(user));\n    if (property.color === 'grey') {\n        return <>\n            <h4>{email}</h4>\n            <Row className=\"justify-content-end\">\n                <Col className='bindingInfo'> Pending Customer </Col>\n                <Col><Button\n                    color={'danger'}\n                    size={'sm'}\n                    onClick={() =>\n                        cb(email, false)\n                    }>\n                    Remove\n                </Button></Col>\n            </Row>\n\n        </>\n    } else {\n        if (editMode) {\n            return <>\n                <h4>{email}</h4>\n\n\n                <Row className=\"justify-content-end\">\n                    {property.bindingName && property.bindingName !== null && property.bindingName !== 'null' ? <Col className='bindingInfo'>Name: {property.bindingName}  </Col> : null}\n                    {property.bindingEmail && property.bindingEmail !== null && property.bindingEmail !== 'null' ? <Col className='bindingInfo'>Email: {property.bindingEmail}   </Col> : null}\n                </Row>\n                <Row className=\"justify-content-end\">\n                    {property.bindingPhone && property.bindingPhone !== null && property.bindingPhone !== 'null' ? <Col className='bindingInfo'>Phone: {property.bindingPhone}  </Col> : null}\n                    {property.bindingOthers && property.bindingOthers !== null && property.bindingOthers !== 'null' ? <Col className='bindingInfo'>Others: {property.bindingOthers}  </Col> : null}\n                </Row>\n\n                <Row className=\"justify-content-end\">\n                    <Col className=\"list-unstyled text-right\">\n                        <li>\n                            {\n                                property.bindingEmail && property.bindingEmail !== null && property.bindingEmail !== 'null' ?\n                                    <>\n                                        <Button size={'sm'} onClick={(e) => cbSendEmail(e, property)} >Send Email</Button> &nbsp;&nbsp;&nbsp;&nbsp;</> : null\n                            }\n\n\n                            {user !== null && user !== undefined && property.id === user.property.id ? <>  <Button\n                                size={'sm'}\n                                onClick={() => cbBusiness(email, property)}>\n                                Business\n                            </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n                            </> : null\n\n                            }\n                            <Button\n                                size={'sm'}\n                                onClick={() => {\n                                    cbBinding(email, property);\n                                }}>\n                                Info\n                            </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n                            {(property.usuage === 1 || property.usuage === 3) && !property.primary ? <Button\n                                color={'danger'}\n                                size={'sm'}\n                                onClick={() =>\n                                    cb(email, false)\n                                }>\n                                Remove\n                            </Button> : null\n                            }\n                            {/* <Button\n                                color={'primary'}\n                                size={'sm'}\n                                onClick={() =>\n                                    changeColor(email)\n                                }>\n                                Color\n                            </Button> &nbsp;&nbsp;&nbsp;&nbsp; */}\n                            {/* {property.primary && loginType ? <Button\n                                color={'primary'}\n                                size={'sm'}\n                                onClick={() =>\n                                    cb(email, true)\n                                }>\n                                Change Location\n                            </Button> : null\n                            } */}\n                        </li>\n                    </Col>\n                </Row>\n\n            </>\n        } else {\n            if (property.is_business) {\n                if (property.connected === \"0\") {\n                    return <>\n                        <h4>{email}</h4>\n\n\n                        <Row className=\"justify-content-end\">\n                            {property.bindingName && property.bindingName !== null && property.bindingName !== 'null' ? <Col className='bindingInfo'>Name: {property.bindingName}  </Col> : null}\n                            {property.bindingEmail && property.bindingEmail !== null && property.bindingEmail !== 'null' ? <Col className='bindingInfo'>Email: {property.bindingEmail}   </Col> : null}\n                        </Row>\n                        <Row className=\"justify-content-end\">\n                            {property.bindingPhone && property.bindingPhone !== null && property.bindingPhone !== 'null' ? <Col className='bindingInfo'>Phone: {property.bindingPhone}  </Col> : null}\n                            {property.bindingOthers && property.bindingOthers !== null && property.bindingOthers !== 'null' ? <Col className='bindingInfo'>Others: {property.bindingOthers}  </Col> : null}\n                        </Row>\n                        <Button\n                            size={'sm'}\n                            onClick={() => {\n                                cbBusinessInfo(email, property);\n                            }}>\n                            Info\n                        </Button>  </>\n                } else {\n\n                    return <>\n                        <h4>{email}</h4>\n\n\n                        <Row className=\"justify-content-end\">\n                            {property.bindingName && property.bindingName !== null && property.bindingName !== 'null' ? <Col className='bindingInfo'>Name: {property.bindingName}  </Col> : null}\n                            {property.bindingEmail && property.bindingEmail !== null && property.bindingEmail !== 'null' ? <Col className='bindingInfo'>Email: {property.bindingEmail}   </Col> : null}\n                        </Row>\n                        <Row className=\"justify-content-end\">\n                            {property.bindingPhone && property.bindingPhone !== null && property.bindingPhone !== 'null' ? <Col className='bindingInfo'>Phone: {property.bindingPhone}  </Col> : null}\n                            {property.bindingOthers && property.bindingOthers !== null && property.bindingOthers !== 'null' ? <Col className='bindingInfo'>Others: {property.bindingOthers}  </Col> : null}\n                        </Row>\n                        <Button\n                            size={'sm'}\n                            onClick={() => {\n                                cbBusinessInfo(email, property);\n                            }}>\n                            Info\n                        </Button>\n                    </>\n\n                }\n            } else {\n                //This is personal ?\n                if (!property.primary) {\n                    return <>\n                        <h4>{email}</h4>\n\n\n                        <Row className=\"justify-content-end\">\n                            {property.bindingName && property.bindingName !== null && property.bindingName !== 'null' ? <Col className='bindingInfo'>Name: {property.bindingName}  </Col> : null}\n                            {property.bindingEmail && property.bindingEmail !== null && property.bindingEmail !== 'null' ? <Col className='bindingInfo'>Email: {property.bindingEmail}   </Col> : null}\n                        </Row>\n                        <Row className=\"justify-content-end\">\n                            {property.bindingPhone && property.bindingPhone !== null && property.bindingPhone !== 'null' ? <Col className='bindingInfo'>Phone: {property.bindingPhone}  </Col> : null}\n                            {property.bindingOthers && property.bindingOthers !== null && property.bindingOthers !== 'null' ? <Col className='bindingInfo'>Others: {property.bindingOthers}  </Col> : null}\n                        </Row>\n                        <Row className=\"justify-content-end\">\n                            <Col className=\"list-unstyled text-right\">\n                                <li>\n                                    <Button\n                                        color={'danger'}\n                                        size={'sm'}\n                                        onClick={() =>\n                                            cb(email, false)\n                                        }>\n                                        Remove\n                                    </Button>\n\n                                </li>\n                            </Col>\n                        </Row>\n                    </>\n                } else {\n                    return <>\n                        <h4>{email}</h4>\n\n\n                        <Row className=\"justify-content-end\">\n                            {property.bindingName && property.bindingName !== null && property.bindingName !== 'null' ? <Col className='bindingInfo'>Name: {property.bindingName}  </Col> : null}\n                            {property.bindingEmail && property.bindingEmail !== null && property.bindingEmail !== 'null' ? <Col className='bindingInfo'>Email: {property.bindingEmail}   </Col> : null}\n                        </Row>\n                        <Row className=\"justify-content-end\">\n                            {property.bindingPhone && property.bindingPhone !== null && property.bindingPhone !== 'null' ? <Col className='bindingInfo'>Phone: {property.bindingPhone}  </Col> : null}\n                            {property.bindingOthers && property.bindingOthers !== null && property.bindingOthers !== 'null' ? <Col className='bindingInfo'>Others: {property.bindingOthers}  </Col> : null}\n                        </Row>\n\n                    </>\n                }\n            }\n        }\n    }\n\n    ;\n};\n\nexport default PropertiesTooltip;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport UploadService from \"../services/FileUploadService\";\nimport { listFiles, updateProperty, updateLatLng } from '../../../redux/actionCreators/adminActionCreators';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst UploadFiles = ({ extension }) => {\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\n  const [progressInfos, setProgressInfos] = useState({ val: [] });\n  const uploadedFiles = useSelector((state) => state.admin.uploadedFiles);\n  const [message, setMessage] = useState([]);\n  const [fileInfos, setFileInfos] = useState([]);\n  const progressInfosRef = useRef(null)\n  const dispatch = useDispatch();\n  const token = useSelector((state) => state.auth.jwt);\n  console.log('extension =' + extension);\n\n\n  useEffect(() => {\n    dispatch(listFiles()).then((response) => {\n      setFileInfos(response.data);\n    });\n  }, []);\n\n  const selectFiles = (event) => {\n    setSelectedFiles(event.target.files);\n    console.log('file selected..' + JSON.stringify(event.target.files));\n    setProgressInfos({ val: [] });\n  };\n\n  const uploadFile = async (idx, file) => {\n    let _progressInfos = [...progressInfosRef.current.val];\n    // dispatch(uploadFiles()).then((response) => {\n    //   setFileInfos(response.data);\n    // });\n    console.log('uploading ..file=' + JSON.stringify(file));\n    return UploadService.upload(file, token, (event) => {\n      _progressInfos[idx].percentage = Math.round(\n        (100 * event.loaded) / event.total\n      );\n      setProgressInfos({ val: _progressInfos });\n    })\n      .then((resp) => {\n        setMessage((prevMessage) => ([\n          ...prevMessage,\n          \"Uploaded the file successfully: \" + file.name,\n        ]));\n        //Do update database for property\n        //resp.url\n        // console.log('upload completed...' + JSON.stringify(resp));\n        const imageData = {\n          id: resp.data[0].id,\n          url: resp.data[0].url\n        }\n        uploadedFiles.push(imageData);\n        const files = Array.from(selectedFiles);\n        idx = idx + 1;\n        if (idx < files.length) {\n          sleep(500);\n          uploadFile(idx, files[idx]);\n        } else {\n          setMessage((prevMessage) => ([\n            ...prevMessage,\n            \"Uploaded Completed!\",\n          ]));\n        }\n\n      })\n      .catch((error) => {\n        console.log('upload file error..' + JSON.stringify(error));\n        _progressInfos[idx].percentage = 0;\n        setProgressInfos({ val: _progressInfos });\n\n        setMessage((prevMessage) => ([\n          ...prevMessage,\n          \"Could not upload the file: \" + file.name,\n        ]));\n      });\n  };\n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n  const uploadSelectedFiles = (event) => {\n    event.preventDefault();\n    const files = Array.from(selectedFiles);\n    console.log('files...' + JSON.stringify(files));\n\n    let _progressInfos = files.map(file => ({ percentage: 0, fileName: file.name }));\n\n    progressInfosRef.current = {\n      val: _progressInfos,\n    }\n\n    //Start upload\n    uploadFile(0, files[0]);\n\n    // const uploadPromises = files.map((file, i) =>{ \n    //   uploadFile(i, file);\n    //   sleep(500);//wait for database update\n    // });\n\n    // Promise.all(uploadPromises)\n    //   .then((files) => {\n    //     setFileInfos(files.data);\n    //     console.log('all uploads...' + files.data);\n    //   });\n\n    // setMessage([]);\n  };\n\n  return (\n    <div>\n      {progressInfos && progressInfos.val.length > 0 &&\n        progressInfos.val.map((progressInfo, index) => (\n          <div className=\"mb-2\" key={index}>\n            <span>{progressInfo.fileName}</span>\n            <div className=\"progress\">\n              <div\n                className=\"progress-bar progress-bar-info\"\n                role=\"progressbar\"\n                aria-valuenow={progressInfo.percentage}\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                style={{ width: progressInfo.percentage + \"%\" }}\n              >\n                {progressInfo.percentage}%\n              </div>\n            </div>\n          </div>\n        ))}\n\n      <div className=\"row my-3\">\n        <div className=\"col-8\">\n          <label className=\"btn btn-default p-0\">\n            <input type=\"file\" accept={extension} multiple onChange={selectFiles} />\n          </label>\n        </div>\n\n        <div className=\"col-4\">\n          <button\n            className=\"btn btn-success btn-sm\"\n            disabled={!selectedFiles}\n            onClick={uploadSelectedFiles}\n          >\n            Upload\n          </button>\n        </div>\n      </div>\n\n      {message.length > 0 && (\n        <div className=\"alert alert-secondary\" role=\"alert\">\n          <ul>\n            {message.map((item, i) => {\n              return <li key={i}>{item}</li>;\n            })}\n          </ul>\n        </div>\n      )}\n\n    </div>\n  );\n};\n\nexport default UploadFiles;\n","import axios from \"axios\";\n\nexport default axios.create({\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n\n// export const fetchUser = (id) => {\n//   return (dispatch, getState) => {\n//       const token = getState().auth.jwt;\n\n//       return dispatch({\n//           type: ADMIN_FETCH_USER,\n//           payload: fetch(`${SERVICE_URL}/users/${id}?tenant=${PARTNER_TOKEN}`, {\n//               headers: {\n//                   Accept: 'application/json',\n//                   'Content-Type': 'application/json',\n//                   Authorization: `Bearer ${token}`,\n//               },\n//               method: 'GET',\n//           })\n//               .then((r) => r.json())\n//               .then((responseData) => {\n//                   if (responseData.statusCode >= 300) {\n//                       return Promise.reject(responseData);\n//                   } else {\n//                       return responseData;\n//                   }\n//               }),\n//       });\n//   };\n// };\n","import http from \"./http-common\";\nimport {SERVICE_URL} from '../../../constants';\n// const { listFiles,uploadFiles} = require('../../../redux/actionCreators/adminActionCreators');\nconst upload = (file,token, onUploadProgress) => {\n  let formData = new FormData();\n\n  formData.append(\"files\", file);\n\n  return http.post(SERVICE_URL+\"/upload\", formData, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n      Authorization: `Bearer ${token}`,\n    },\n    onUploadProgress,\n  });\n};\n\nconst getFiles = (token) => {\n  return http.get(\n    SERVICE_URL+\"/upload/files?_limit=10&_start=0&_sort=updatedAt:DESC\");\n  // return listFiles();\n};\n\nconst FileUploadService = {\n  upload,\n  getFiles,\n};\n\nexport default FileUploadService; \n","import mapboxgl from 'mapbox-gl';\nimport React, {\n    useContext,\n    useEffect,\n    useLayoutEffect,\n    useRef,\n    useState,\n} from \"react\";\nimport MapContext from '../contexts/MapContext/MapContext';\nimport MapLegend from './MapLegend';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_GL_ACCESS_TOKEN;\n\nconst Map = ({className}) => {\n    const [map, setMap] = useState(null);\n    const mapContainer = useRef(null);\n\n    const context = useContext(MapContext);\n\n    useLayoutEffect(() => {\n        document.onresize = () => {\n            context.map.resize();\n        };\n    });\n\n    useEffect(() => {\n        const initializeMap = ({setMap, mapContainer}) => {\n            const map = new mapboxgl.Map({\n                container: mapContainer.current,\n                style: 'mapbox://styles/mapbox/streets-v11',\n                center: [-79.4164156, 43.63982499999999],\n                zoom: 7,\n                attributionControl: false,\n            });\n            var nav = new mapboxgl.NavigationControl({\n                showCompass: false,\n                showZoom: true\n              });\n        \n            map.addControl(nav, \"bottom-right\");\n            map.on('load', () => {\n                setMap(map);\n                context.setMap(map);\n                map.resize();\n            });\n            console.log('Map Init......');\n        };\n\n        if (!map) initializeMap({setMap, mapContainer});\n    }, [context, map]);\n\n    return (\n        <div className={`d-flex flex-fill ${className ? className : ''}`}>\n            <MapLegend />\n            <div\n                className=\"flex-fill\"\n                ref={(el) => (mapContainer.current = el)}\n            />\n        </div>\n    );\n};\n\nexport default Map;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Button, Modal, ModalBody, Row } from 'reactstrap';\nimport { toggleVerificationModal } from '../../redux/actionCreators/appActionCreators';\nimport EmailVerification from './accountVerification/EmailVerification';\nimport MobileVerification from './accountVerification/MobileVerification';\n\nconst AccountVerification = () => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const showVerificationModal = useSelector(\n        (state) => state.app.showVerificationModal,\n    );\n\n    const registrationUser = useSelector((state) => state.registerForm.user);\n    let user = useSelector((state) => state.auth.user);\n    // const user1 = useSelector((state) => state.auth.user);\n    // const state = useSelector((state) => state);\n    // console.log('..state..' + JSON.stringify(state));\n    if (registrationUser) return null;\n    // if (user === null || user === undefined) {\n    //     user = user1;\n    // }\n\n    if (!user) return null;\n\n    const userHasEmail = user.username !== user.email;\n\n    const userVerified =\n        (userHasEmail && user.emailVerified && user.mobileVerified) ||\n        (!userHasEmail && user.mobileVerified);\n\n    if (!showVerificationModal) return null;\n\n    return (\n        <Modal\n            size=\"lg\"\n            isOpen={true}\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered>\n            <ModalBody>\n                {!userVerified && (\n                    <div className=\"pb-3\">\n                        Please verify your email and mobile phone to start using\n                        website.\n                    </div>\n                )}\n                <EmailVerification />\n                <MobileVerification />\n                {userVerified && (\n                    <>\n                        <div className={'success mt-5 mb-3'}>\n                            Verification Successful!\n                        </div>\n                        <Button\n                            block\n                            color={'success'}\n                            onClick={() => {\n                                try {\n                                    window.ReactNativeWebView.postMessage(\n                                        JSON.stringify({ action: 'goBack' }),\n                                    );\n                                } catch (e) { }\n\n                                dispatch(toggleVerificationModal());\n                                localStorage.setItem(\"show_login_tips\", 2);\n                                setTimeout(function () {\n                                    // location.reload(true);\n                                    history.push('/logout');\n                                }, 500)\n                            }}>\n                            Login and Complete Business Profile\n                        </Button>\n                    </>\n                )}\n\n                {!userVerified && (\n                    <Row noGutters className=\"justify-content-end\">\n                        <Button\n                            color={'link'}\n                            size={'sm'}\n                            onClick={() => {\n                                history.push('/logout');\n                            }}>\n                            Logout\n                        </Button>\n                    </Row>\n                )}\n            </ModalBody>\n        </Modal>\n    );\n};\n\nexport default AccountVerification;\n","import React from \"react\";\n\nimport Footer from '../pages/newHome/Footer';\nimport Header from '../pages/newHome/Header';\nimport AccountVerification from \"../pages/AccountVerification\";\nconst HomeLayout = ({children}) => {\n    return (\n        <main>\n            <Header />\n            <div className=\"content\">{children}</div>\n            <Footer />\n            <AccountVerification />\n        </main>\n    );\n};\n\nexport default HomeLayout;\n","import { useFormik } from 'formik';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    Button,\n    Col,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Spinner,\n} from 'reactstrap';\nimport * as Yup from 'yup';\nimport {\n    resetRegistrationForm,\n    setPropertyRegistrationForm,\n} from '../../../redux/actionCreators/registrationActionCreators';\n\nconst validationSchema = Yup.object().shape({});\n\nconst AddressDetailsStep = ({ wizardInstance }) => {\n    const dispatch = useDispatch();\n    const { address, rural } = useSelector((state) => state.registerForm);\n    const utilsData = useSelector((state) => state.utilsData);\n    address.steps = 1;\n    const formik = useFormik({\n        initialValues: address,\n        validationSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n\n            dispatch(\n                setPropertyRegistrationForm({\n                    address: {\n                        ...address,\n                        ...values,\n                    },\n                }),\n            );\n\n            wizardInstance.nextStep();\n        },\n    });\n\n    const {\n        handleChange,\n        handleBlur: handleBlurOrig,\n        handleSubmit,\n        errors,\n        touched,\n        values,\n        isValid,\n        isSubmitting,\n    } = formik;\n\n    const handleBlur = (...params) => {\n        dispatch(\n            setPropertyRegistrationForm({\n                address: {\n                    ...address,\n                    ...values,\n                },\n            }),\n        );\n        handleBlurOrig(...params);\n    };\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Col>\n                <Input type=\"hidden\" value={1} name=\"steps\" />\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"postalCode\">Postal Code</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"postalCode\"\n                        id=\"postalCode\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.postalCode}\n                        invalid={touched.postalCode && errors.postalCode}\n                        placeholder=\"\"\n                    />\n                    <FormFeedback>{errors.postalCode}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"postalCode\">Street Number</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"streetNumber\"\n                        id=\"streetNumber\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.streetNumber}\n                        invalid={touched.streetNumber && errors.streetNumber}\n                        placeholder=\"\"\n                    />\n                    <FormFeedback>{errors.streetNumber}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"route\">\n                        Street /Route / Lot No / Plot No / Local Identifier\n                    </Label>\n                    <Input\n                        type=\"text\"\n                        name=\"route\"\n                        id=\"route\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.route}\n                        invalid={touched.route && errors.route}\n                        placeholder=\"\"\n                    />\n                    <FormFeedback>{errors.route}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"route\"> City / Locality</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"locality\"\n                        id=\"locality\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.locality}\n                        invalid={touched.locality && errors.locality}\n                        placeholder=\"\"\n                    />\n                    <FormFeedback>{errors.locality}</FormFeedback>\n                </FormGroup>\n            </Col>\n            {rural && (\n                <>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"lotNo\">Lot No</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"lotNo\"\n                                id=\"lotNo\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.lotNo}\n                                invalid={touched.lotNo && errors.lotNo}\n                                placeholder=\"\"\n                            />\n                            <FormFeedback>{errors.lotNo}</FormFeedback>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"plotNo\">Plot No</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"plotNo\"\n                                id=\"plotNo\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.plotNo}\n                                invalid={touched.plotNo && errors.plotNo}\n                                placeholder=\"\"\n                            />\n                            <FormFeedback>{errors.plotNo}</FormFeedback>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"region\">Region</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"region\"\n                                id=\"region\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.region}\n                                invalid={touched.region && errors.region}\n                                placeholder=\"\"\n                            />\n                            <FormFeedback>{errors.region}</FormFeedback>\n                        </FormGroup>\n                    </Col>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"province\">Province</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"province\"\n                                id=\"province\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.province}\n                                invalid={touched.province && errors.province}\n                                placeholder=\"\"\n                            />\n                            <FormFeedback>{errors.province}</FormFeedback>\n                        </FormGroup>\n                    </Col>\n                </>\n            )}\n            <Col>\n                <FormGroup>\n                    <Label for=\"route\">Province / State</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"city\"\n                        id=\"city\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.city}\n                        invalid={touched.city && errors.city}\n                        placeholder=\"\"\n                    />\n                    <FormFeedback>{errors.city}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"route\">Country</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"country\"\n                        id=\"country\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.country}\n                        invalid={touched.country && errors.country}\n                        placeholder=\"\"\n                    />\n                    <FormFeedback>{errors.country}</FormFeedback>\n                </FormGroup>\n            </Col>\n\n            <Col>\n                <Button block disabled={!isValid || isSubmitting}>\n                    {isSubmitting ? <Spinner size={'sm'} /> : 'Next'}\n                </Button>\n            </Col>\n            <Col>\n                <Button\n                    className=\"mt-1 mb-5\"\n                    color={'danger'}\n                    block\n                    onClick={() => {\n                        utilsData.connectToMerchantId = 0;\n                        dispatch(resetRegistrationForm())\n                    }}>\n                    Cancel\n                </Button>\n            </Col>\n            {utilsData.connectToMerchantId > 0 ?\n                <>\n                    <Col>\n                        <Label for=\"route\"> ---------------- OR ----------------- </Label>\n                    </Col>\n                    <Col>\n                        <Button\n                            className=\"mt-1 mb-5\"\n\n                            block\n                            onClick={() => {\n                                address.noDelivery = 1;\n                                address.property = utilsData.selectedProperty;\n                                wizardInstance.goToStep(3);\n                                // utilsData.connectToMerchantId = 0;\n                                // dispatch(resetRegistrationForm())\n                            }}>\n                            No Delivery\n                        </Button>\n                    </Col>\n                </> : null}\n        </Form>\n    );\n};\n\nexport default AddressDetailsStep;\n","import { useFormik } from 'formik';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    Button,\n    Col,\n    Collapse,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Spinner,\n} from 'reactstrap';\nimport { propertySchema } from '../../../common/validation/propertySchema';\nimport {\n    resetRegistrationForm,\n    setPropertyRegistrationForm,\n    isPropertyRegistered\n} from '../../../redux/actionCreators/registrationActionCreators';\nimport {\n    generateEmail,\n} from '../../../utils/propertyUtils';\n// import { isAppEmbedWebview } from '../../../utils/utils';\n\nconst AddressInfoStep = ({ wizardInstance }) => {\n    const dispatch = useDispatch();\n    const { address } = useSelector((state) => state.registerForm);\n    const utilsData = useSelector((state) => state.utilsData);\n    address.steps = 2;\n    const emailDisplay = generateEmail(address);\n    const formik = useFormik({\n        initialValues: {\n            primaryAddress: true,\n            hightRiseOrCommercial: false,\n            propertyName: '',\n            totalFloors: '1',\n            totalUnitsEachFloor: '1',\n            addressType: '',\n            settlementType: '',\n            unitNo: '',\n        },\n        isInitialValid: false,\n        validationSchema: propertySchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n\n            let email = generateEmail(address);\n            console.log('email=' + email);\n            // if this is hightRiseOrCommercial, check property register\n            if (values.hightRiseOrCommercial) {\n                dispatch(isPropertyRegistered(email)).then(result => {\n                    // console.log('check property registration=' + JSON.stringify( result));\n                    if (result.value.registered) {\n                        //reject with error\n                        setErrorMessage('This address is already registered! Please contact property management');\n                        setSubmitting(false);\n                    } else {\n                        //continue register\n                        if (values.settlementType === 'lowRise') {\n                            values.unitNo = '';\n                        }\n\n                        const { unitNo, ...otherValues } = values;\n\n                        dispatch(\n                            setPropertyRegistrationForm({\n                                ...otherValues,\n                                address: {\n                                    ...address,\n                                    unitNo,\n                                },\n                            }),\n                        );\n\n                        wizardInstance.nextStep();\n                    }\n                }).catch(error => {\n                    console.log('check property error' + error);\n                    setErrorMessage(JSON.stringify(error));\n                    setSubmitting(false);\n                });\n            } else if (values.settlementType == 'highRise') {\n                //check unit number register ?\n                email = values.unitNo + '-' + email;\n                dispatch(isPropertyRegistered(email)).then(result => {\n                    // console.log('check property registration=' + JSON.stringify( result));\n                    if (result.value.registered) {\n                        //reject with error\n                        setErrorMessage('This address is already registered! Please contact anything@alphc.com');\n                        setSubmitting(false);\n                    } else {\n                        //continue register\n                        if (values.settlementType === 'lowRise') {\n                            values.unitNo = '';\n                        }\n                        const { unitNo, ...otherValues } = values;\n                        dispatch(\n                            setPropertyRegistrationForm({\n                                ...otherValues,\n                                address: {\n                                    ...address,\n                                    unitNo,\n                                },\n                            }),\n                        );\n\n                        wizardInstance.nextStep();\n                    }\n                }).catch(error => {\n                    console.log('check property error' + error);\n                    setErrorMessage(JSON.stringify(error));\n                    setSubmitting(false);\n                });\n\n            } else {\n                if (values.settlementType === 'lowRise') {\n                    values.unitNo = '';\n                }\n\n                const { unitNo, ...otherValues } = values;\n\n                dispatch(\n                    setPropertyRegistrationForm({\n                        ...otherValues,\n                        address: {\n                            ...address,\n                            unitNo,\n                        },\n                    }),\n                );\n\n                wizardInstance.nextStep();\n            }\n        },\n    });\n    // Modal open state\n\n    const [errorMessage, setErrorMessage] = useState('');\n\n\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        isValid,\n        isSubmitting,\n        setFieldValue,\n        values,\n    } = formik;\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Col>\n                <Input type=\"hidden\" value={2} name=\"steps\" />\n            </Col>\n            <Col>\n                <FormGroup tag=\"fieldset\">\n                    <FormGroup check>\n                        <Label check>\n                            <Input\n                                type=\"checkbox\"\n                                name=\"primaryAddress\"\n                                onChange={(e) => {\n                                    setFieldValue(\n                                        'primaryAddress',\n                                        e.currentTarget.checked,\n                                    );\n                                }}\n                                checked={values.primaryAddress}\n                                onBlur={handleBlur}\n                                invalid={\n                                    touched.primaryAddress &&\n                                    errors.primaryAddress\n                                }\n                            />\n                            This is my primary address\n                        </Label>\n\n                        {/* <Label check>\n                            <Input\n                                type=\"checkbox\"\n                                name=\"hightRiseOrCommercial\"\n                                onChange={(e) => {\n                                    setFieldValue(\n                                        'hightRiseOrCommercial',\n                                        e.currentTarget.checked,\n                                    );\n                                }}\n                                checked={values.hightRiseOrCommercial}\n                                onBlur={handleBlur}\n                                invalid={\n                                    touched.hightRiseOrCommercial &&\n                                    errors.hightRiseOrCommercial\n                                }\n                            />\n                            High Rise residential/Commercial use ONLY\n                        </Label> */}\n                    </FormGroup>\n                </FormGroup>\n            </Col>\n            <Col>\n                <Collapse isOpen={values.hightRiseOrCommercial === false}>\n\n                    <FormGroup tag=\"fieldset\">\n                        <Label for=\"postalCode\">Address Type</Label>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={'residential'}\n                                    invalid={\n                                        touched.addressType && errors.addressType\n                                    }\n                                />\n                                Residential\n                            </Label>\n                        </FormGroup>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={'commercial'}\n                                    invalid={\n                                        touched.addressType && errors.addressType\n                                    }\n                                />\n                                Commercial\n                            </Label>\n                        </FormGroup>\n                        {/* <FormGroup check>\n                        <Label check>\n                            <Input\n                                type=\"radio\"\n                                name=\"addressType\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={'Incorporate'}\n                                invalid={\n                                    touched.addressType && errors.addressType\n                                }\n                            />\n                            Incorporate\n                        </Label>\n                    </FormGroup> */}\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={'School'}\n                                    invalid={\n                                        touched.addressType && errors.addressType\n                                    }\n                                />\n                                School\n                            </Label>\n                        </FormGroup>\n                    </FormGroup>\n                </Collapse>\n            </Col>\n            <Col>\n                <Collapse isOpen={values.addressType === 'Incorporate' || values.addressType === 'School'}>\n                    <FormGroup>\n                        <Label for=\"lblPropertyName\">Name</Label>\n                        <Input\n                            type=\"text\"\n                            name=\"propertyName\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.propertyName}\n                            invalid={touched.propertyName && errors.propertyName}\n                        />\n                        <FormFeedback>{errors.propertyName}</FormFeedback>\n                    </FormGroup>\n                </Collapse>\n            </Col>\n            <Col>\n                <FormGroup tag=\"fieldset\">\n                    <Label for=\"postalCode\">Settlement Type</Label>\n                    <Collapse isOpen={values.hightRiseOrCommercial === false}>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"settlementType\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={'lowRise'}\n                                    invalid={\n                                        touched.settlementType &&\n                                        errors.settlementType\n                                    }\n                                />\n                                Single Dwelling\n                            </Label>\n                        </FormGroup>\n                    </Collapse>\n                    <FormGroup check>\n                        <Label check>\n                            <Input\n                                type=\"radio\"\n                                name=\"settlementType\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={'highRise'}\n                                invalid={\n                                    touched.settlementType &&\n                                    errors.settlementType\n                                }\n                            />\n                            High Rise / Multiple Units\n                        </Label>\n                    </FormGroup>\n                </FormGroup>\n            </Col>\n            <Col>\n                <Collapse isOpen={values.settlementType === 'highRise'}>\n                    {values.hightRiseOrCommercial ?\n                        <Col>\n                            <FormGroup>\n                                <FormGroup>\n                                    <Label for=\"totalFloors\">Total Floors</Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"totalFloors\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.totalFloors}\n                                        invalid={touched.totalFloors && errors.totalFloors}\n                                    />\n                                    <FormFeedback>{errors.totalFloors}</FormFeedback>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label for=\"totalUnitsEachFloor\">Total Units each floor</Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"totalUnitsEachFloor\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.totalUnitsEachFloor}\n                                        invalid={touched.totalUnitsEachFloor && errors.totalUnitsEachFloor}\n                                    />\n                                    <FormFeedback>{errors.totalUnitsEachFloor}</FormFeedback>\n                                </FormGroup>\n                            </FormGroup>\n                        </Col> :\n                        <Col>\n                            <FormGroup>\n                                <Label for=\"postalCode\">Unit No</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"unitNo\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.unitNo}\n                                    invalid={touched.unitNo && errors.unitNo}\n                                />\n                                <FormFeedback>{errors.unitNo}</FormFeedback>\n                            </FormGroup>\n                        </Col>\n                    }\n                </Collapse>\n            </Col>\n            <Col>\n                <Collapse isOpen={errorMessage.length > 0}>\n                    <Label color={'danger'} for=\"errorMessage\">{errorMessage}</Label>\n                </Collapse>\n            </Col>\n            <Col>\n                <Button block disabled={!isValid || isSubmitting}>\n                    {isSubmitting ? <Spinner size={'sm'} /> : 'Next'}\n                </Button>\n            </Col>\n\n            <Col>\n                <Button\n                    className=\"mt-1 mb-5\"\n                    color={'danger'}\n                    block\n                    onClick={() => {\n                        utilsData.connectToMerchantId = 0;\n                        dispatch(resetRegistrationForm());\n                    }}>\n                    Cancel\n                </Button>\n            </Col>\n            {/* {    isAppEmbedWebview() ?        \n           <Col>\n           <div className={'info-window'}>\n            <div>Your AlphC contact email:</div>\n                <h4 style={{color:'#cccccc'}}>{emailDisplay}@alphc.com</h4>\n                <div>Patented Technology</div>\n            </div>\n           </Col>:null\n} */}\n        </Form>\n    );\n};\n\nexport default AddressInfoStep;\n","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport {Button, Form} from 'reactstrap';\nimport {toggleVerificationModal} from '../../../redux/actionCreators/appActionCreators';\nimport {resetRegistrationForm} from '../../../redux/actionCreators/registrationActionCreators';\nimport {useHistory} from 'react-router';\nconst SuccessStep = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    return (\n        <>\n            <Form>\n                <div className={'success mt-5 mb-3'}>\n                    Registration Successful!\n                </div>\n                <Button\n                    block\n                    color={'success'}\n                    onClick={() => {\n                        \n                        if (window.ReactNativeWebView)\n                        //if(1===1)\n                        {\n                            //To Fix app no active window\n                            setTimeout(\n                            history.push(\n                                `/mobile-verify`,\n                            ),1000);\n                        }else{\n                            dispatch(resetRegistrationForm());\n                            dispatch(toggleVerificationModal());\n                        }\n                    }}>\n                    Verify your account\n                </Button>\n            </Form>\n        </>\n    );\n};\n\nexport default SuccessStep;\n","import { useFormik } from 'formik';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    Button,\n    Col,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Spinner,\n} from 'reactstrap';\nimport * as Yup from 'yup';\nimport MobileInput from '../../../common/components/MobileInput';\nimport {\n    registerUser,\n    resetRegistrationForm,\n    setPropertyRegistrationForm,\n} from '../../../redux/actionCreators/registrationActionCreators';\nimport { generateEmail } from '../../../utils/propertyUtils';\nimport { getMe } from '../../../redux/actionCreators/authActionCreators';\nimport { toastr } from 'react-redux-toastr';\n\nconst validationSchema = Yup.object().shape({\n    mobileNumber: Yup.string().required('Mobile number is required'),\n    email: Yup.string().required('Email is required')\n        .email('Invalid email'),\n    companyName: Yup.string(),\n    lastName: Yup.string(),\n    // email: Yup.string().email('Invalid email'),\n    password: Yup.string()\n        .min(6, 'Password is  too Short!')\n        .max(16, 'Password is too Long!')\n        .required('Password is required'),\n    passwordConfirmation: Yup.string()\n        .required('Password confirmation is required')\n        .oneOf([Yup.ref('password'), null], 'Passwords must match'),\n    consent: Yup.boolean()\n        .required('Confirm you have read Privacy Policy and Terms of Use')\n        .oneOf(\n            [true],\n            'Confirm you have read Privacy Policy and Terms of Use.',\n        ),\n    // liability: Yup.boolean()\n    //     .required('Confirm you have read above instruction')\n    //     .oneOf(\n    //         [true],\n    //         'Confirm you have read above instruction.',\n    //     )\n\n});\n\nconst UserInfoStep = ({ wizardInstance }) => {\n    const dispatch = useDispatch();\n\n    const registerForm = useSelector((state) => state.registerForm);\n    const utilsData = useSelector((state) => state.utilsData);\n    const { address } = useSelector((state) => state.registerForm);\n    address.steps = 3;\n\n    const formik = useFormik({\n        initialValues: {\n            mobileNumber: '',\n            companyName: '',\n            lastName: '',\n            email: '',\n            password: '',\n            passwordConfirmation: '',\n            consent: false,\n            liability: true\n        },\n        isInitialValid: false,\n        validationSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n\n            const newUser = {\n                property: {\n                    email: generateEmail(registerForm.address),\n                    rural: registerForm.rural,\n                    primaryAddress: registerForm.primaryAddress,\n                    addressType: registerForm.addressType,\n                    hightRiseOrCommercial: registerForm.hightRiseOrCommercial,\n                    totalFloors: registerForm.totalFloors,\n                    propertyName: registerForm.propertyName,\n                    totalUnitsEachFloor: registerForm.totalUnitsEachFloor,\n                    settlementType: registerForm.settlementType,\n                    unitNo: registerForm.unitNo,\n                    location: {\n                        longitude: registerForm.longitude,\n                        latitude: registerForm.latitude,\n                    },\n                    ...registerForm.address,\n                },\n                mobileNumber: values.mobileNumber,\n                companyName: values.companyName,\n                lastName: values.lastName,\n                email: values.email,\n                username: values.email,\n                password: values.password,\n                provider: 'local',\n                connectToMerchantId: utilsData.connectToMerchantId\n            };\n\n            dispatch(registerUser(newUser))\n                .then(() => {\n                    dispatch(getMe(2)).then(resp => {\n                        console.log('.get me.resp..' + JSON.stringify(resp));\n                        dispatch(\n                            setPropertyRegistrationForm({\n                                user: newUser,\n                                me: resp.value,\n\n                            }),\n                        ).then(() => {\n                            wizardInstance.nextStep();\n                        });\n                    }).catch(error => {\n                        toastr.error('Error', \"Mobile Or Password doesn't match, Please verify!\");\n                    });\n\n                })\n                .catch((response) => {\n                    if (response.message && response.message[0].messages) {\n                        switch (response.message[0].messages[0].id) {\n                            case 'Auth.form.error.mobileNumber.taken':\n                                setFieldError(\n                                    'mobileNumber',\n                                    'Mobile No. already registered',\n                                );\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                })\n                .finally(() => {\n                    setSubmitting(false);\n                });\n        },\n    });\n\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        values,\n        setFieldError,\n        isValid,\n        isSubmitting,\n        setFieldValue,\n        setFieldTouched,\n    } = formik;\n    const [eye, seteye] = useState(true);\n    const [password, setpassword] = useState(\"password\");\n    const [type, settype] = useState(false);\n    const Eye = () => {\n        if (password == \"password\") {\n            setpassword(\"text\");\n            seteye(false);\n            settype(true);\n        }\n        else {\n            setpassword(\"password\");\n            seteye(true);\n            settype(false);\n        }\n    }\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Col>\n                <FormGroup>\n                    <Label for=\"mobileNumber\">Mobile Number</Label>\n                    <MobileInput\n                        setFieldValue={setFieldValue}\n                        setFieldTouched={setFieldTouched}\n                        placeholder=\"Mobile Number\"\n                        name={'mobileNumber'}\n                        value={values.mobileNumber}\n                        invalid={touched.mobileNumber && errors.mobileNumber}\n                    />\n                    <FormFeedback>{errors.mobileNumber}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"companyName\">Company Name</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"companyName\"\n                        id=\"companyName\"\n                        value={values.companyName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        invalid={touched.companyName && errors.companyName}\n                    />\n                    <FormFeedback>{errors.companyName}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"lastName\">Name</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"lastName\"\n                        id=\"lastName\"\n                        value={values.lastName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        invalid={touched.lastName && errors.lastName}\n                    />\n                    <FormFeedback>{errors.lastName}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Label for=\"email\">Email</Label>\n                    <Input\n                        type=\"email\"\n                        name=\"email\"\n                        id=\"email\"\n                        value={values.email}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        invalid={touched.email && errors.email}\n                        placeholder=\"myemail@email.com\"\n                    />\n                    <FormFeedback>{errors.email}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup className='passwordFormGroup'>\n                    <Label for=\"password\">Password</Label>\n                    <Input\n                        type={password}\n                        name=\"password\"\n                        id=\"password\"\n                        value={values.password}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        invalid={touched.password && errors.password}\n                        placeholder=\"********\"\n                    /><i onClick={Eye} className={`fa ${eye ? \"fa-eye-slash\" : \"fa-eye\"}`}></i>\n                    <FormFeedback>{errors.password}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup className='passwordFormGroup'>\n                    <Label for=\"passwordConfirmation\">\n                        Password Confirmation\n                    </Label>\n                    <Input\n                        type={password}\n                        name=\"passwordConfirmation\"\n                        id=\"passwordConfirmation\"\n                        value={values.passwordConfirmation}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        invalid={\n                            touched.passwordConfirmation &&\n                            errors.passwordConfirmation\n                        }\n                        placeholder=\"********\"\n                    /><i onClick={Eye} className={`fa ${eye ? \"fa-eye-slash\" : \"fa-eye\"}`}></i>\n                    <FormFeedback>{errors.passwordConfirmation}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Input type=\"hidden\" invalid={errors.invalidProperty} />\n                    <FormFeedback>{errors.invalidProperty}</FormFeedback>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup tag=\"fieldset\">\n                    <FormGroup check>\n                        <Label check>\n                            <Input\n                                type=\"checkbox\"\n                                name=\"consent\"\n                                onChange={(e) => {\n                                    setFieldTouched('consent');\n                                    setFieldValue(\n                                        'consent',\n                                        e.currentTarget.checked,\n                                    );\n                                }}\n                                checked={values.consent}\n                                onBlur={handleBlur}\n                                invalid={touched.consent && errors.consent}\n                            />\n                            I've read{' '}\n                            <a target={'_blank'} href=\"/privacy-policy\">Privacy Policy</a> and{' '}\n                            <a target={'_blank'} href=\"/terms-of-use\">Terms of Use</a>.\n                        </Label>\n                        <Label check>\n                            {/* <Input\n                                type=\"checkbox\"\n                                name=\"liability\"\n                                onChange={(e) => {\n                                    setFieldTouched('liability');\n                                    setFieldValue(\n                                        'liability',\n                                        e.currentTarget.checked,\n                                    );\n                                }}\n                                checked={values.liability}\n                                onBlur={handleBlur}\n                                invalid={touched.liability && errors.liability}\n                            /> */}\n                            {/* Disclaimer: In an emergency contact your local first responder directly. AlphC E-Alert App is only an aid and is not intended to replace first responders. First responders can license this technology to increase the safety of your community. */}\n                        </Label>\n\n                    </FormGroup>\n                </FormGroup>\n            </Col>\n            <Col>\n                <FormGroup>\n                    <Input type=\"hidden\" invalid={errors.consent} />\n                    <FormFeedback>{errors.consent}</FormFeedback>\n                </FormGroup>\n            </Col>\n            {/* <Col>\n                <FormGroup>\n                    <Input type=\"hidden\" invalid={errors.liability} />\n                    <FormFeedback>{errors.liability}</FormFeedback>\n                </FormGroup>\n            </Col> */}\n            <Col>\n                <Button\n                    block\n                    color={'success'}\n                    disabled={!isValid || isSubmitting}>\n                    {isSubmitting ? <Spinner size={'sm'} /> : 'Create Account'}\n                </Button>\n            </Col>\n            <Col>\n                <Button\n                    className=\"mt-1 mb-5\"\n                    color={'danger'}\n                    block\n                    onClick={() => {\n                        utilsData.connectToMerchantId = 0;\n                        dispatch(resetRegistrationForm());\n                    }}>\n                    Cancel\n                </Button>\n            </Col>\n        </Form>\n    );\n};\n\nexport default UserInfoStep;\n","import React, {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport StepWizard from 'react-step-wizard';\nimport {Col} from 'reactstrap';\nimport AddressDetailsStep from './AddressDetailsStep';\nimport AddressInfoStep from './AddressInfoStep';\nimport SuccessStep from './SuccessStep';\nimport UserInfoStep from './UserInfoStep';\n\nconst PropertyForm = () => {\n    const [transitions] = useState({\n        enterRight: 'animated enterRight',\n        enterLeft: 'animated enterLeft',\n        exitRight: 'animated exitRight',\n        exitLeft: 'animated exitLeft',\n        intro: 'animated intro',\n    });\n    const [wizardInstance, setWizardInstance] = useState();\n\n    return (\n        <Col md={3} sm={12} xs={12} className=\"overlay-form-container\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n\n            <StepWizard\n                className={'step-wizard'}\n                transitions={transitions}\n                isLazyMount={true}\n                instance={(instance) => setWizardInstance(instance)}>\n                <AddressDetailsStep wizardInstance={wizardInstance} />\n                <AddressInfoStep wizardInstance={wizardInstance} />\n                <UserInfoStep wizardInstance={wizardInstance} />\n                <SuccessStep wizardInstance={wizardInstance} />\n            </StepWizard>\n        </Col>\n    );\n};\n\nexport default PropertyForm;\n","import { MapMarkerUrls } from '../../../constants';\nimport React, { useState, useCallback } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Row,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { changePropertyColor, cancelChangePropertyColor } from '../../../redux/actionCreators/appActionCreators';\nimport { useHistory } from 'react-router';\nconst ChangeColorForm = ({ callback }) => {\n\n    const utilsData = useSelector((state) => state.utilsData);\n    console.log('...utilsData..' + JSON.stringify(utilsData));\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [color, setColor] = useState('default');\n    const user = useSelector((state) => state.auth.me);\n\n    const handleChange = useCallback((event) => {\n\n        console.log('..handle change ...' + event.target.value);\n        setColor(event.target.value);\n\n    });\n    return (\n        <Col md={3} sm={12} xs={12} className=\"overlay-form-container\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n\n            <Row style={{ width: \"80%\", paddingLeft: \"70px\" }}>\n\n                <Col style={{ textAlign: \"left\" }}>\n                    <FormGroup tag=\"fieldset\">\n\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    checked={\"checked\"}\n                                    value={\"default\"}\n                                />\n                                <img src={MapMarkerUrls.property.default} style={{ height: \"30px\" }} />\n                            </Label>\n                        </FormGroup>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    value={\"hasInjured\"}\n                                />\n                                <img src={MapMarkerUrls.property.hasInjured} style={{ height: \"30px\" }} />\n                            </Label>\n                        </FormGroup>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    value={\"pending\"}\n                                />\n                                <img src={MapMarkerUrls.property.pending} style={{ height: \"30px\" }} />\n                            </Label>\n                        </FormGroup>\n                        <FormGroup check>\n                            <Label check>\n                                <Input\n                                    type=\"radio\"\n                                    name=\"addressType\"\n                                    onChange={handleChange}\n                                    value={\"safe\"}\n                                />\n                                <img src={MapMarkerUrls.property.safe} style={{ height: \"30px\" }} />\n                            </Label>\n                        </FormGroup>\n                        {/* <FormGroup check>\n                        <Label check>\n                            <Input\n                                type=\"radio\"\n                                name=\"addressType\"\n                                onChange={handleChange}\n                                value={\"secondary\"}\n                            />\n                            <img src={MapMarkerUrls.property.secondary} style={{height:\"30px\"}} />\n                        </Label>\n                    </FormGroup>    */}\n                    </FormGroup>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n\n\n                    <Button\n                        className=\"mt-1 mb-5\"\n                        color={'success'}\n                        block\n                        onClick={() => {\n                            const email = utilsData.emailForChangeColor\n                            const data = {\n                                email: email,\n                                color: color,\n                                ownerMobileNumber: user.mobileNumber,\n                            };\n                            utilsData.changeColor = false;\n                            dispatch(changePropertyColor(data)).then(resp => {\n                                console.log('...change color..' + JSON.stringify(resp));\n                                setTimeout(function () {\n                                    callback(true, color, email);\n                                }, 500)\n\n                                // history.push(\"/\");\n                            })\n                                .catch(error => {\n                                    callback(false, color, email);\n                                    console.log('...change color error..' + JSON.stringify(error));\n                                })\n                        }}>\n                        Confirm\n                    </Button>\n                </Col>\n                <Col>\n                    <Button\n                        className=\"mt-1 mb-5\"\n                        color={'danger'}\n                        block\n                        onClick={() => {\n                            // const data = {\n                            //     email: utilsData.emailForChangeColor,\n                            //     color: color\n                            // };\n                            utilsData.changeColor = false;\n                            dispatch(cancelChangePropertyColor());\n                        }}>\n                        Cancel\n                    </Button>\n                </Col>\n\n\n            </Row>\n        </Col>\n    );\n};\nexport default ChangeColorForm;","import { MapMarkerUrls } from '../../../constants';\nimport React, { useState, useCallback } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Col,\n    Row,\n    Collapse,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Spinner,\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { cancelChangePropertyColor } from '../../../redux/actionCreators/appActionCreators';\nimport { propertyBinding } from '../../../redux/actionCreators/adminActionCreators';\nimport { useHistory } from 'react-router';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport MobileInput from '../../../common/components/MobileInput';\n// import { generateString } from '../../../utils/utils';\nconst bindingSchema = Yup.object().shape({\n\n    bindingName: Yup.string().required('This field is required'),\n    bindingEmail: Yup.string().required('This field is required'),\n    //  bindingPhone: Yup.string().required('This field is required'),\n});\nconst BindingForm = ({ callback }) => {\n\n    const utilsData = useSelector((state) => state.utilsData);\n    console.log('...utilsData..' + JSON.stringify(utilsData));\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [color, setColor] = useState('default');\n    const property = utilsData.selectedProperty;\n    const user = useSelector((state) => state.auth.me);\n\n    const formik = useFormik({\n        initialValues: {\n            bindingUnitNum: property !== null && property !== undefined && property.bindingUnitNum !== 'null' ? property.bindingUnitNum : '',\n            bindingName: property !== null && property !== undefined && property.bindingName !== 'null' ? property.bindingName : '',\n            bindingEmail: property !== null && property !== undefined && property.bindingEmail !== 'null' ? property.bindingEmail : '',\n            bindingPhone: property !== null && property !== undefined && property.bindingPhone !== 'null' ? property.bindingPhone : '',\n            bindingOthers: property !== null && property !== undefined && property.bindingOthers !== 'null' ? property.bindingOthers : '',\n        },\n        isInitialValid: false,\n        validationSchema: bindingSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n            utilsData.bindingProperty = false;\n            const email = utilsData.emailForChangeColor;\n            // let emailDisplay = '';\n            // if (values.bindingUnitNum) {\n            //     property.unitNo = values.bindingUnitNum;\n            //     emailDisplay = generateString(property);\n            // }\n            const fncCallback = utilsData.fncCallback;\n            const data = {\n                email: email,\n                ownerMobileNumber: user.mobileNumber,\n                ...values\n            }\n            dispatch(propertyBinding(data)).then(resp => {\n                if (fncCallback) {\n                    fncCallback();\n                }\n            })\n        }\n    });\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        isValid,\n        isSubmitting,\n        setFieldValue,\n        setFieldTouched,\n        values,\n    } = formik;\n\n    return (\n        <Col md={3} sm={12} xs={12} className=\"overlay-form-container\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n            <Form onSubmit={handleSubmit}>\n                <Row >\n\n                    <Col style={{ textAlign: \"left\" }}>\n                        <FormGroup tag=\"fieldset\">\n                            <FormGroup>\n                                <Label for=\"lblPropertyName\">Unit # &nbsp;&nbsp;</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"bindingUnitNum\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.bindingUnitNum}\n                                    invalid={touched.bindingUnitNum && errors.bindinbindingUnitNumgName}\n                                />\n                                <FormFeedback>{errors.bindingUnitNum}</FormFeedback>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"lblPropertyName\">Name &nbsp;&nbsp;<span className=\"item_required\">*</span></Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"bindingName\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.bindingName}\n                                    invalid={touched.bindingName && errors.bindingName}\n                                />\n                                <FormFeedback>{errors.bindingName}</FormFeedback>\n                            </FormGroup>\n\n                            <FormGroup>\n                                <Label for=\"lblPropertyName\">Email &nbsp;&nbsp;<span className=\"item_required\">*</span></Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"bindingEmail\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.bindingEmail}\n                                    invalid={touched.bindingEmail && errors.bindingEmail}\n                                />\n                                <FormFeedback>{errors.bindingEmail}</FormFeedback>\n                            </FormGroup>\n\n                            <FormGroup>\n                                <Label for=\"lblPropertyName\">Phone</Label>\n                                <MobileInput\n                                    type=\"text\"\n                                    name=\"bindingPhone\"\n                                    setFieldValue={setFieldValue}\n                                    setFieldTouched={setFieldTouched}\n                                    value={values.bindingPhone}\n                                    invalid={touched.bindingPhone && errors.bindingPhone}\n                                />\n                                <FormFeedback>{errors.bindingPhone}</FormFeedback>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"lblPropertyName\">Others</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"bindingOthers\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.bindingOthers}\n                                    invalid={touched.bindingOthers && errors.bindingOthers}\n                                />\n                                <FormFeedback>{errors.bindingOthers}</FormFeedback>\n                            </FormGroup>\n                        </FormGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Button block disabled={!isValid || isSubmitting}>\n                            {isSubmitting ? <Spinner size={'sm'} /> : 'Confirm'}\n                        </Button>\n\n                        {/* <Button\n                    className=\"mt-1 mb-5\"\n                    color={'success'}\n                    block\n                    onClick={() => {\n                        const email = utilsData.emailForChangeColor\n                        const data = {\n                            email: email,\n                            color: color\n                        };\n                        utilsData.changeColor = false;\n                        dispatch(changePropertyColor(data)).then(resp=>{\n                            console.log('...change color..' + JSON.stringify(resp));\n                            callback(true, color, email);\n                            // history.push(\"/\");\n                        })\n                        .catch(error=>{\n                            callback(false, color, email);\n                            console.log('...change color error..' + JSON.stringify(error));\n                        })\n                    }}>\n                    Confirm\n                </Button> */}\n                    </Col>\n                    <Col>\n                        <Button\n                            className=\"mt-1 mb-5\"\n                            color={'danger'}\n                            block\n                            onClick={() => {\n                                // const data = {\n                                //     email: utilsData.emailForChangeColor,\n                                //     color: color\n                                // };\n                                utilsData.bindingProperty = false;\n                                dispatch(cancelChangePropertyColor());\n                            }}>\n                            Cancel\n                        </Button>\n                    </Col>\n\n\n                </Row>\n            </Form>\n        </Col>\n    );\n};\nexport default BindingForm;","import axios from \"axios\";\n\nexport default axios.create({\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n\n// export const fetchUser = (id) => {\n//   return (dispatch, getState) => {\n//       const token = getState().auth.jwt;\n\n//       return dispatch({\n//           type: ADMIN_FETCH_USER,\n//           payload: fetch(`${SERVICE_URL}/users/${id}?tenant=${PARTNER_TOKEN}`, {\n//               headers: {\n//                   Accept: 'application/json',\n//                   'Content-Type': 'application/json',\n//                   Authorization: `Bearer ${token}`,\n//               },\n//               method: 'GET',\n//           })\n//               .then((r) => r.json())\n//               .then((responseData) => {\n//                   if (responseData.statusCode >= 300) {\n//                       return Promise.reject(responseData);\n//                   } else {\n//                       return responseData;\n//                   }\n//               }),\n//       });\n//   };\n// };\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Col,\n    Row,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Spinner,\n} from 'reactstrap';\nimport {\n    CLabel,\n    CListGroup,\n    CListGroupItem,\n} from '@coreui/react';\nimport { Link } from 'react-router-dom';\nimport { cancelChangePropertyColor } from '../../../redux/actionCreators/appActionCreators';\nimport { sendPromotionContents, uploadFiles } from '../../../redux/actionCreators/adminActionCreators';\nimport { useHistory } from 'react-router';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport TextArea from \"antd/lib/input/TextArea\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport http from \"../../../utils/http-common\";\n\n\nconst bindingSchema = Yup.object().shape({\n    promotionTitle: Yup.string().required('This field is required'),\n    promotionContent: Yup.string().required('This field is required'),\n\n});\nconst FlyerForm = ({ callback }) => {\n\n    const utilsData = useSelector((state) => state.utilsData);\n    // console.log('...utilsData..' + JSON.stringify(utilsData));\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [color, setColor] = useState('default');\n    const properties = utilsData.selectedProperty;\n    const user = useSelector((state) => state.auth.me);\n    const token = useSelector((state) => state.auth.jwt);\n    const apiUrl = process.env.REACT_APP_SERVICE_URL;\n    const uploadUrl = apiUrl.replace('/api', '');\n\n    let domain = localStorage.getItem('current_domain');\n    if (domain === undefined || domain === null) {\n        domain = 'alphc.com'\n    }\n    const formik = useFormik({\n        initialValues: {\n            promotionTitle: '',\n            promotionContent: ''\n        },\n        isInitialValid: false,\n        validationSchema: bindingSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n            utilsData.drawFinished = false;\n            let bindingEmails = [];\n            let bindingPhones = [];\n            let userPropertiesIds = [];\n            properties.map((p) => {\n                console.log('....flyer form, property..' + JSON.stringify(p));\n                if (p.properties.bindingEmail) {\n                    bindingEmails.push(p.properties.bindingEmail);\n                    bindingPhones.push(p.properties.bindingPhone);\n                    userPropertiesIds.push(p.properties.userPropertiesId);\n                }\n            });\n            console.log('.. user..', user);\n            bindingEmails.push(user.email);\n            bindingPhones.push(user.mobileNumber);\n            userPropertiesIds.push(0);\n            const postData = {\n                emails: bindingEmails.join(','),\n                phones: bindingPhones.join(','),\n                properties: userPropertiesIds.join(','),\n                promotionTitle: values.promotionTitle,\n                promotionContent: values.promotionContent\n            }\n            dispatch(sendPromotionContents(postData));\n            const fncCallback = utilsData.fncCallback;\n            if (fncCallback !== null) {\n                console.log('..should trigger call back');\n                fncCallback();\n            }\n        }\n    });\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        isValid,\n        isSubmitting,\n        setFieldValue,\n        values,\n        setValues\n    } = formik;\n\n    const [editorState, setEditorState] = useState(EditorState.createEmpty())\n    const [current, setCurrent] = useState(0);\n    const limitWords = (e) => {\n        const currentLength = e.target.value.length;\n        setCurrent(currentLength);\n    }\n    const onEditorStateChange = (state) => {\n        setEditorState(state);\n        const htmlContent = draftToHtml(convertToRaw(state.getCurrentContent()));\n        console.log('..htmlContent..' + htmlContent);\n        const title = values.promotionTitle;\n        setValues({\n            promotionTitle: title,\n            promotionContent: htmlContent\n        })\n    }\n    const [uploadedImages, setUploadedImages] = useState([]);\n    const uploadCallback = async (fileData) => {\n        let formData = new FormData();\n\n        formData.append(\"files\", fileData);\n\n        const imgData = await http.post(apiUrl + \"/upload\", formData, {\n            headers: {\n                // \"Content-Type\": \"multipart/form-data\",\n                \"Authorization\": `Bearer ${token}`,\n            },\n        });\n        console.log('..imgData..' + JSON.stringify(imgData));\n        return Promise.resolve({\n            data: {\n                link: `https://rest.klosertoyou.com${imgData.data[0].url}`\n            }\n        });\n        // dispatch( uploadFiles(file)).then(imgData => {\n        //     console.log('..imgData..' + JSON.stringify(imgData));\n\n        // });\n        // return Promise.resolve({ data: { \n        //   link: `${uploadUrl}${imgData[0].formats.small.url}`\n        // }});\n\n        // console.log('..uploadCallback..' + JSON.stringify(file));\n        // // long story short, every time we upload an image, we\n        // // need to save it to the state so we can get it's data\n        // // later when we decide what to do with it.\n\n        // // Make sure you have a uploadImages: [] as your default state\n        // let images = uploadedImages;\n\n        // const imageObject = {\n        //     file: file,\n        //     localSrc: URL.createObjectURL(file),\n        // }\n\n        // images.push(imageObject);\n\n        // setUploadedImages(images);\n\n        // // We need to return a promise with the image src\n        // // the img src we will use here will be what's needed\n        // // to preview it in the browser. This will be different than what\n        // // we will see in the index.md file we generate.\n        // return new Promise(\n        //     (resolve, reject) => {\n        //         resolve({ data: { link: imageObject.localSrc } });\n        //     }\n        // );\n    }\n    return (\n        <Col md={6} sm={12} xs={12} className=\"overlay-form-container\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n            <Form onSubmit={handleSubmit}>\n                <Row >\n\n                    <Col style={{ textAlign: \"left\" }}>\n                        <FormGroup tag=\"fieldset\">\n                            <CLabel>Send Communication:</CLabel>\n                            <CListGroup accent className=\"mb-3\">\n                                {properties.map((p) => (\n                                    <CListGroupItem key={p.properties.id}>\n                                        {p.properties.email + '@' + domain}\n                                    </CListGroupItem>\n                                ))}\n                            </CListGroup>\n                        </FormGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <FormGroup>\n                            <Label for=\"lblPropertyName\">Title:</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"promotionTitle\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.promotionTitle}\n                                invalid={touched.promotionTitle && errors.promotionTitle}\n                            />\n                            <FormFeedback>{errors.promotionTitle}</FormFeedback>\n                        </FormGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <FormGroup >\n                            <Label for=\"lblPropertyName\">Content:</Label>\n                            <TextArea\n                                disabled\n                                style={{ width: \"1px\", height: \"1px\", visibility: \"hidden\" }}\n                                type=\"text\"\n                                name=\"promotionContent\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                onKeyUp={(e) => limitWords(e)}\n                                value={values.promotionContent}\n                                invalid={touched.promotionContent && errors.promotionContent}\n                            />\n                            <Editor\n                                editorState={editorState}\n                                toolbarClassName=\"toolbarClassName\"\n                                wrapperClassName=\"wrapperClassName\"\n                                editorClassName=\"editorClassName\"\n                                onEditorStateChange={onEditorStateChange}\n                                toolbar={{\n                                    options: ['inline', 'fontSize', 'fontFamily', 'list',\n                                        'textAlign', 'colorPicker', 'link', 'image'],\n                                    link: {\n                                        defaultTargetOption: '_blank',\n                                        popupClassName: \"mail-editor-link\"\n                                    },\n                                    image: {\n                                        urlEnabled: true,\n                                        uploadEnabled: true,\n                                        uploadCallback: uploadCallback,\n                                        alignmentEnabled: true,\n                                        defaultSize: {\n                                            height: 'auto',\n                                            width: '600px',\n                                        },\n                                        inputAccept: 'application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel,image/gif,image/jpeg,image/jpg,image/png,image/svg'\n                                    }\n                                }}\n                            />\n\n                            <FormFeedback>{errors.promotionContent}</FormFeedback>\n                        </FormGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Button block disabled={!isValid || isSubmitting}>\n                            {isSubmitting ? <Spinner size={'sm'} /> : 'Confirm'}\n                        </Button>\n\n\n                    </Col>\n                    <Col>\n                        <Button\n                            className=\"mt-1 mb-5\"\n                            color={'danger'}\n                            block\n                            onClick={() => {\n                                // const data = {\n                                //     email: utilsData.emailForChangeColor,\n                                //     color: color\n                                // };\n                                utilsData.drawFinished = false;\n                                const fncCallback = utilsData.fncCallback;\n                                dispatch(cancelChangePropertyColor());\n                                if (fncCallback !== null) {\n                                    console.log('..should trigger call back');\n                                    fncCallback();\n                                }\n                            }}>\n                            Cancel\n                        </Button>\n                    </Col>\n\n\n                </Row>\n            </Form>\n        </Col>\n    );\n};\nexport default FlyerForm;","import { MapMarkerUrls } from '../../../constants';\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Row,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { getBusinessProfile, saveMerchantConnection, disConnectionMerchant, loadConnectedTotal, getHighRiseBusinessInfo } from '../../../redux/actionCreators/adminActionCreators';\nimport { changePropertyColor, cancelShowBusinessInfo } from '../../../redux/actionCreators/appActionCreators';\nimport { useHistory } from 'react-router';\nimport { setPropertyRegistrationForm } from '../../../redux/actionCreators/registrationActionCreators';\nimport { getLoginType } from '../../../utils/utils';\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CDataTable,\n    CRow,\n} from '@coreui/react';\nimport {\n    EmailShareButton,\n    FacebookShareButton,\n    HatenaShareButton,\n    InstapaperShareButton,\n    LineShareButton,\n    LinkedinShareButton,\n    LivejournalShareButton,\n    MailruShareButton,\n    OKShareButton,\n    PinterestShareButton,\n    PocketShareButton,\n    RedditShareButton,\n    TelegramShareButton,\n    TumblrShareButton,\n    TwitterShareButton,\n    ViberShareButton,\n    VKShareButton,\n    WhatsappShareButton,\n    WorkplaceShareButton,\n    WeiboShareButton\n} from \"react-share\";\nimport {\n    EmailIcon,\n    FacebookIcon,\n    FacebookMessengerIcon,\n    HatenaIcon,\n    InstapaperIcon,\n    LineIcon,\n    LinkedinIcon,\n    LivejournalIcon,\n    MailruIcon,\n    OKIcon,\n    PinterestIcon,\n    PocketIcon,\n    RedditIcon,\n    TelegramIcon,\n    TumblrIcon,\n    TwitterIcon,\n    ViberIcon,\n    VKIcon,\n    WeiboIcon,\n    WhatsappIcon,\n    WorkplaceIcon\n} from \"react-share\";\nimport QRCode from \"react-qr-code\";\nconst PAGE_SIZE = 10;\nconst BusinessInfo = ({ }) => {\n\n    const utilsData = useSelector((state) => state.utilsData);\n\n    const dispatch = useDispatch();\n    const property = utilsData.selectedProperty;\n    // console.log('. show business info.property.. ' + JSON.stringify(property));\n    const history = useHistory();\n\n    const loginType = getLoginType();\n    const [bindingInfo, setBindingInfo] = useState([])\n    const user = useSelector((state) => state.auth.me);\n    const [companyProfile, setCompanyProfile] = useState(null);\n    const [totalConnected, setTotalConnected] = useState(null);\n    const [loading, setLoading] = useState(true);\n    // const [ isShowHighRise, setIsShowHighRise ] = useState(false);\n    // console.log('. show business info.user.. ' + JSON. stringify(user));\n    const getWorkingHourValue = (hours, dayOfWeek, index) => {\n        const item = hours.filter((hour) => {\n            return parseInt(hour.dayOfWeek) === dayOfWeek;\n\n        });\n        // console.log('..item..' + JSON.stringify(item));\n        if (item && item.length > 0) {\n            if (index === 1) return item[0].openHour;\n            if (index === 2) return item[0].closeHour;\n            if (index === 3) {\n                // console.log('..item[0].closed..' + item[0].closed);\n                return item[0].closed;\n            }\n        }\n        return '';\n    };\n    const [workingHour, setWorkingHour] = useState([]);\n    useEffect(() => {\n        setLoading(true);\n\n        let email = property.email;\n        email = email.replace(property.unit_no + '-', '')\n        console.log('..email is..' + email)\n        if (loginType === 1 && property.settlement_type === 'highRise') {\n            //This is high Rise , it should load others\n            dispatch(getHighRiseBusinessInfo(email)).then(resp => {\n                const highRiseInfo = resp.value.data;\n\n                // if(highRiseInfo && highRiseInfo.length > 1){\n                setBindingInfo(resp.value.data);\n                //     setIsShowHighRise(true);\n                // }\n                setLoading(false);\n            });\n        }\n\n        dispatch(getBusinessProfile({ id: property.id })).then((resp) => {\n            console.log('..property ..info..' + JSON.stringify(resp.value));\n            setCompanyProfile(resp.value.companyProfile);\n            setWorkingHour(resp.value.workingHour);\n            setLoading(false);\n        }\n\n        );\n        const jsonData = {\n            id_type: 1,\n            id: property.id\n        }\n        dispatch(loadConnectedTotal(jsonData)).then(resp => {\n            console.log('..get total ..' + JSON.stringify(resp));\n            let total1 = parseInt(resp.value.value[0].iCount) + parseInt(resp.value.value2);\n            setTotalConnected(total1 > 0 ? total1 : 0);\n        }).catch(error => {\n\n        });\n        return () => { };\n    }, [dispatch, property]);\n\n    const editBusinessProfile = () => {\n        history.push('/business-profile?id=' + property.id);\n    }\n    const onUploadFlyer = () => {\n        utilsData.showFlyerUpload = true;\n        utilsData.showBusinessInfo = false;\n        dispatch(cancelShowBusinessInfo());\n    }\n    const disConnectToMerchant = () => {\n        const jsonData = {\n            merchant_property_id: property.id\n        }\n        dispatch(disConnectionMerchant(jsonData)).then(resp => {\n            console.log('disconnect ..' + JSON.stringify(resp));\n            utilsData.showBusinessInfo = false;\n            const fncCallback = utilsData.fncCallback;\n            dispatch(cancelShowBusinessInfo());\n            if (fncCallback !== null) {\n                console.log('..should trigger call back');\n                fncCallback();\n            }\n        }).catch(error => {\n\n        })\n\n    }\n    const connectToMerchant = () => {\n\n        //check user whether login\n        if (user !== null && user !== undefined) {\n            //user already login, just connect them together\n            const jsonData = {\n                merchant_property_id: property.id\n            }\n            dispatch(saveMerchantConnection(jsonData)).then(resp => {\n                //need redraw the map\n                //how to pass redraw map ??\n                utilsData.showBusinessInfo = false;\n                dispatch(cancelShowBusinessInfo());\n\n                const fncCallback = utilsData.fncCallback;\n                if (fncCallback !== null) {\n                    console.log('..should trigger call back');\n                    fncCallback();\n                }\n            }).catch(error => {\n                console.log('...save connection error');\n            })\n        } else {\n            utilsData.connectToMerchantId = property.id;\n            console.log('..start to connect to merchant..' + property.id);\n            const blankAddress = {\n                \"postalCode\": \"\",\n                \"streetNumber\": \"\",\n                \"route\": \"\",\n                \"locality\": \"\",\n                \"city\": \"\",\n                \"country\": \"\",\n            };\n            dispatch(setPropertyRegistrationForm({\n                address: blankAddress,\n                active: true,\n            }));\n        }\n    }\n\n    const shareUrl = \"https://klosertoyou.com/business-portal/\" + property.id;\n    const title = \"\";\n    const domain = localStorage.getItem(\"current_domain\");\n    const cbSendEmail = (e, property) => {\n        // const { utilsData } = this.props;\n        utilsData.drawFinished = true;\n        const data = [];\n        data.push({\n            properties: property\n        });\n        utilsData.selectedProperty = data;\n        utilsData.showBusinessInfo = false;\n        dispatch(cancelShowBusinessInfo());\n        // dispatch()\n\n        // this.setState({\n        //     selectedProperties: data,\n        // });\n    }\n    return (\n\n        bindingInfo.length > 1 ?\n            <>\n                <Col md={6} sm={12} xs={12} className=\"overlay-form-container\">\n                    <Link to={'/'}>\n                        <img\n                            className={'logo-container'}\n                            src={'/assets/img/logo-white.png'}\n                            alt={'logo'}\n                        />\n                    </Link>\n                    <Row style={{ width: \"100%\" }}>\n                        <Col> {property.email} </Col>\n                    </Row>\n                    <Row style={{ width: \"100%\" }}>\n                        <Col>\n                            <CDataTable\n                                items={bindingInfo}\n                                loading={loading}\n                                fields={[\n                                    { key: 'unit_no', _classes: 'font-weight-bold', label: 'Unit #' },\n                                    { key: 'companyName', label: 'Company Name' },\n                                    'businessPhone',\n\n                                ]}\n                                hover\n                                striped\n                                sorter\n                                tableFilter={{ 'placeholder': 'Keywords...' }}\n                                itemsPerPage={PAGE_SIZE}\n                                pagination\n                                clickableRows\n                                onRowClick={(item) =>\n                                    window.open(`https://klosertoyou.com/business-portal/${item.id}`, \"_blank\")\n                                }\n                            /></Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Button\n                                className=\"mt-1 mb-5\"\n                                color={'danger'}\n                                block\n                                onClick={() => {\n                                    // const data = {\n                                    //     email: utilsData.emailForChangeColor,\n                                    //     color: color\n                                    // };\n                                    utilsData.showBusinessInfo = false;\n                                    dispatch(cancelShowBusinessInfo());\n                                }}>\n                                Cancel\n                            </Button>\n                        </Col>\n                    </Row>\n                </Col>\n            </> :\n            <>\n                <Col md={6} sm={12} xs={12} className=\"overlay-form-container\">\n                    <QRCode\n                        size={256}\n                        className={'logo-container'}\n                        style={{ marginTop: \"20px\", height: \"100px\", maxWidth: \"100%\", width: \"100%\" }}\n                        value={shareUrl}\n                        viewBox={`0 0 256 256`}\n                    />\n\n                    <Row style={{ width: \"100%\" }}>\n\n                        <Col style={{ textAlign: \"left\" }}>\n                            {\n                                companyProfile ?\n                                    <>\n\n                                        <Row>\n                                            <Col><h3>{companyProfile.companyName}</h3></Col> </Row>\n                                        <Row>   <Col><i className=\"fa-solid fa-address\"></i> {(property.unit_no ? property.unit_no + ' - ' : '') + property.street_number + ' ' + property.route + ' ' + property.locality + ',' + property.city + ',' + property.postal_code} </Col> </Row>\n                                        <Row>   <Col><i className=\"fa-solid fa-phone\"></i> {companyProfile.phone} </Col> </Row>\n                                        <Row>   <Col><i className=\"fa-solid fa-globe\"></i> <a href={companyProfile.website.startsWith('http') ? companyProfile.website : 'https://' + companyProfile.website} className='business_link'>Company Website</a>  </Col> </Row>\n                                        {totalConnected ? <Row>   <Col>Connected: {totalConnected} </Col> </Row> : null}\n                                        <Row>   <Col><i className=\"fa-solid fa-globe\"></i> <a className='business_link' href={shareUrl} target=\"_blank\"> {shareUrl}</a>\n                                            {\n                                                user !== undefined && user.property !== undefined && property.id === user.property.id ?\n                                                    <>\n\n                                                        &nbsp;&nbsp;&nbsp; share: &nbsp;\n\n                                                        <EmailShareButton\n                                                            url={shareUrl}\n                                                            subject={title}\n                                                            body=\"body\"\n\n                                                        >\n                                                            <EmailIcon size={32} round />\n                                                        </EmailShareButton>\n\n\n                                                    </> : null\n                                            }\n                                        </Col> </Row>\n                                        {property.email && property.email !== null && property.email !== 'null' ? <Row>\n                                            <Col><i className=\"fa-solid fa-envelope\"></i> {property.email + '@' + companyProfile.companyName + '.com'}\n                                                {property.connected !== \"1\" || (user !== undefined && user.property !== undefined && property.id === user.property.id) ? null : <Button size={'sm'} onClick={(e) => cbSendEmail(e, property)} >Send Email</Button>}\n                                            </Col>\n                                        </Row> : null}\n                                        <Row>\n                                            <Col>\n                                                {companyProfile.android_url ? <a href={companyProfile.android_url} target='_blank' >\n                                                    <img\n                                                        className={'app-container'}\n                                                        src={'/assets/img/google-play-badge.png'}\n                                                        alt={'Android App Download'}\n                                                    />\n                                                </a> : null}\n                                            </Col>\n                                            <Col>\n                                                {companyProfile.ios_url ? <a href={companyProfile.ios_url} target='_blank' >\n                                                    <img\n                                                        className={'app-container'}\n                                                        src={'/assets/img/appstore-badge.png'}\n                                                        alt={'iOS App Download'}\n                                                    />\n                                                </a> : null}\n                                            </Col>\n                                        </Row>\n\n\n\n                                        <Row>\n                                            <Col> <hr /></Col>\n\n                                        </Row>\n                                        <Row>\n                                            <Col md={3}>\n                                                <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Monday:</Label>\n                                            </Col>\n                                            {getWorkingHourValue(workingHour, 0, 3) === true ?\n                                                <>       <Col md={9}>\n                                                    <Label for=\"lblPropertyName\">We're Closed </Label>\n                                                </Col>\n                                                </> :\n                                                <>\n                                                    <Col md={9}>\n                                                        <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 0, 1)} - {getWorkingHourValue(workingHour, 0, 2)} </Label>\n                                                    </Col>\n                                                </>\n                                            }\n\n                                        </Row>\n                                        <Row>\n                                            <Col md={3}>\n                                                <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Tuesday:</Label>\n                                            </Col>\n                                            {getWorkingHourValue(workingHour, 1, 3) === true ?\n                                                <>       <Col md={9}>\n                                                    <Label for=\"lblPropertyName\">We're Closed </Label>\n                                                </Col>\n                                                </> :\n                                                <>\n                                                    <Col md={9}>\n                                                        <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 1, 1)} - {getWorkingHourValue(workingHour, 1, 2)} </Label>\n                                                    </Col>\n                                                </>\n                                            }\n\n                                        </Row>\n                                        <Row>\n                                            <Col md={3}>\n                                                <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Wednesday:</Label>\n                                            </Col>\n                                            {getWorkingHourValue(workingHour, 2, 3) === true ?\n                                                <>       <Col md={9}>\n                                                    <Label for=\"lblPropertyName\">We're Closed </Label>\n                                                </Col>\n                                                </> :\n                                                <>\n                                                    <Col md={9}>\n                                                        <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 2, 1)} - {getWorkingHourValue(workingHour, 2, 2)} </Label>\n                                                    </Col>\n                                                </>\n                                            }\n\n                                        </Row>\n                                        <Row>\n                                            <Col md={3}>\n                                                <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Thursday:</Label>\n                                            </Col>\n                                            {getWorkingHourValue(workingHour, 3, 3) === true ?\n                                                <>       <Col md={9}>\n                                                    <Label for=\"lblPropertyName\">We're Closed </Label>\n                                                </Col>\n                                                </> :\n                                                <>\n                                                    <Col md={9}>\n                                                        <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 3, 1)} - {getWorkingHourValue(workingHour, 3, 2)} </Label>\n                                                    </Col>\n                                                </>\n                                            }\n\n                                        </Row>\n                                        <Row>\n                                            <Col md={3}>\n                                                <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Friday:</Label>\n                                            </Col>\n                                            {getWorkingHourValue(workingHour, 4, 3) === true ?\n                                                <>       <Col md={9}>\n                                                    <Label for=\"lblPropertyName\">We're Closed </Label>\n                                                </Col>\n                                                </> :\n                                                <>\n                                                    <Col md={9}>\n                                                        <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 4, 1)} - {getWorkingHourValue(workingHour, 4, 2)} </Label>\n                                                    </Col>\n                                                </>\n                                            }\n\n                                        </Row>\n                                        <Row>\n                                            <Col md={3}>\n                                                <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Saturday:</Label>\n                                            </Col>\n                                            {getWorkingHourValue(workingHour, 5, 3) === true ?\n                                                <>       <Col md={9}>\n                                                    <Label for=\"lblPropertyName\">We're Closed </Label>\n                                                </Col>\n                                                </> :\n                                                <>\n                                                    <Col md={9}>\n                                                        <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 5, 1)} - {getWorkingHourValue(workingHour, 5, 2)} </Label>\n                                                    </Col>\n                                                </>\n                                            }\n\n                                        </Row>\n                                        <Row>\n                                            <Col md={3}>\n                                                <Label style={{ textAlign: \"right\" }} for=\"lblPropertyName\">Sunday:</Label>\n                                            </Col>\n                                            {getWorkingHourValue(workingHour, 6, 3) == true ?\n                                                <>       <Col md={9}>\n                                                    <Label for=\"lblPropertyName\">We're Closed </Label>\n                                                </Col>\n                                                </> :\n                                                <>\n                                                    <Col md={9}>\n                                                        <Label for=\"lblPropertyName\"> {getWorkingHourValue(workingHour, 6, 1)} - {getWorkingHourValue(workingHour, 6, 2)} </Label>\n                                                    </Col>\n                                                </>\n                                            }\n\n                                        </Row>\n                                    </>\n                                    : <>\n                                        <Row>\n                                            {loading ? null : <Col> Login and complete business registration! </Col>}\n                                        </Row>\n\n                                    </>\n                            }\n\n                        </Col>\n                    </Row>\n\n\n                    <Row style={{ width: \"100%\", marginTop: \"20px\" }}>\n                        {\n                            parseInt(loginType) === 2 && user !== undefined && user.property !== undefined && property.id === user.property.id ?\n                                <>\n                                    <Col>\n                                        <Button\n\n                                            color={'success'}\n                                            block\n                                            onClick={() => onUploadFlyer()}>\n                                            Upload Flyer\n                                        </Button>\n                                    </Col>\n                                    <Col>\n                                        <Button\n\n                                            color={'success'}\n                                            block\n                                            onClick={() => editBusinessProfile()}>\n                                            Edit\n                                        </Button>\n\n                                    </Col>\n                                </>\n                                :\n                                companyProfile ? <Col>\n\n                                    {property.connected === \"1\" ?\n                                        <Button\n\n                                            color={'success'}\n                                            block\n                                            onClick={() => disConnectToMerchant()}>\n                                            DisConnect\n                                        </Button> :\n                                        <Button\n\n                                            color={'success'}\n                                            block\n                                            onClick={() => connectToMerchant()}>\n                                            Connect\n                                        </Button>\n                                    }\n                                </Col> : null\n                        }\n                        <Col>\n                            <Button\n                                className=\"mt-1 mb-5\"\n                                color={'danger'}\n                                block\n                                onClick={() => {\n                                    // const data = {\n                                    //     email: utilsData.emailForChangeColor,\n                                    //     color: color\n                                    // };\n                                    utilsData.showBusinessInfo = false;\n                                    dispatch(cancelShowBusinessInfo());\n                                }}>\n                                Cancel\n                            </Button>\n                        </Col>\n\n\n                    </Row>\n\n                    {/* \n                    {\n                        user !== undefined && user.property !== undefined && property.id === user.property.id ?\n                            <>\n                                <Col  >\n                                    Share your business <br />\n                                   \n                                    <EmailShareButton\n                                        url={shareUrl}\n                                        subject={title}\n                                        body=\"body\"\n\n                                    >\n                                        <EmailIcon size={32} round />\n                                    </EmailShareButton>\n                                  \n                                </Col>\n                            </> : null\n                    } */}\n                </Col>\n            </>\n    );\n};\nexport default BusinessInfo;","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Col,\n    Row,\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { getHighRiseInfo, removeHighRiseBinding } from '../../../redux/actionCreators/adminActionCreators';\nimport {\n    CDataTable,\n} from '@coreui/react';\nimport { cancelShowHighRiseInfo } from '../../../redux/actionCreators/appActionCreators';\n// import { generateString } from '../../../utils/utils';\nimport ReactTable from \"react-table-v6\";\nimport \"react-table-v6/react-table.css\";\nimport { toastr } from 'react-redux-toastr';\nconst ShowHighRiseInfo = () => {\n\n    const PAGE_SIZE = 10;\n    const utilsData = useSelector((state) => state.utilsData);\n    // console.log('...utilsData..' + JSON.stringify(utilsData));\n    const dispatch = useDispatch();\n    // const history = useHistory();\n    // const [color, setColor] = useState('default');\n    const property = utilsData.selectedProperty;\n    const user = useSelector((state) => state.auth.me);\n    // console.log('..current property..', property);\n    const [bindingInfo, setBindingInfo] = useState([])\n    const [loading, setLoading] = useState(true);\n    const [needReload, setNeedReload] = useState(false);\n    useEffect(() => {\n        setLoading(true);\n        let email = property.email;\n        email = email.replace(property.unit_no + '-', '')\n        console.log('..email is..' + email)\n\n        dispatch(getHighRiseInfo(email)).then(resp => {\n            // console.log('.. get high rise info..', resp.value.value);\n            const unitsInfo = resp.value.value;\n            // let itemData = []\n            // unitsInfo.map(item => {\n            //     // console.log('..item..', item);\n            //     if (parseInt(item.property_id) === property.id) {\n            //         if (item.binding_unit_num === \"\") item.binding_unit_num = property.unit_no;\n            //         if (item.binding_email === \"\") item.binding_email = user.email;\n            //         // if (item.bindingName === \"\") item.bindingName = user.email;\n            //         if (item.binding_phone === \"\") item.binding_phone = user.username;\n            //     }\n            //     itemData.push(item);\n            // })\n            // console.log('..itemData..', itemData);\n            setBindingInfo(unitsInfo);\n            setLoading(false);\n        })\n\n            ;\n        return () => { };\n    }, [dispatch,]);\n\n    const onClickDelete = (event, id) => {\n        console.log('...onClickDeleteContact...' + id);\n        // navigate('/edit/contact/' + id);\n        toastr.confirm(\n            'Are you sure you want to delete your this record? This action is irreversible!',\n            {\n                onOk: () => onConfirmDelete(id),\n            },\n        );\n    };\n    const onConfirmDelete = (id) => {\n        console.log('..delete..' + id);\n        dispatch(removeHighRiseBinding(user.id, id)).then(resp => {\n            console.log('..remove high rise binding..', resp);\n            //reload page\n            let email = property.email;\n            email = email.replace(property.unit_no + '-', '')\n            console.log('..email is..' + email)\n\n            dispatch(getHighRiseInfo(email)).then(resp => {\n                const unitsInfo = resp.value.value;\n                setBindingInfo(unitsInfo);\n                setLoading(false);\n                setNeedReload(true);\n            })\n        })\n\n    };\n    const columns = [\n        {\n            Header: \"Del\",\n            accessor: \"userPropertyId\",\n            width: 60,\n            Cell: row => (\n                <>\n                    <img src=\"/images/buttons/delete.png\" style={{ marginLeft: \"20px\" }} onClick={(event) => onClickDelete(event, row.value)} />\n                </>\n            ),\n        },\n        {\n            accessor: 'binding_unit_num',\n            Header: 'Unit #',\n            width: 80,\n\n        },\n        {\n            accessor: 'binding_name',\n            Header: 'Name',\n            minWidth: 140,\n\n        },\n        {\n            accessor: 'binding_email',\n            Header: 'Email',\n            minWidth: 200,\n\n        },\n        {\n            accessor: 'binding_phone',\n            Header: 'Phone',\n            minWidth: 120,\n        },\n        {\n            accessor: 'binding_others',\n            Header: 'Others',\n        }\n    ]\n\n    return (\n        <Col md={7} sm={24} xs={12} className=\"overlay-form-container-left\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n\n            <Row style={{ marginLeft: \"15px\", marginRight: \"15px\" }} >\n                <Col className=\"highRise_table\" style={{ textAlign: \"left\" }}>\n                    <h5> &nbsp;&nbsp;&nbsp; {property.street_number + ' ' + property.route + ' , ' + property.locality} </h5>\n                    {/* <CDataTable\n                        items={bindingInfo}\n                        loading={loading}\n                        fields={[\n                            { key: 'binding_unit_num', _classes: 'font-weight-bold', label: 'Unit #' },\n                            { key: 'binding_name', label: 'Name' },\n                            { key: 'binding_email', label: 'Email' },\n                            { key: 'binding_phone', label: 'Phone' },\n                            { key: 'binding_others', label: 'Others' },\n                        ]}\n                        hover\n                        striped\n                        itemsPerPage={PAGE_SIZE}\n                        pagination\n\n\n                    /> */}\n                    <ReactTable\n                        data={bindingInfo}\n                        columns={columns}\n                        defaultPageSize={10}\n                        className=\"-striped -highlight\"\n                    />\n                </Col>\n            </Row>\n            <Row >\n                <Col style={{ textAlign: \"center\" }}>\n                    <Button\n                        className=\"mt-1 mb-5\"\n                        color={'danger'}\n                        block\n                        onClick={() => {\n                            // const data = {\n                            //     email: utilsData.emailForChangeColor,\n                            //     color: color\n                            // };\n                            utilsData.showHighRiseInfo = false;\n                            dispatch(cancelShowHighRiseInfo());\n                            if (needReload) {\n                                location.reload();\n                            }\n                        }}>\n                        Cancel\n                    </Button>\n                </Col>\n            </Row>\n\n        </Col>\n    );\n};\nexport default ShowHighRiseInfo;","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Col,\n    Row,\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport {\n    CDataTable,\n} from '@coreui/react';\nimport { cancelShowNoDelivery } from '../../../redux/actionCreators/appActionCreators';\nimport { removeNoDelivery } from '../../../redux/actionCreators/adminActionCreators';\n\n// import { generateString } from '../../../utils/utils';\nimport ReactTable from \"react-table-v6\";\nimport \"react-table-v6/react-table.css\";\nimport { toastr } from 'react-redux-toastr';\nconst ShowNoDelivery = () => {\n\n    const PAGE_SIZE = 10;\n    const utilsData = useSelector((state) => state.utilsData);\n    // console.log('...utilsData..' + JSON.stringify(utilsData));\n    const dispatch = useDispatch();\n    // const history = useHistory();\n    // const [color, setColor] = useState('default');\n    const properties = utilsData.properties;\n    const user = useSelector((state) => state.auth.me);\n    // console.log('..current user..', user);\n    const [bindingInfo, setBindingInfo] = useState([])\n    const [loading, setLoading] = useState(true);\n    const [needReload, setNeedReload] = useState(false);\n    useEffect(() => {\n        setLoading(false);\n        // })\n        let itemData = []\n        properties.map(item => {\n            if (item.properties.no_delivery === 1) {\n                itemData.push(item.properties)\n            }\n        });\n        console.log('..', itemData);\n        setBindingInfo(itemData);\n        return () => { };\n    }, [dispatch,]);\n\n    const onClickDelete = (event, id, row) => {\n        // console.log('...onClickDeleteContact...' + id);\n        // navigate('/edit/contact/' + id);\n        toastr.confirm(\n            'Are you sure you want to delete your this record? This action is irreversible!',\n            {\n                onOk: () => onConfirmDelete(id, row),\n            },\n        );\n    };\n    const onConfirmDelete = (id, row) => {\n        // const toBeDeleted = properties.filter(item => parseInt(item.user_id) === parseInt(id));\n        console.log('..row', row);\n        // console.log('..to be deleted..', toBeDeleted);\n        // if (toBeDeleted && toBeDeleted.length > 0) \n        {\n            // console.log('..delete..' + id, toBeDeleted);\n            //find userPropertiesId\n            dispatch(removeNoDelivery(id, user.id, row.original.userPropertiesId)).then(resp => {\n                console.log('..remove high rise binding..', resp);\n                //reload page\n                let itemData = []\n                properties.map(item => {\n                    if (item.properties.no_delivery === 1 && item.properties.user_id !== id) {\n                        itemData.push(item.properties)\n                    }\n                });\n                console.log('..', itemData);\n                setBindingInfo(itemData);\n                setNeedReload(true);\n            });\n        }\n    };\n    const columns = [\n        {\n            Header: \"Operate\",\n            accessor: \"user_id\",\n            Cell: row => (\n                <>\n                    <img src=\"/images/buttons/delete.png\" onClick={(event) => onClickDelete(event, row.value, row)} />\n                </>\n            ),\n        },\n        {\n            accessor: 'bindingName',\n            Header: 'Name',\n\n        },\n        {\n            accessor: 'bindingEmail',\n            Header: 'Email',\n\n        },\n        {\n            accessor: 'bindingPhone',\n            Header: 'Phone',\n        }\n    ]\n\n    return (\n        <Col md={4} sm={12} xs={12} className=\"overlay-form-container-left\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n\n            <Row >\n                <Col style={{ textAlign: \"left\" }}>\n                    <h5> No Delivery User Information </h5>\n                    {/* <CDataTable\n                        items={bindingInfo}\n                        loading={loading}\n                        fields={[\n                            { key: 'bindingName', label: 'Name' },\n                            { key: 'bindingEmail', label: 'Email' },\n                            { key: 'bindingPhone', label: 'Phone' },\n                        ]}\n                        hover\n                        striped\n                        itemsPerPage={PAGE_SIZE}\n                        pagination\n\n\n                    /> */}\n                    <ReactTable\n                        data={bindingInfo}\n                        columns={columns}\n                        defaultPageSize={10}\n                        className=\"-striped -highlight\"\n                    />\n                </Col>\n            </Row>\n            <Row >\n                <Col style={{ textAlign: \"center\" }}>\n                    <Button\n                        className=\"mt-1 mb-5\"\n                        color={'danger'}\n                        block\n                        onClick={() => {\n                            // const data = {\n                            //     email: utilsData.emailForChangeColor,\n                            //     color: color\n                            // };\n                            utilsData.showNoDelivery = false;\n                            dispatch(cancelShowNoDelivery());\n                            if (needReload) {\n                                location.reload();\n                            }\n                        }}>\n                        Cancel\n                    </Button>\n                </Col>\n            </Row>\n\n        </Col>\n    );\n};\nexport default ShowNoDelivery;","import { MapMarkerUrls } from '../../../constants';\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Row,\n    Col,\n    Form,\n    FormGroup,\n    Input,\n    Label,\n    Spinner\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { changePropertyColor, showPreferenceForm } from '../../../redux/actionCreators/appActionCreators';\nimport { useHistory } from 'react-router';\nimport { useFormik } from 'formik';\nimport { fetchUserPreference, saveUserPreference } from '../../../redux/actionCreators/adminActionCreators';\nconst PreferenceForm = ({ callback }) => {\n\n    const utilsData = useSelector((state) => state.utilsData);\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const [userPreference, setUserPreference] = useState([]);\n    const formik = useFormik({\n        initialValues: {\n            restaurant: false,\n            groceries: false,\n            cannibus: false\n        },\n        isInitialValid: false,\n        onSubmit: async (values, { setSubmitting }) => {\n            setSubmitting(true);\n            console.log('...submit..', values);\n            const preference1 = userPreference.find(item => item.attributes.preference === 'restaurant');\n            const restaurantData = preference1 ?\n                {\n                    id: preference1.id,\n                    data: {\n                        users_id: user.id,\n                        preference: 'restaurant',\n                        selected: values.restaurant\n                    }\n                } :\n                {\n                    data: {\n                        users_id: user.id,\n                        preference: 'restaurant',\n                        selected: values.restaurant\n                    }\n                }\n            const couponResult = await dispatch(saveUserPreference(restaurantData));\n\n            const preference2 = userPreference.find(item => item.attributes.preference === 'groceries')\n\n            const groceriessData = preference2 ? {\n                id: preference2.id,\n                data: {\n                    users_id: user.id,\n                    preference: 'groceries',\n                    selected: values.groceries\n                }\n            } : {\n                data: {\n                    users_id: user.id,\n                    preference: 'groceries',\n                    selected: values.groceries\n                }\n            }\n            const groceriesResult = await dispatch(saveUserPreference(groceriessData));\n\n            const preference3 = userPreference.find(item => item.attributes.preference === 'cannibus')\n\n            const promotingEventData = preference3 ? {\n                id: preference3.id,\n                data: {\n                    users_id: user.id,\n                    preference: 'cannibus',\n                    selected: values.cannibus\n                }\n            } : {\n                data: {\n                    users_id: user.id,\n                    preference: 'cannibus',\n                    selected: values.cannibus\n                }\n            }\n            const promotingEventResult = await dispatch(saveUserPreference(promotingEventData));\n\n\n            setSubmitting(false);\n            utilsData.showPreference = false;\n            dispatch(showPreferenceForm());\n        },\n    });\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        isValid,\n        isSubmitting,\n        setFieldValue,\n        values,\n    } = formik;\n\n    const user = useSelector((state) => state.auth.me);\n    // console.log('...user..' + JSON.stringify(user));\n    useEffect(() => {\n        // setLoading(true);\n        dispatch(fetchUserPreference(user.id)).then(resp => {\n            console.log('...user preference..', resp);\n            const data = resp.value.data;\n            data.map(item => {\n                if (item.attributes.preference === 'restaurant') {\n                    setFieldValue('restaurant', item.attributes.selected)\n                }\n                if (item.attributes.preference === 'groceries') {\n                    setFieldValue('groceries', item.attributes.selected)\n                }\n                if (item.attributes.preference === 'cannibus') {\n                    setFieldValue('cannibus', item.attributes.selected)\n                }\n            })\n\n            setUserPreference(resp.value.data);\n\n        });\n    }, [dispatch,]);\n\n\n    return (\n        <Col md={3} sm={12} xs={12} className=\"overlay-form-container\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n            <Form onSubmit={handleSubmit}>\n                <Row style={{ width: \"100%\", paddingLeft: \"10px\" }}>\n\n                    <Col style={{ textAlign: \"left\" }}>\n                        <FormGroup tag=\"fieldset\">\n                            I agree to receive coupon, flyer, and promoting events from the following companies. You can withdraw your consent at any time\n                            <FormGroup check>\n                                <Label check>\n                                    <Input\n                                        type=\"checkbox\"\n                                        name=\"restaurant\"\n                                        onChange={(e) => {\n                                            setFieldValue(\n                                                'restaurant',\n                                                e.currentTarget.checked,\n                                            );\n                                        }}\n                                        checked={values.restaurant}\n                                        onBlur={handleBlur}\n                                        invalid={\n                                            touched.restaurant &&\n                                            errors.restaurant\n                                        }\n                                    />\n                                    Restaurant\n                                </Label>\n                            </FormGroup>\n                            <FormGroup check>\n                                <Label check>\n                                    <Input\n                                        type=\"checkbox\"\n                                        name=\"cannibus\"\n                                        onChange={(e) => {\n                                            setFieldValue(\n                                                'cannibus',\n                                                e.currentTarget.checked,\n                                            );\n                                        }}\n                                        checked={values.cannibus}\n                                        onBlur={handleBlur}\n                                        invalid={\n                                            touched.cannibus &&\n                                            errors.cannibus\n                                        }\n                                    />\n                                    Cannibus\n                                </Label>\n                            </FormGroup>\n                            <FormGroup check>\n                                <Label check>\n                                    <Input\n                                        type=\"checkbox\"\n                                        name=\"groceries\"\n                                        onChange={(e) => {\n                                            setFieldValue(\n                                                'groceries',\n                                                e.currentTarget.checked,\n                                            );\n                                        }}\n                                        checked={values.groceries}\n                                        onBlur={handleBlur}\n                                        invalid={\n                                            touched.groceries &&\n                                            errors.groceries\n                                        }\n                                    />\n                                    Groceries\n                                </Label>\n                            </FormGroup>\n\n\n                            {/* <FormGroup check>\n                        <Label check>\n                            <Input\n                                type=\"radio\"\n                                name=\"addressType\"\n                                onChange={handleChange}\n                                value={\"secondary\"}\n                            />\n                            <img src={MapMarkerUrls.property.secondary} style={{height:\"30px\"}} />\n                        </Label>\n                    </FormGroup>    */}\n                        </FormGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n\n\n                        <Button block disabled={!isValid || isSubmitting}>\n                            {isSubmitting ? <Spinner size={'sm'} /> : 'Confirm'}\n                        </Button>\n                    </Col>\n                    <Col>\n                        <Button\n                            className=\"mt-1 mb-5\"\n                            color={'danger'}\n                            block\n                            onClick={() => {\n                                // const data = {\n                                //     email: utilsData.emailForChangeColor,\n                                //     color: color\n                                // };\n                                utilsData.showPreference = false;\n                                dispatch(showPreferenceForm());\n                            }}>\n                            Cancel\n                        </Button>\n                    </Col>\n\n\n                </Row>\n            </Form>\n        </Col>\n    );\n};\nexport default PreferenceForm;","import { MapMarkerUrls } from '../../../constants';\nimport React, { useState, useCallback } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Row,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n} from 'reactstrap';\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    CCardHeader,\n    CCol,\n    CForm,\n    CFormGroup,\n    CInput,\n    CInvalidFeedback,\n    CLabel,\n    CRow,\n    CSelect,\n    CSpinner,\n} from '@coreui/react';\nimport { Link } from 'react-router-dom';\nimport { changePropertyColor, cancelChangePropertyColor } from '../../../redux/actionCreators/appActionCreators';\nimport { useHistory } from 'react-router';\nimport FilesUpload from '../../../admin/file-upload/components/FilesUpload';\nimport { saveFlyers } from '../../../redux/actionCreators/adminActionCreators';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nconst validationSchema = Yup.object().shape({\n    description: Yup.string().required('full name is required'),\n});\n\n\nconst UploadFlyerForm = ({ callback }) => {\n\n    const utilsData = useSelector((state) => state.utilsData);\n    console.log('...utilsData..' + JSON.stringify(utilsData));\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [color, setColor] = useState('default');\n    const user = useSelector((state) => state.auth.me);\n\n    const uploadedFiles = useSelector((state) => state.admin.uploadedFiles);\n    // console.log('..uploadedFiles...from flyer edit..', uploadedFiles);\n    const property = utilsData.selectedProperty;\n    const shareUrl = \"https://klosertoyou.com/business-portal/\" + property.id;\n    const formik = useFormik({\n        initialValues: {\n            id: 0,\n            description: '',\n            uploadedFiles: []\n        },\n        validationSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n            console.log('..uploadedFiles..', uploadedFiles);\n            const data = {\n                ownerId: user.id,\n                description: values.description,\n                uploadedFiles: uploadedFiles\n            }\n            dispatch(saveFlyers(data))\n                .then(() => {\n                    console.log('...flyer upload DONE..');\n                    utilsData.showFlyerUpload = false;\n                    dispatch(cancelChangePropertyColor());\n                    setTimeout(\n                        window.location.replace(shareUrl),\n                        500);\n                })\n                .catch(() => setSubmitting(false));\n\n        },\n    });\n\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        values,\n        isValid,\n        isSubmitting,\n        resetForm,\n        setValues,\n        setFieldValue,\n        setFieldTouched,\n    } = formik;\n    return (\n        <Col md={6} sm={12} xs={12} className=\"overlay-form-container\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n\n            <Row style={{ width: \"80%\", paddingLeft: \"70px\" }}>\n\n                <Col style={{ textAlign: \"left\" }}>\n                    <CForm onSubmit={handleSubmit}>\n\n\n                        <Row>\n\n                            <CCol xs=\"12\">\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"description\">\n                                        Flyer Description\n                                    </CLabel>\n                                    <CInput\n                                        id=\"description\"\n                                        name=\"description\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.description}\n                                        invalid={\n                                            touched.description && errors.description\n                                        }\n                                    />\n                                    <CInvalidFeedback>\n                                        {errors.description}\n                                    </CInvalidFeedback>\n                                </CFormGroup>\n                            </CCol>\n\n                            <CCol xs=\"12\">\n                                <hr />\n                                Upload Flyers:\n                                <FilesUpload extension={\"application/pdf\"} />\n                            </CCol>\n\n\n\n\n                        </Row>\n                        <Row>\n                            <CCol xs=\"6\">\n                                <CButton\n                                    disabled={!isValid || isSubmitting}\n                                    type=\"submit\"\n\n                                    color=\"primary\">\n                                    {isSubmitting ? (\n                                        <CSpinner size=\"sm\" />\n                                    ) : (\n                                        'Submit'\n                                    )}\n                                </CButton>{' '}\n                            </CCol>\n                            <CCol xs=\"6\">\n                                <CButton\n                                    className=\"mt-1 mb-5\"\n                                    color={'danger'}\n                                    block\n                                    onClick={() => {\n\n                                        utilsData.showFlyerUpload = false;\n                                        dispatch(cancelChangePropertyColor());\n                                    }}>\n                                    Cancel\n                                </CButton>\n                            </CCol>\n                        </Row>\n\n                    </CForm>\n                </Col>\n            </Row>\n\n        </Col>\n    );\n};\nexport default UploadFlyerForm;","import { MapMarkerUrls } from '../../../constants';\nimport React, { useState, useCallback } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Button,\n    Row,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n} from 'reactstrap';\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    CCardHeader,\n    CCol,\n    CForm,\n    CFormGroup,\n    CInput,\n    CInvalidFeedback,\n    CLabel,\n    CRow,\n    CSelect,\n    CSpinner,\n} from '@coreui/react';\nimport { Link } from 'react-router-dom';\nimport { cancelChangePropertyColor } from '../../../redux/actionCreators/appActionCreators';\nimport { useHistory } from 'react-router';\nimport FilesUpload from '../../../admin/file-upload/components/FilesUpload';\nimport { importCustomer } from '../../../redux/actionCreators/adminActionCreators';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nconst ImportCustomeForm = ({ callback }) => {\n\n    const utilsData = useSelector((state) => state.utilsData);\n    console.log('...utilsData..' + JSON.stringify(utilsData));\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [color, setColor] = useState('default');\n    const user = useSelector((state) => state.auth.me);\n\n    const uploadedFiles = useSelector((state) => state.admin.uploadedFiles);\n    // console.log('..uploadedFiles...from flyer edit..', uploadedFiles);\n    // const property = utilsData.selectedProperty;\n    // const shareUrl = \"https://klosertoyou.com/business-portal/\" + property.id;\n    const formik = useFormik({\n        initialValues: {\n            uploadedFiles: []\n        },\n        onSubmit: (values, { setSubmitting }) => {\n            setSubmitting(true);\n            console.log('..uploadedFiles..', values);\n            const data = {\n                fileName: uploadedFiles[0].url\n            }\n            console.log('..data..', data);\n            dispatch(importCustomer(data))\n                .then(() => {\n                    setSubmitting(false);\n                    console.log('...flyer upload DONE..');\n                    utilsData.showImportCustomer = false;\n                    dispatch(cancelChangePropertyColor());\n                    history.push('/');\n\n                })\n                .catch(() => setSubmitting(false));\n\n        },\n    });\n\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        values,\n        isValid,\n        isSubmitting,\n        resetForm,\n        setValues,\n        setFieldValue,\n        setFieldTouched,\n    } = formik;\n    return (\n        <Col md={6} sm={12} xs={12} className=\"overlay-form-container\">\n            <Link to={'/'}>\n                <img\n                    className={'logo-container'}\n                    src={'/assets/img/logo-white.png'}\n                    alt={'logo'}\n                />\n            </Link>\n\n            <Row style={{ width: \"80%\", paddingLeft: \"70px\" }}>\n\n                <Col style={{ textAlign: \"left\" }}>\n                    <CForm onSubmit={handleSubmit}>\n\n\n                        <Row>\n\n                            <CCol xs=\"12\">\n                                <CFormGroup>\n                                    <CLabel htmlFor=\"description\">\n                                        Note: Please verify your Excel file is the same as\n                                        <a href='https://rest.klosertoyou.com/uploads/CUSTOMERLIST_7a2348c38f.xlsx'>this template</a>\n                                    </CLabel>\n\n                                    <CInvalidFeedback>\n                                        {errors.description}\n                                    </CInvalidFeedback>\n                                </CFormGroup>\n                            </CCol>\n\n                            <CCol xs=\"12\">\n                                <hr />\n                                Upload Excel File:\n                                <FilesUpload extension={\".xlsx\"} />\n                            </CCol>\n\n                        </Row>\n                        <Row>\n                            <CCol xs=\"6\">\n                                <CButton\n                                    disabled={!isValid || isSubmitting}\n                                    type=\"submit\"\n\n                                    color=\"primary\">\n                                    {isSubmitting ? (\n                                        <CSpinner size=\"sm\" />\n                                    ) : (\n                                        'Submit'\n                                    )}\n                                </CButton>{' '}\n                            </CCol>\n                            <CCol xs=\"6\">\n                                <CButton\n                                    className=\"mt-1 mb-5\"\n                                    color={'danger'}\n                                    block\n                                    onClick={() => {\n\n                                        utilsData.showImportCustomer = false;\n                                        dispatch(cancelChangePropertyColor());\n                                    }}>\n                                    Cancel\n                                </CButton>\n                            </CCol>\n                        </Row>\n\n                    </CForm>\n                </Col>\n            </Row>\n\n        </Col>\n    );\n};\nexport default ImportCustomeForm;","import mapboxgl from 'mapbox-gl';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Map from '../../../common/components/Map';\nimport MapContext from '../../../common/contexts/MapContext/MapContext';\nimport {\n    fetchUsers,\n    loadBusinessAddress,\n    loadConnected,\n    getAddressByType,\n    checkBusinessProfile\n} from '../../../redux/actionCreators/adminActionCreators';\nimport {\n    clearDistancesFromMap,\n    clearPropertiesFromMap,\n    clearResidentsFromMap,\n    showPrimaryDistancesOnMap,\n    showHomeAndBusinessOnMap,\n    showPropertiesOnMap,\n    showLineLayer,\n    clearLayer,\n    removeAllImages\n} from '../../../utils/mapUtils';\nimport { generateString } from '../../../utils/utils';\nimport {\n    generateEmail,\n    geocodeAddress,\n    reverseGeocodePoint,\n} from '../../../utils/propertyUtils';\nimport PropertiesTooltip from '../../../admin/components/PropertiesTooltip';\nimport PropertyForm from '../property/PropertyForm';\nimport { Button, Col, Form, Input, Row } from 'reactstrap';\nimport ReactDOM from 'react-dom';\nimport { setPropertyRegistrationForm } from '../../../redux/actionCreators/registrationActionCreators';\n\nimport { saveBatchProperties, deleteUserAdditionalAddressById } from '../../../redux/actionCreators/appActionCreators';\nimport { getMe } from '../../../redux/actionCreators/authActionCreators';\nimport {\n    MapMarkerUrls,\n} from '../../../constants';\nimport ChangeColorForm from './ChangeColorForm';\nimport BindingForm from './BindingForm';\n\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport booleanPointInPolygon from '@turf/boolean-point-in-polygon';\nimport FlyerForm from './FlyerForm';\nimport { convertAttributes, convertLocation, convertGeoProperty } from '../../../utils/utils';\nimport BusinessInfo from './BusinessInfo';\nimport { getLoginType } from '../../../utils/utils';\nimport { toastr } from 'react-redux-toastr';\nimport { parseInt } from 'lodash-es';\n// import mitt from 'mitt';\nimport EventBus from '../../../utils/eventBus';\nimport ShowHighRiseInfo from './ShowHighRiseInfo';\nimport ShowNoDelivery from './ShowNoDelivery';\nimport PreferenceForm from './PreferenceForm';\nimport UploadFlyerForm from './UploadFlyerForm';\nimport ImportCustomeForm from './ImportCustomeForm';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_GL_ACCESS_TOKEN;\n\nclass Showcase extends Component {\n    static contextType = MapContext;\n\n    state = {\n        pins: [],\n        mapInitialized: false,\n        searchText: '',\n        // active: false,\n        selectedAddress: null,\n        email: '',\n        properties: [],\n        changeColor: false,\n        layerAdded: [],\n        draw: null,\n        drawedBefore: false,\n        drawing: false,\n        selectedProperties: [],\n        feature: null,\n        selectedPropertyEmail: [],\n        satelliteMode: false,\n        showMapLegend: false,\n        showBusinessInfo: false,\n        propertyByTpe: null,\n        has2Address: true,\n        hasBusinessProfile: true,\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { map } = this.context;\n        const { mapInitialized } = this.state;\n        if (!mapInitialized && map) {\n            this.initializeLayers();\n\n            this.setState({\n                mapInitialized: true,\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        const { map } = this.context;\n        try {\n            if (map) {\n                clearPropertiesFromMap(map);\n                clearResidentsFromMap(map);\n                clearDistancesFromMap(map);\n                map.removeLayer('area');\n                map.removeSource('area');\n            }\n        } catch (e) {\n            console.log('..componment unmount error');\n        }\n    }\n\n\n\n    renderPropertiesTooltip = ({ id, email, property }) => {\n        const { utilsData, } = this.props;\n        const { properties } = this.state;\n        const { auth } = this.props;\n        const user = auth.user;\n        console.log('...renderPropertiesTooltip..', property);\n        if (property.usuage && parseInt(property.usuage) === 2) {\n            utilsData.selectedProperty = property;\n            utilsData.showBusinessInfo = true;\n            utilsData.fncCallback = this.cbBusinessInfoCallBack;\n\n            // if this is merchant login && this is merchant's property, check whether has no-delivery\n            const loginType = getLoginType();\n            if (parseInt(loginType) === 2) {\n                let noDeliveryCount = 0;\n                properties.map(item => {\n                    if (item.properties.no_delivery === 1) {\n                        noDeliveryCount++;\n                    }\n                })\n                if (noDeliveryCount > 0) {\n                    utilsData.properties = properties;\n                    utilsData.showBusinessInfo = true;\n                    utilsData.showNoDelivery = true;\n                    this.setState({\n                        showBusinessInfo: true,\n\n                    });\n                } else {\n                    this.setState({\n                        showBusinessInfo: true,\n                    });\n                }\n            } else {\n                this.setState({\n                    showBusinessInfo: true,\n                });\n            }\n\n\n        } else if ((parseInt(property.usuage) === 3 || parseInt(property.usuage) === 1) && property.settlement_type === 'highRise' && property.unit_no) {\n            utilsData.selectedProperty = property;\n            utilsData.showHighRiseInfo = true;\n            utilsData.fncCallback = this.cbBusinessInfoCallBack;\n            this.setState({\n                showBusinessInfo: true,\n            });\n\n        } else {\n            return <PropertiesTooltip email={email} id={id}\n                property={property} cb={this.removeProperty}\n                changeColor={this.changeColor} editMode={utilsData.editMode}\n                cbBinding={this.bindingProperty}\n                cbSendEmail={this.cbSendEmail}\n                cbBusiness={this.cbBusiness}\n                user={user}\n                cbBusinessInfo={this.cbBusinessInfo}\n            />;\n        }\n    };\n    cbSendEmail = (e, property) => {\n        const { utilsData } = this.props;\n        utilsData.drawFinished = true;\n        const data = [];\n        data.push({\n            properties: property\n        });\n        utilsData.selectedProperty = data;\n\n        this.setState({\n            selectedProperties: data,\n        });\n    }\n    changeColor = async (email) => {\n        const { utilsData } = this.props;\n        // const { properties } = this.state;\n        utilsData.changeColor = true;\n        utilsData.emailForChangeColor = email;\n        console.log('....setting utilsData.changeColor.....' + email);\n        this.setState({\n            changeColor: true\n        });\n    }\n    cbBusiness = async (email, property) => {\n        const { history } = this.props;\n        history.push(\"/business-profile?id=\" + property.id);\n    }\n    cbBusinessInfo = async (email, property) => {\n        const { utilsData } = this.props;\n        const { auth } = this.props;\n        utilsData.selectedProperty = property;\n        utilsData.showBusinessInfo = true;\n        utilsData.fncCallback = this.cbBusinessInfoCallBack;\n\n        this.setState({\n            showBusinessInfo: true,\n        });\n    }\n    cbBusinessInfoCallBack = () => {\n        console.log('...call back function works...');\n        this.redrawMap();\n    }\n    bindingProperty = async (email, property) => {\n        const { utilsData } = this.props;\n        if (property && property.is_business && (property.is_business === 1 || property.is_business === true)) {\n            //show business profile\n            utilsData.selectedProperty = property;\n            utilsData.showBusinessInfo = true;\n            utilsData.fncCallback = this.cbBusinessInfoCallBack;\n\n            this.setState({\n                showBusinessInfo: true,\n            });\n        } else {\n            console.log('..binding property..' + JSON.stringify(property));\n            utilsData.bindingProperty = true;\n            utilsData.emailForChangeColor = email;\n            utilsData.selectedProperty = property;\n            utilsData.fncCallback = this.cbBusinessInfoCallBack;\n            console.log('....setting utilsData.bindingProperty.....' + email);\n            this.setState({\n                bindingProperty: true\n            });\n        }\n    }\n    bindingBusiness = (email) => {\n\n    }\n    redrawMap = async () => {\n        const { map } = this.context;\n        if (map) {\n            clearPropertiesFromMap(map);\n            clearResidentsFromMap(map);\n            clearDistancesFromMap(map);\n            map.removeLayer('area');\n            map.removeSource('area');\n        }\n\n        const draw = new MapboxDraw({\n            controls: {\n                point: false,\n                line_string: false,\n                polygon: false,\n                trash: false,\n                combine_features: false,\n                uncombine_features: false,\n            },\n        });\n        const { loadConnected, } = this.props;\n        const { value: properties } = await loadConnected();\n        const convertedProperties = convertLocation(properties.value);\n\n        try {\n            //remove all the markers\n            const { pins } = this.state;\n            pins.map(pin => {\n                const markerTobeRemove = pin.marker;\n                markerTobeRemove.remove();\n            })\n\n            this.setState({\n                properties:\n                    convertedProperties.map((p) => ({\n                        type: 'Feature',\n                        properties: p,\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [\n                                p.location.longitude,\n                                p.location.latitude,\n                            ],\n                        },\n                    })),\n\n                draw: draw\n            });\n            map.addSource('area', {\n                type: 'geojson',\n                data: {\n                    type: 'FeatureCollection',\n                    features: [],\n                },\n            });\n            map.addLayer({\n                id: 'area',\n                type: 'fill',\n                source: 'area',\n                layout: {},\n                paint: {\n                    'fill-color': '#088',\n                    'fill-opacity': 0.8,\n                },\n            });\n\n            const popups = document.getElementsByClassName(\"mapboxgl-popup\");\n\n            if (popups.length) {\n                let popupTotal = popups.length;\n                for (let i = popupTotal - 1; i >= 0; i--) {\n                    console.log('...remove popup box i= ..' + i);\n                    try {\n                        if (popups[i]) {\n                            popups[i].remove();\n                        }\n                    } catch (e1) {\n                        console.log('..remove popup error..');\n                    }\n                };\n            }\n            const { auth } = this.props;\n            const user = auth.user;\n\n            if (user !== null && user !== undefined) {\n                showPropertiesOnMap(map, convertedProperties, this.renderPropertiesTooltip, false,);\n                showPrimaryDistancesOnMap(map, convertedProperties, user);\n                showHomeAndBusinessOnMap(map, convertedProperties, user);\n            } else {\n                showPropertiesOnMap(map, convertedProperties, this.renderPropertiesTooltip, false,);\n\n            }\n\n        } catch (e) {\n\n        }\n    }\n\n    changeColorCallack = async (callbackResult, color, email) => {\n        if (callbackResult) {\n            this.redrawMap();\n        } else {\n            // change color failed\n            // find the pin\n            // console.log('..this property not added yet, but we still need to update the color');\n            const { pins } = this.state;\n            const currentPin = pins.filter(item => item.email.split('@')[0] === email.split('@')[0]);\n            const othersPin = pins.filter(item => item.email.split('@')[0] !== email.split('@')[0]);\n            console.log('..others pin..' + othersPin.length + '..current pin..' + currentPin.length + ' email=' + email + ' color=' + color);\n            if (currentPin && currentPin.length > 0) {\n                //change the marker\n                const { map } = this.context;\n                const markerTobeRemove = currentPin[0].marker;\n                markerTobeRemove.remove();\n\n                const el = document.createElement('div');\n                const width = 48;\n                const height = 48;\n                el.className = 'marker';\n                let imgSrc = 'map-markers/blue_home_pin.png';\n                if (color === 'default') imgSrc = '/map-markers/blue_home_pin.png';\n                if (color === 'hasInjured') imgSrc = '/map-markers/red_home_pin.png';\n                if (color === 'pending') imgSrc = '/map-markers/grey_home_pin.png';\n                if (color === 'safe') imgSrc = '/map-markers/green_home_pin.png';\n                if (color === 'secondary') imgSrc = '/map-markers/second_home_pin.png';\n                console.log('..change color..' + imgSrc);\n                el.style.backgroundImage = `url(` + imgSrc + `)`;\n                el.style.width = `${width}px`;\n                el.style.height = `${height}px`;\n                el.style.backgroundSize = '100%';\n\n                const marker = new mapboxgl.Marker(el).setPopup(\n                    new mapboxgl.Popup({\n                        closeOnClick: true,\n                        closeButton: true,\n                        maxWidth: 'none',\n                    }).setHTML('<h1>No address</h1>'),\n                );\n                marker.setLngLat([currentPin[0].geocodeData.longitude, currentPin[0].geocodeData.latitude]);\n                marker.addTo(map);\n\n                const element = document.createElement('div');\n                ReactDOM.render(\n                    <div className={'info-window'}>\n                        <h4>{email}</h4>\n                        <Row className=\"justify-content-end \">\n                            <Col className=\"list-unstyled text-right\">\n\n                                <li>\n                                    <Button\n                                        size={'sm'}\n                                        onClick={() => this.bindingProperty(email)}>\n                                        Info\n                                    </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n                                    {/* <Button\n                                        size={'sm'}\n                                        onClick={() => this.changeColor(email)}>\n                                        Color\n                                    </Button> */}\n                                    {/* &nbsp;&nbsp;&nbsp;&nbsp; */}\n                                    <Button\n                                        size={'sm'}\n                                        onClick={() => this.addAddress(3)}>\n                                        Add\n                                    </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n\n                                    <Button\n                                        size={'sm'}\n                                        onClick={() => this.removeAddress(email)}>\n                                        Remove\n                                    </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n\n                                </li>\n                            </Col>\n                        </Row>\n                    </div>,\n                    element,\n                );\n\n                marker.getPopup().setDOMContent(element);// setHTML(html);\n\n                this.setState((state) => {\n                    return {\n                        ...state,\n                        pins: [\n                            ...othersPin,\n                            {\n                                marker,\n                                email: currentPin[0].email,\n                                geocodeData: currentPin[0].geocodeData,\n                                color: color\n                            },\n                        ],\n                    };\n                });\n            }\n        }\n    }\n    removeProperty = async (email, primaryAddress) => {\n        console.log('..remove this property..' + email);\n        const prePart = email.split('@')[0];\n        const { properties } = this.state;\n        let tobeRemain = properties.filter(property => property.properties.email.split('@')[0] !== prePart);\n        let tobeDelete = properties.filter(property => property.properties.email.split('@')[0] === prePart);\n        if (primaryAddress) {\n            const { history } = this.props;\n            history.push(\"/edit-property\");\n            return;\n        }\n        // console.log('..to be remove..' + JSON.stringify(tobeDelete));\n        //clear everything, then reload\n        const { deleteUserAdditionalAddressById } = this.props;\n        const { utilsData } = this.props;\n\n        if (tobeDelete && tobeDelete.length > 0) {\n            const resp = await deleteUserAdditionalAddressById(tobeDelete[0].properties.id);\n            //need to change total connected count\n            // console.log('.. property to be deleted, color is: ' + tobeDelete[0].properties.color);\n            if (tobeDelete[0].properties.color !== \"grey\") {\n                // console.log('....should change total connected...');\n                // const emitter = mitt();\n                // emitter.emit('onTotalConnectChange', { totalConnected: -1 })\n                EventBus.$dispatch('onTotalConnectChange', { totalConnected: -1 });\n                // console.log('....emitter event onTotalConnectChange ...');\n            }\n        }\n        const { map } = this.context;\n\n\n        try {\n\n            const popups = document.getElementsByClassName(\"mapboxgl-popup\");\n\n\n            if (popups.length) {\n                let popupTotal = popups.length;\n                for (let i = popupTotal - 1; i >= 0; i--) {\n                    console.log('...remove popup box i= ..' + i);\n                    try {\n                        if (popups[i]) {\n                            popups[i].remove();\n                        }\n                    } catch (e1) {\n                        console.log('..remove popup error..');\n                    }\n                };\n            }\n            // const {pins} = this.state;\n\n            // const currentPin =  pins.filter(item => item.email ===  email);\n            // if(currentPin && currentPin.length >0){\n            //     if (currentPin[0].marker.getPopup().isOpen()) {\n            //         currentPin[0].marker.togglePopup();\n            //       }\n            // }\n\n\n            // console.log('...remove map...');\n            if (map) {\n                clearPropertiesFromMap(map);\n                clearResidentsFromMap(map);\n                clearDistancesFromMap(map);\n                // removeAllImages(map);\n            }\n            this.setState({\n                properties: tobeRemain\n            });\n            // console.log('...redraw the map after remove property...');\n            const properties = convertGeoProperty(tobeRemain);\n            const { auth } = this.props;\n            const user = auth.user;\n            showPropertiesOnMap(map, properties, this.renderPropertiesTooltip, false,);\n\n            showPrimaryDistancesOnMap(map, properties, user);\n            showHomeAndBusinessOnMap(map, properties, user);\n        } catch (e) {\n\n            console.log('...remove property error...' + JSON.stringify(e));\n        }\n    }\n\n    async initializeLayers() {\n        const { map } = this.context;\n        const { loadConnected, loadBusinessAddress, getAddressByType, checkBusinessProfile } = this.props;\n        const draw = new MapboxDraw({\n            controls: {\n                point: false,\n                line_string: false,\n                polygon: false,\n                trash: false,\n                combine_features: false,\n                uncombine_features: false,\n            },\n        });\n        const { auth } = this.props;\n        const user = auth.user;\n        let convertedProperties = [];\n        let loginHints = '';\n\n        if (user === null || user === undefined) {\n            const { value: properties } = await loadBusinessAddress();\n\n            convertedProperties = convertLocation(properties.propertyInfo);\n        } else {\n            const { value: properties } = await loadConnected();\n            convertedProperties = convertLocation(properties.value);\n            const loginType = getLoginType();\n            const { value: property } = await getAddressByType(loginType);\n            // console.log('.. property by type..' + JSON.stringify(property));\n\n            if (property.value && property.value.length > 0) {\n                //already has business Or Home Address\n                // loginHints = 'Please login to access account';\n            } else {\n                this.setState({\n                    has2Address: false,\n                });\n                // loginHints = 'Please login to access account and complete registration';\n                // const usuage = parseInt(loginType) === 1 ? ' Home Address' : ' Business Address';\n                let msg = 'Please switch to Edit Mode and add your Business Address';\n                if (parseInt(loginType) === 1) {\n                    msg = 'Please enter and register home address';\n                }\n                toastr.info('Tips', msg);\n            }\n            if (parseInt(loginType) === 2) {\n                const { value: hasBusinessProfile } = await checkBusinessProfile();\n                console.log('..hasBusinessProfile..' + JSON.stringify(hasBusinessProfile));\n                if (parseInt(hasBusinessProfile.value[0].profileTotal) === 0) {\n                    toastr.info('Tips', \"Please setup your business profile!\");\n                    if (property.value && property.value.length > 0) {\n                        location.href = '/business-profile?id=' + property.value[0].id\n                    } else {\n                        console.log('..me is ..' + JSON.stringify(user));\n                    }\n                }\n            }\n\n        }\n\n        // console.log('..load business.. ' + JSON.stringify(convertedProperties));\n        try {\n            this.setState({\n                properties:\n                    convertedProperties.map((p) => ({\n                        type: 'Feature',\n                        properties: p,\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [\n                                p.location.longitude,\n                                p.location.latitude,\n                            ],\n                        },\n                    })),\n\n                draw: draw\n            });\n            map.addSource('area', {\n                type: 'geojson',\n                data: {\n                    type: 'FeatureCollection',\n                    features: [],\n                },\n            });\n            map.addLayer({\n                id: 'area',\n                type: 'fill',\n                source: 'area',\n                layout: {},\n                paint: {\n                    'fill-color': '#088',\n                    'fill-opacity': 0.8,\n                },\n            });\n\n            if (user === null || user === undefined) {\n                showPropertiesOnMap(map, convertedProperties, this.renderPropertiesTooltip, true,);\n            } else {\n                showPropertiesOnMap(map, convertedProperties, this.renderPropertiesTooltip, true,);\n                showPrimaryDistancesOnMap(map, convertedProperties, user);\n                showHomeAndBusinessOnMap(map, convertedProperties, user);\n            }\n            // showResidentsOnMap(map, residents, this.renderResidentsTooltip);\n            const showLoginTips = localStorage.getItem('show_login_tips');\n            if (showLoginTips && parseInt(showLoginTips) === 1) {\n                localStorage.removeItem('show_login_tips');\n\n                toastr.info('Tips', 'Please login to access account');\n            }\n            if (showLoginTips && parseInt(showLoginTips) === 2) {\n                localStorage.removeItem('show_login_tips');\n\n                toastr.info('Tips', 'Please login to access account and complete registration');\n            }\n\n\n        } catch (e) {\n            console.log('init map layer error:' + JSON.stringify(e));\n        }\n        // map.on('click', this.onClickMap);\n    }\n\n    onClickMap = (e) => {\n        const { lng: longitude, lat: latitude } = e.lngLat;\n        // console.log('..map..on click..' + longitude);\n        const { utilsData, auth } = this.props;\n        const user = auth.user;\n        if (utilsData.editMode) {\n            console.log('..in edit mode..');\n            this.createMarker({ latitude, longitude });\n        } else {\n            if (user === null || user == undefined) {\n                //user logout Or not register\n                this.createMarker({ latitude, longitude });\n            } else {\n                console.log('.. editMode turn off..');\n            }\n        }\n    };\n\n\n\n    createMarker = async ({ latitude, longitude }) => {\n        // const {domain} = this.state;\n        const { map } = this.context;\n        const loginType = getLoginType();\n        const { has2Address } = this.state;\n\n        let addText = 'Add';\n        let usuage = 3;\n        if (!has2Address) {\n            if (parseInt(loginType) === 1) {\n                addText = 'Add Home Address'\n                usuage = 1;\n            } else {\n                addText = 'Add Business Address'\n                usuage = 2;\n            }\n\n        }\n        const el = document.createElement('div');\n        const width = 48;\n        const height = 48;\n        el.className = 'marker';\n        el.style.backgroundImage = `url(https://klosertoyou.com/map-markers/blue_home_pin.png)`;\n        el.style.width = `${width}px`;\n        el.style.height = `${height}px`;\n        el.style.backgroundSize = '100%';\n\n        const marker = new mapboxgl.Marker(el).setPopup(\n            new mapboxgl.Popup({\n                closeOnClick: true,\n                closeButton: true,\n                maxWidth: 'none',\n            }).setHTML('<h1>No address</h1>'),\n        );\n        marker.setLngLat([longitude, latitude]);\n        marker.addTo(map);\n\n        marker.on('dragend', this.onDragMarker);\n        marker.on('click', () => marker.togglePopup());\n\n        const geocodeData = await reverseGeocodePoint({ longitude, latitude });\n\n        let domain = localStorage.getItem('current_domain');\n        if (domain === undefined || domain === null) {\n            domain = 'alphc.com'\n        }\n        const email = generateEmail(geocodeData) + '@' + domain;\n        this.setState({\n            selectedAddress: geocodeData,\n            email: email\n        });\n        const { auth } = this.props;\n\n\n        const element = document.createElement('div');\n\n        if (auth.user !== null && auth.user !== undefined) {\n            //这里需要区分\n            ReactDOM.render(\n                <div className={'info-window'}>\n                    <h4>{email}</h4>\n                    <Row className=\"justify-content-end \">\n                        <Col className=\"list-unstyled text-right\">\n\n                            <li>\n                                {/* <Button\n                                    size={'sm'}\n                                    onClick={() => this.addUnitNumber(email)}>\n                                    Add Unit #\n                                </Button>\n                                &nbsp;&nbsp;&nbsp;&nbsp; */}\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => this.addAddress(usuage)}>\n                                    {addText}\n                                </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => this.removeAddress(email)}>\n                                    Remove\n                                </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n\n                            </li>\n                        </Col>\n                    </Row>\n                </div>,\n                element,\n            );\n        } else {\n            ReactDOM.render(\n                <div className={'info-window'}>\n                    <h4>{email}</h4>\n                    <Row className=\"justify-content-end \">\n                        <Col className=\"list-unstyled text-right\">\n                            <li>\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => this.activateAddress()}>\n                                    Activate this address\n                                </Button>\n                            </li>\n                        </Col>\n                    </Row>\n                </div>,\n                element,\n            );\n        }\n\n        marker.getPopup().setDOMContent(element);// setHTML(html);\n        marker.togglePopup();\n\n\n        const { pins } = this.state;\n        // console.log('..pins..' + JSON.stringify(pins));\n\n\n        if (auth.user !== null && auth.user !== undefined) {\n            pins.forEach((p) => {\n                // console.log('..pins..' + JSON.stringify(p));\n                if (p.marker.getPopup().isOpen()) {\n                    p.marker.togglePopup();\n                }\n            });\n            this.setState((state) => {\n                return {\n                    ...state,\n                    pins: [\n                        ...pins,\n                        {\n                            marker,\n                            email,\n                            geocodeData,\n                            color: 'default'\n                        },\n                    ],\n                };\n            });\n        } else {\n            pins.forEach((p) => {\n                // console.log('..pins..' + JSON.stringify(p));\n                if (p.marker.getPopup().isOpen()) {\n                    p.marker.togglePopup();\n                }\n                const marker = p.marker;\n                marker.remove();\n            });\n            this.setState((state) => {\n                return {\n                    ...state,\n                    pins: [\n                        {\n                            marker,\n                            email,\n                            geocodeData,\n                        },\n                    ],\n                };\n            });\n        }\n    };\n\n    removeAddress = (emailIn) => {\n        const { pins } = this.state;\n        const tobeRemove = pins.filter((p) => p.email === emailIn);\n        const marker = tobeRemove[0].marker;\n        marker.remove();\n        const data = pins.filter((p) => p.email !== emailIn);\n        this.setState((state) => {\n            return {\n                ...state,\n                pins: data,\n            };\n        });\n        //check wheter exist\n        const { layerAdded } = this.state;\n        // console.log('..layerAdded..' + JSON.stringify(layerAdded) + \" ..emailIn..\" + emailIn);\n        let tobeDelete = layerAdded.filter(layer => layer.email === emailIn);\n        const { map } = this.context;\n        if (tobeDelete && tobeDelete.length > 0) {\n            // console.log('..tobeDelete..' + JSON.stringify(tobeDelete));\n            clearLayer(map, tobeDelete[0].layerId);\n        }\n\n    }\n    addUnitNumber = (email) => {\n        const unitNumber = prompt(\"Please enter unit number\", \"\");\n        if (unitNumber) {\n            //change property address\n            const { selectedAddress, properties, pins, } = this.state;\n            const currentPin = pins.filter(item => item.email === email);\n            console.log('..selectedAddress..' + JSON.stringify(selectedAddress));\n            selectedAddress.unitNo = unitNumber;\n            const emailDisplay = generateEmail(selectedAddress);\n            console.log('..emailDisplay..' + emailDisplay);\n            selectedAddress.email = emailDisplay;\n            currentPin[0].email = emailDisplay;\n            this.setState({\n                selectedAddress: selectedAddress,\n                pins: pins\n            });\n\n\n        }\n    }\n    addAddress = (usuage) => {\n        const { selectedAddress, email, properties, pins, layerAdded, has2Address } = this.state;\n        const { map } = this.context;\n        const { utilsData } = this.props;\n        const loginType = getLoginType();\n        const currentPin = pins.filter(item => item.email === email);\n        const postData = {\n            item: {\n                email: email,\n                usuage: usuage,\n                ...selectedAddress,\n                color: has2Address ? 'grey' : parseInt(loginType) === 1 ? 'default' : 'red' //consumer is pending\n            }\n        }\n        const data = {\n            type: 'Feature',\n            properties: {\n                email: email,\n                ...selectedAddress,\n                color: currentPin[0].color\n            },\n            geometry: {\n                type: 'Point',\n                coordinates: [\n                    selectedAddress.location.longitude,\n                    selectedAddress.location.latitude,\n                ],\n            },\n        }\n        const { saveBatchProperties, getMe } = this.props;\n        properties.push(data);\n        saveBatchProperties(postData).then(async (resp) => {\n            // console.log('..saveBatchProperties..' + JSON.stringify(resp));\n            //remove the popup and show line\n\n            // console.log('..pins..' + JSON.stringify(pins));\n\n            //  pins.forEach((p) => {\n            //      // console.log('..pins..' + JSON.stringify(p));\n            //      if (p.marker.getPopup().isOpen()) {\n            //          p.marker.togglePopup();\n            //      }\n            //  });\n\n            //  console.log('... current pin ..'  +  currentPin.length );\n            if (currentPin) {\n                //rebind\n                const element = document.createElement('div');\n\n                ReactDOM.render(\n                    <div className={'info-window'}>\n                        <h4>{email}</h4>\n                        <Row className=\"justify-content-end \">\n                            <Col className=\"list-unstyled text-right\">\n\n                                <li>\n                                    <Button\n                                        size={'sm'}\n                                        onClick={() => this.bindingProperty(email)}>\n                                        Info\n                                    </Button>\n                                    &nbsp;&nbsp;&nbsp;&nbsp;\n                                    {/* <Button\n                                        size={'sm'}\n                                        onClick={() => this.changeColor(email)}>\n                                        Color\n                                    </Button>\n                                    &nbsp;&nbsp;&nbsp;&nbsp; */}\n\n                                    <Button\n                                        size={'sm'}\n                                        onClick={() => this.removeAddress(email)}>\n                                        Remove\n                                    </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n\n                                </li>\n                            </Col>\n                        </Row>\n                    </div>,\n                    element,\n                );\n                currentPin[0].marker.getPopup().setDOMContent(element);\n                if (currentPin[0].marker.getPopup().isOpen()) {\n                    currentPin[0].marker.togglePopup();\n                }\n            }\n\n            //  this.redrawMap();\n            //get primery address\n            const primaryAddress = properties.filter(property => property.properties.primaryAddress === true);\n\n\n            const residentsWithLocation = [];\n            residentsWithLocation.push(selectedAddress);\n            const randomString = generateString(10);\n\n            const newItem = {\n                email: email,\n                layerId: randomString\n            };\n            layerAdded.push(newItem);\n            this.setState({\n                layerAdded: layerAdded,\n                properties: properties\n            });\n            if (primaryAddress && primaryAddress.length > 0) {\n                showLineLayer(\n                    map,\n                    MapMarkerUrls.user.injured,\n                    randomString,\n                    residentsWithLocation,\n                    (i) => [\n                        [primaryAddress[0].properties.location.longitude, primaryAddress[0].properties.location.latitude],\n                        [i.location.longitude, i.location.latitude],\n                    ],\n                );\n            }\n\n\n            console.log('..binding property..' + JSON.stringify(selectedAddress));\n            utilsData.bindingProperty = true;\n            utilsData.emailForChangeColor = email;\n            utilsData.selectedProperty = selectedAddress;\n            utilsData.fncCallback = this.cbBusinessInfoCallBack;\n            // console.log('....setting utilsData.bindingProperty.....' + email);\n            if (has2Address) {\n                this.setState({\n                    bindingProperty: true\n                });\n            } else {\n                // get me and reload to refresh data\n                getMe(loginType).then(resp => {\n                    location.reload()\n                }).catch(error => {\n                    toastr.error('Error', \"Get information error!\");\n                });\n\n\n            }\n\n        });\n\n    }\n    activateAddress = () => {\n        const { setPropertyRegistrationForm, registerForm } = this.props;\n        const { selectedAddress } = this.state;\n        //  = address;\n        console.log('..selectedAddress..' + JSON.stringify(selectedAddress));\n        let that = this;\n        registerForm.address = selectedAddress;\n        setPropertyRegistrationForm({\n            address: selectedAddress,\n            active: true,\n        });\n        this.setState({\n            // active: true,\n            address: selectedAddress\n        });\n        // dispatch(\n        //     setPropertyRegistrationForm({\n        //         // address: data,\n        //         active: true,\n        //         // rural: Object.values(data).some((value) => !value),\n        //     }),\n        // );\n    };\n    onDragMarker = async (event) => {\n        const { pins } = this.state;\n\n        pins.forEach((p) => {\n            if (p.marker.getPopup().isOpen()) {\n                p.marker.togglePopup();\n            }\n        });\n\n        const { lng: longitude, lat: latitude } = event.target.getLngLat();\n\n        const geocodeData = await reverseGeocodePoint({ longitude, latitude });\n        let domain = localStorage.getItem('current_domain');\n        if (domain === undefined || domain === null) {\n            domain = 'alphc.com'\n        }\n        const email = generateEmail(geocodeData) + '@' + domain;\n        this.setState({\n            selectedAddress: geocodeData,\n            email: email\n        });\n\n        const index = pins.map((p) => p.marker === event.target).indexOf(true);\n\n        const marker = pins[index].marker;\n        const { auth } = this.props;\n\n        const element = document.createElement('div');\n\n        if (auth.user !== null && auth.user !== undefined) {\n            ReactDOM.render(\n                <div className={'info-window'}>\n                    <h4>{email}@alphc.com</h4>\n                    <Row className=\"justify-content-end \">\n                        <Col className=\"list-unstyled text-right\">\n                            <li>\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => this.removeAddress(email)}>\n                                    Remove\n                                </Button> &nbsp;&nbsp;&nbsp;&nbsp;\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => this.addAddress(3)}>\n                                    Add\n                                </Button>\n                            </li>\n                        </Col>\n                    </Row>\n                </div>,\n                element,\n            );\n        } else {\n            ReactDOM.render(\n                <div className={'info-window'}>\n                    <h4>{email}@alphc.com</h4>\n                    <Row className=\"justify-content-end \">\n                        <Col className=\"list-unstyled text-right\">\n                            <li>\n                                <Button\n                                    size={'sm'}\n                                    onClick={() => this.activateAddress()}>\n                                    Activate this address\n                                </Button>\n                            </li>\n                        </Col>\n                    </Row>\n                </div>,\n                element,\n            );\n        }\n\n        marker.getPopup().setDOMContent(element);\n        marker.togglePopup();\n\n        this.setState((state) => {\n            return {\n                ...state,\n                pins: [\n                    ...pins.slice(0, index),\n                    {\n                        marker,\n                        email,\n                    },\n                    ...pins.slice(index + 1, pins.length),\n                ],\n            };\n        });\n    };\n    onSubmitSearch = (e) => {\n        e.preventDefault();\n\n        const { searchText } = this.state;\n\n        if (!searchText.trim()) return;\n        geocodeAddress({ address: searchText }).then((data) => {\n            const { map } = this.context;\n\n            if (data) {\n                this.createMarker({\n                    latitude: data.latitude,\n                    longitude: data.longitude,\n                });\n\n                map.flyTo({\n                    center: [data.longitude, data.latitude],\n                });\n            }\n        });\n    };\n    onChangeSearchText = (e) => {\n        this.setState({\n            searchText: e.currentTarget.value,\n        });\n    };\n    toggleSatelliteMode = (e) => {\n        const { satelliteMode } = this.state;\n        const { map } = this.context;\n        if (!satelliteMode) {\n            map.setStyle('mapbox://styles/mapbox/satellite-streets-v12');\n        } else {\n            map.setStyle('mapbox://styles/mapbox/streets-v12');\n        }\n        this.setState({\n            satelliteMode: !satelliteMode,\n        });\n        this.redrawMap();\n    }\n    toggleDrawing = (e) => {\n        const { drawing, draw, selectedProperties, feature, properties } = this.state;\n        console.log('...toggleDrawing...');\n        const { map } = this.context;\n        const { utilsData } = this.props;\n        utilsData.drawing = !drawing;\n        if (!drawing) {\n            try {\n                map.addControl(draw, 'top-left');\n                draw.changeMode(draw.modes.DRAW_POLYGON);\n\n                map.getSource('area').setData({\n                    type: 'FeatureCollection',\n                    features: [],\n                });\n                this.setState({\n                    drawing: !drawing,\n                    selectedProperties: [],\n                    feature: null,\n                    selectedPropertyEmail: []\n                });\n            } catch (e) {\n\n            }\n        } else {\n            const featureCollection = draw.getAll();\n            try {\n                map.getSource('area').setData(featureCollection);\n            } catch (e) {\n\n            }\n\n            const data = properties.filter((p) =>\n                booleanPointInPolygon(p, featureCollection.features[0]),\n            );\n            let selected = [];\n            selectedProperties.map(property => {\n                let columnJson = {\n                    \"Email\": property.properties.email\n                }\n                selected.push(columnJson)\n            });\n            console.log(' end drawing 1=' + JSON.stringify(data) + ' 2=' + JSON.stringify(selected));\n\n            // const { properties } = this.state;\n            utilsData.drawFinished = true;\n\n            utilsData.selectedProperty = data;\n            utilsData.fncCallback = this.cbBusinessInfoCallBack;\n            this.setState({\n                drawing: !drawing,\n                selectedProperties: data,\n                selectedPropertyEmail: selected,\n                feature: featureCollection.features[0]\n            });\n            map.removeControl(draw);\n        }\n\n    }\n    toggleShowMapLegend = (e) => {\n        const { showMapLegend } = this.state;\n        this.setState({\n            showMapLegend: !showMapLegend,\n        });\n    }\n    PropertyMarkerDescriptions = [\n        {\n            marker: MapMarkerUrls.property.default,\n            description: 'Add your Address Makers based on need and requirements',\n        },\n        {\n            marker: MapMarkerUrls.property.hasInjured,\n            description:\n                'Add your Address Makers based on need and requirements',\n        },\n        {\n            marker: MapMarkerUrls.property.pending,\n            description:\n                'Add your Address Makers based on need and requirements',\n        },\n        {\n            marker: MapMarkerUrls.property.safe,\n            description:\n                'Add your Address Makers based on need and requirements',\n        },\n    ];\n    render() {\n        const { pins, searchText, drawing, satelliteMode, showMapLegend, has2Address, } = this.state;\n        const { utilsData, active, editMode, auth } = this.props;\n\n        const user = auth.user;\n        let showIcon = true;\n        const loginType = getLoginType();\n        if (user === null || user === undefined) showIcon = false;\n        if (utilsData.editMode) showIcon = false;\n        if (utilsData.changeColor) showIcon = false;\n        if (utilsData.bindingProperty) showIcon = false;\n        if (utilsData.drawFinished) showIcon = false;\n        if (utilsData.showBusinessInfo) showIcon = false;\n        if (utilsData.connectToMerchantId > 0) showIcon = false;\n        if (showMapLegend) showIcon = false;\n        if (parseInt(loginType) === 1) showIcon = false;\n        let mapDisabled = false;\n        if (!utilsData.editMode && user !== null && user !== undefined) {\n            if (parseInt(loginType) === 1 && !has2Address) {\n                // mapDisabled = true;\n            } else {\n                mapDisabled = true;\n            }\n        }\n\n        return <>\n            <div className={'showcase-map-top-actions'}>\n                <div className={'search-actions'}>\n                    {user !== null && user !== undefined && parseInt(loginType) === 1 && has2Address ? null : <Form onSubmit={this.onSubmitSearch}>\n                        <Input\n                            bsSize={'lg'}\n                            disabled={mapDisabled}\n                            className=\"\"\n                            value={searchText}\n                            onChange={this.onChangeSearchText}\n                            placeholder={'Search...'}\n                        />\n                    </Form>}\n                </div>\n            </div>\n\n            {!showIcon ? null : satelliteMode ? null :\n                drawing ?\n                    (\n\n                        <i title='End Drawing' onClick={(e) => this.toggleDrawing(e)} className=\"draw-button fa-2x fa-solid fa-arrow-pointer\"></i>\n\n                    ) : (\n\n\n                        <i title='Pan, Draw, Connect, Addresses boundary and identify area to Send Email' onClick={(e) => this.toggleDrawing(e)} className=\"draw-button fa-2x fa-solid fa-draw-polygon\"></i>\n\n\n                    )\n            }\n            {\n                !showIcon ? null : satelliteMode ?\n                    (\n                        <i onClick={(e) => this.toggleSatelliteMode(e)} className=\"satellite-button red-color fa-2x fa-solid fa-globe\"></i>\n                    ) :\n                    (\n                        <i onClick={(e) => this.toggleSatelliteMode(e)} className=\"satellite-button fa-2x fa-solid fa-satellite\"></i>\n                    )\n\n\n            }\n\n\n            {!showIcon ? null : !showMapLegend && (\n                <>\n\n                    <i\n                        className=\"mapLegend-button  close-button fa-3x fa fa-question\"\n                        onClick={(e) => this.toggleShowMapLegend(e)}\n                    />\n\n                </>\n            )}\n            {showMapLegend && (\n                <div className=\"map-legend_content\">\n                    <i\n                        className=\"mapLegend-button-close  fa fa-3x fa-close\"\n                        onClick={(e) => this.toggleShowMapLegend(e)}\n                    />\n\n                    <b>Address Markers</b>\n\n                    <table>\n                        <tr><td > Business </td>\n                            <td>\n                                <img\n                                    alt={this.PropertyMarkerDescriptions[1].description}\n                                    src={this.PropertyMarkerDescriptions[1].marker}\n                                    height={20}\n                                /> &nbsp;&nbsp;\n                            </td>\n                            <td > Connected Customer </td>\n                            <td>\n                                <img\n                                    alt={this.PropertyMarkerDescriptions[0].description}\n                                    src={this.PropertyMarkerDescriptions[0].marker}\n                                    height={20}\n                                /> &nbsp;&nbsp;\n                            </td>\n                            <td > Unactivated </td>\n                            <td>\n                                <img\n                                    alt={this.PropertyMarkerDescriptions[2].description}\n                                    src={this.PropertyMarkerDescriptions[2].marker}\n                                    height={20}\n                                /> &nbsp;&nbsp;\n                            </td>\n                        </tr>\n                        {/* <tr>\n                        {this.PropertyMarkerDescriptions.map(\n                            ({ marker, description }) => (\n\n                                <td>\n                                    <img\n                                        alt={description}\n                                        src={marker}\n                                        height={40}\n                                    /> &nbsp;&nbsp;\n                                </td>\n\n\n                            ),\n                        )}\n                    </tr>\n                    <tr><td colSpan={this.PropertyMarkerDescriptions.length}><hr />{this.PropertyMarkerDescriptions[0].description}<hr /></td></tr> */}\n                    </table>\n                    <hr />\n                    <table>\n                        <tr>\n                            <td>\n                                <img\n                                    alt='Manually add clients'\n                                    src={MapMarkerUrls.extra.edit_mode}\n                                    height={30}\n                                /> &nbsp;&nbsp;\n                            </td>\n                            <td>Manually Add Clients</td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <img\n                                    alt='Connect with Clients'\n                                    src={MapMarkerUrls.extra.connect_mode}\n                                    height={30}\n                                /> &nbsp;&nbsp;\n                            </td>\n                            <td>Connect with Clients</td>\n                        </tr>\n                    </table>\n\n                    <hr />\n                    <b>Tools Bar</b>\n                    <table>\n                        <tr><td><i className=\"fa-2x fa-solid fa-draw-polygon\"></i></td><td>Pan, Draw, Connect, Addresses boundary and identify area to Send Email<hr /></td></tr>\n                        <tr><td><i className=\"fa-2x fa-solid fa-arrow-pointer\"></i></td><td>Send Email to identified Opt-in Addresses<hr /></td></tr>\n                        <tr><td><i className=\"fa-2x fa-solid fa-satellite\"></i></td><td>Satellite Mode<hr /></td></tr>\n                        <tr><td><i className=\"fa-2x fa-solid fa-globe\"></i></td><td>Map Mode</td></tr>\n                    </table>\n\n\n\n                </div>\n            )}\n\n            <Map />\n            {active && <PropertyForm />}\n            {utilsData.changeColor && <ChangeColorForm callback={this.changeColorCallack} />}\n            {utilsData.bindingProperty && <BindingForm />}\n            {utilsData.drawFinished && <FlyerForm />}\n            {utilsData.showBusinessInfo && <BusinessInfo />}\n            {utilsData.connectToMerchantId > 0 && <PropertyForm />}\n            {utilsData.showHighRiseInfo && <ShowHighRiseInfo />}\n            {utilsData.showNoDelivery && <ShowNoDelivery />}\n            {utilsData.showPreference && <PreferenceForm />}\n            {utilsData.showFlyerUpload && <UploadFlyerForm />}\n            {utilsData.showImportCustomer && <ImportCustomeForm />}\n\n        </>\n\n            ;\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    registerForm: state.registerForm,\n    active: state.registerForm.active,\n    utilsData: state.utilsData,\n    editMode: state.utilsData.editMode\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    getAddressByType: (data) =>\n        dispatch(getAddressByType(data)),\n    loadBusinessAddress: () =>\n        dispatch(loadBusinessAddress()),\n    loadConnected: (data) =>\n        dispatch(loadConnected(data)),\n    fetchUsers: () => dispatch(fetchUsers({ page: 1, pageSize: 100000 })),\n    setPropertyRegistrationForm: (data) => dispatch(setPropertyRegistrationForm(data)),\n    saveBatchProperties: (data) => dispatch(saveBatchProperties(data)),\n    deleteUserAdditionalAddressById: (propertyId) => dispatch(deleteUserAdditionalAddressById(propertyId)),\n    checkBusinessProfile: () => dispatch(checkBusinessProfile()),\n    getMe: (loginType) => dispatch(getMe(loginType)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(withRouter(Showcase));\n","import React from \"react\";\n\nconst Splash = () => {\n    return (\n        <div className=\"full-screen splash-screen isLoading\">\n            <h1 className=\"splash-text\" style={{ marginBottom: \"60px\" }}>KloserToYou</h1>\n            <img\n                className=\"splash-image\"\n                src={'/assets/img/logo-alphc.png'}\n                alt={'logo'}\n            />\n            <h1 className=\"splash-text\">INFINITE MARKETING POSSIBILITIES</h1>\n        </div>\n    );\n};\n\nexport default Splash;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router';\nimport { TabContent, TabPane } from 'reactstrap';\nimport MapProvider from '../../common/contexts/MapContext/MapProvider';\nimport HomeLayout from '../layouts/HomeLayout';\n\nimport Showcase from './newHome/Showcase';\nimport Splash from './newHome/Splash';\n\nconst Home = () => {\n    const { pathname: location } = useLocation();\n\n\n    const [activeTab, setActiveTab] = useState('');\n    const [timeoutHandle, setTimeoutHandle] = useState(null);\n\n    useEffect(() => {\n        if (location === '/') {\n            setActiveTab(location);\n            const handle = setTimeout(() => {\n                setActiveTab('_showcase');\n            }, 2000);\n\n            setTimeoutHandle(handle);\n        } else {\n            clearTimeout(timeoutHandle);\n            setTimeoutHandle(null);\n            setActiveTab(location);\n        }\n    }, [location]); // eslint-disable-line react-hooks/exhaustive-deps\n    //check login\n    const user = useSelector((state) => state.auth.me);\n    if (user === null || user === undefined) {\n        // window.location.href = '/login';\n        // return;\n    }\n    return (\n\n        <HomeLayout>\n            <TabContent activeTab={activeTab} className=\"home-tab-content\">\n                <TabPane tabId=\"_showcase\" className=\"\">\n                    <MapProvider>\n                        {activeTab === '_showcase' && <Showcase />}\n                    </MapProvider>\n                </TabPane>\n\n                <TabPane tabId=\"/\" className=\"\">\n                    <Splash />\n                </TabPane>\n\n                {/* <TabPane tabId=\"/admin/users\" className=\"\">\n                    <Users />\n                </TabPane>\n                <TabPane tabId=\"/admin/properties\" className=\"\">\n                    <Properties />\n                </TabPane> */}\n\n\n            </TabContent>\n        </HomeLayout>\n\n    );\n};\n\nexport default Home;\n"],"names":["id","email","property","cb","editMode","changeColor","cbBinding","cbSendEmail","cbBusiness","user","cbBusinessInfo","console","log","JSON","stringify","getLoginType","color","className","size","onClick","bindingName","bindingEmail","bindingPhone","bindingOthers","e","undefined","usuage","primary","is_business","connected","extension","useState","selectedFiles","setSelectedFiles","val","progressInfos","setProgressInfos","uploadedFiles","useSelector","state","admin","message","setMessage","setFileInfos","progressInfosRef","useRef","dispatch","useDispatch","token","auth","jwt","useEffect","listFiles","then","response","data","uploadFile","idx","file","_progressInfos","current","UploadService","event","percentage","Math","round","loaded","total","resp","prevMessage","name","imageData","url","push","files","Array","from","length","sleep","catch","error","milliseconds","Promise","resolve","setTimeout","map","progressInfo","index","fileName","role","style","width","type","accept","multiple","onChange","target","disabled","preventDefault","item","i","axios","headers","upload","onUploadProgress","formData","FormData","append","http","SERVICE_URL","Authorization","getFiles","mapboxgl","process","setMap","mapContainer","context","useContext","MapContext","useLayoutEffect","document","onresize","resize","container","center","zoom","attributionControl","nav","showCompass","showZoom","addControl","on","initializeMap","ref","el","history","useHistory","showVerificationModal","app","registrationUser","registerForm","userHasEmail","username","userVerified","emailVerified","mobileVerified","Modal","isOpen","centered","ModalBody","EmailVerification","MobileVerification","Button","block","window","ReactNativeWebView","postMessage","action","toggleVerificationModal","localStorage","setItem","Row","noGutters","children","Header","Footer","validationSchema","Yup","shape","wizardInstance","address","rural","utilsData","steps","formik","useFormik","initialValues","onSubmit","values","setSubmitting","setPropertyRegistrationForm","nextStep","handleChange","handleBlurOrig","handleBlur","handleSubmit","errors","touched","isValid","isSubmitting","Form","Col","Input","value","FormGroup","Label","for","onBlur","postalCode","invalid","placeholder","FormFeedback","streetNumber","route","locality","lotNo","plotNo","region","province","city","country","Spinner","connectToMerchantId","resetRegistrationForm","noDelivery","selectedProperty","goToStep","generateEmail","primaryAddress","hightRiseOrCommercial","propertyName","totalFloors","totalUnitsEachFloor","addressType","settlementType","unitNo","isInitialValid","propertySchema","isPropertyRegistered","result","registered","setErrorMessage","otherValues","errorMessage","setFieldValue","tag","check","currentTarget","checked","Collapse","mobileNumber","required","companyName","lastName","password","min","max","passwordConfirmation","oneOf","consent","liability","newUser","location","longitude","latitude","provider","registerUser","getMe","me","toastr","messages","setFieldError","finally","setFieldTouched","eye","seteye","setpassword","settype","Eye","MobileInput","invalidProperty","href","enterRight","enterLeft","exitRight","exitLeft","intro","transitions","setWizardInstance","md","sm","xs","to","src","alt","isLazyMount","instance","callback","setColor","useCallback","paddingLeft","textAlign","MapMarkerUrls","height","emailForChangeColor","ownerMobileNumber","changePropertyColor","cancelChangePropertyColor","bindingSchema","bindingUnitNum","bindingProperty","fncCallback","propertyBinding","bindinbindingUnitNumgName","promotionTitle","promotionContent","properties","apiUrl","domain","replace","getItem","drawFinished","bindingEmails","bindingPhones","userPropertiesIds","p","userPropertiesId","postData","emails","join","phones","sendPromotionContents","setValues","EditorState","editorState","setEditorState","setCurrent","uploadCallback","fileData","imgData","link","accent","TextArea","visibility","onKeyUp","currentLength","limitWords","Editor","toolbarClassName","wrapperClassName","editorClassName","onEditorStateChange","htmlContent","draftToHtml","convertToRaw","getCurrentContent","title","toolbar","options","defaultTargetOption","popupClassName","image","urlEnabled","uploadEnabled","alignmentEnabled","defaultSize","inputAccept","loginType","bindingInfo","setBindingInfo","companyProfile","setCompanyProfile","totalConnected","setTotalConnected","loading","setLoading","getWorkingHourValue","hours","dayOfWeek","filter","hour","parseInt","openHour","closeHour","closed","workingHour","setWorkingHour","unit_no","settlement_type","getHighRiseBusinessInfo","getBusinessProfile","jsonData","id_type","loadConnectedTotal","total1","iCount","value2","shareUrl","items","fields","key","_classes","label","hover","striped","sorter","tableFilter","itemsPerPage","pagination","clickableRows","onRowClick","open","showBusinessInfo","cancelShowBusinessInfo","marginTop","maxWidth","viewBox","street_number","postal_code","phone","website","startsWith","EmailShareButton","subject","body","EmailIcon","android_url","ios_url","showFlyerUpload","merchant_property_id","disConnectionMerchant","disConnectToMerchant","saveMerchantConnection","active","connectToMerchant","needReload","setNeedReload","getHighRiseInfo","unitsInfo","onConfirmDelete","removeHighRiseBinding","columns","accessor","Cell","row","marginLeft","onOk","minWidth","marginRight","defaultPageSize","showHighRiseInfo","cancelShowHighRiseInfo","reload","itemData","no_delivery","removeNoDelivery","original","user_id","onClickDelete","showNoDelivery","cancelShowNoDelivery","userPreference","setUserPreference","restaurant","groceries","cannibus","preference1","find","attributes","preference","restaurantData","users_id","selected","saveUserPreference","preference2","groceriessData","preference3","promotingEventData","showPreference","showPreferenceForm","fetchUserPreference","description","ownerId","saveFlyers","resetForm","htmlFor","FilesUpload","importCustomer","showImportCustomer","Showcase","pins","mapInitialized","searchText","selectedAddress","layerAdded","draw","drawedBefore","drawing","selectedProperties","feature","selectedPropertyEmail","satelliteMode","showMapLegend","propertyByTpe","has2Address","hasBusinessProfile","renderPropertiesTooltip","props","cbBusinessInfoCallBack","noDeliveryCount","setState","PropertiesTooltip","removeProperty","redrawMap","bindingBusiness","clearPropertiesFromMap","clearResidentsFromMap","clearDistancesFromMap","removeLayer","removeSource","MapboxDraw","controls","point","line_string","polygon","trash","combine_features","uncombine_features","loadConnected","convertedProperties","convertLocation","pin","marker","remove","geometry","coordinates","addSource","features","addLayer","source","layout","paint","popups","getElementsByClassName","popupTotal","e1","showPropertiesOnMap","showPrimaryDistancesOnMap","showHomeAndBusinessOnMap","changeColorCallack","callbackResult","currentPin","split","othersPin","createElement","imgSrc","backgroundImage","backgroundSize","setPopup","closeOnClick","closeButton","setHTML","setLngLat","geocodeData","addTo","element","ReactDOM","addAddress","removeAddress","getPopup","setDOMContent","prePart","tobeRemain","tobeDelete","deleteUserAdditionalAddressById","EventBus","convertGeoProperty","onClickMap","lngLat","lng","lat","createMarker","addText","onDragMarker","togglePopup","reverseGeocodePoint","activateAddress","forEach","emailIn","layer","clearLayer","layerId","addUnitNumber","unitNumber","prompt","emailDisplay","saveBatchProperties","residentsWithLocation","randomString","generateString","newItem","showLineLayer","getLngLat","indexOf","slice","onSubmitSearch","trim","geocodeAddress","flyTo","onChangeSearchText","toggleSatelliteMode","setStyle","toggleDrawing","featureCollection","getAll","getSource","setData","booleanPointInPolygon","columnJson","removeControl","changeMode","modes","DRAW_POLYGON","toggleShowMapLegend","PropertyMarkerDescriptions","prevProps","prevState","snapshot","this","initializeLayers","loadBusinessAddress","getAddressByType","checkBusinessProfile","propertyInfo","msg","profileTotal","showLoginTips","removeItem","showIcon","mapDisabled","bsSize","Map","Component","contextType","connect","fetchUsers","page","pageSize","propertyId","withRouter","marginBottom","useLocation","pathname","activeTab","setActiveTab","timeoutHandle","setTimeoutHandle","handle","clearTimeout","HomeLayout","TabContent","TabPane","tabId","MapProvider"],"sourceRoot":""}