{"version":3,"file":"static/js/934.fc16eab0.chunk.js","mappings":"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","sources":["redux/actionCreators/appActionCreators.js","redux/actionCreators/authActionCreators.js","redux/actionCreators/registrationActionCreators.js","site/components/Toggle.js","site/pages/newHome/Header.js","utils/mapUtils.js"],"sourcesContent":["import { SERVICE_URL, PARTNER_TOKEN } from '../../constants';\nimport { getNavigatorLocation } from '../../utils/mapUtils';\nimport {\n    DELETE_ACCOUNT,\n    DELETE_INMATE,\n    FETCH_INMATES,\n    GET_USER_LOCATION,\n    GET_USER_PROPERTY,\n    RESEND_EMAIL_VERIFICATION_CODE,\n    RESEND_MOBILE_VERIFICATION_CODE,\n    SAVE_INMATE,\n    SAVE_USER_PROPERTY,\n    SEND_CONTACT_FORM,\n    TOGGLE_VERIFICATION_MODAL,\n    UPDATE_ACCOUNT,\n    FETCH_USER_PROPERTIES,\n    SAVE_ADDITIONAL_ADDRESS,\n    DELETE_ADDITIONAL_ADDRESS,\n    SAVE_USER_PROPERTIES_DATA,\n    SAVE_SECONDORY_PROPERTY,\n    CHANGE_PROPERTY_COLOR,\n    CANCEL_CHANGE_PROPERTY_COLOR,\n    CANCEL_DISPLAY_BUSINESS\n} from '../actionTypes';\n\n\nexport const getUserLocation = () => {\n    return {\n        type: GET_USER_LOCATION,\n        payload: getNavigatorLocation(),\n    };\n};\n\nexport const sendContactForm = (data) => {\n    if (data != null && data != undefined) {\n        data['tenant'] = PARTNER_TOKEN;\n        console.log('send contact form' + JSON.stringify(data));\n    }\n    return (dispatch) => {\n        return dispatch({\n            type: SEND_CONTACT_FORM,\n            payload: fetch(`${SERVICE_URL}/contacts/saveContactUs?tenant=${PARTNER_TOKEN}`, {\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const changePropertyColor = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n        return dispatch({\n            type: CHANGE_PROPERTY_COLOR,\n            payload: fetch(`${SERVICE_URL}/residents/change-property-color`, {\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\nexport const cancelChangePropertyColor = () => {\n    return {\n        type: CANCEL_CHANGE_PROPERTY_COLOR,\n    };\n};\n\nexport const cancelShowBusinessInfo = () => {\n    return {\n        type: CANCEL_DISPLAY_BUSINESS,\n    };\n}\n\nexport const deleteAccount = () => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: DELETE_ACCOUNT,\n            payload: fetch(`${SERVICE_URL}/residents/delete-account`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'DELETE',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const fetchInmates = (propertyId) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: FETCH_INMATES,\n            payload: fetch(`${SERVICE_URL}/residents/inmateslistById?propertyId=${propertyId}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const deleteUserAdditionalAddress = (userPropertyId, propertyId) => {\n    console.log('1=' + userPropertyId + '2=' + propertyId);\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: DELETE_ADDITIONAL_ADDRESS,\n            payload: fetch(`${SERVICE_URL}/user-properties/delete-user-property`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                body: JSON.stringify({\n                    userPropertyId: userPropertyId,\n                    propertyId: propertyId\n                }),\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n}\nexport const deleteUserAdditionalAddressById = (propertyId) => {\n    console.log('2=' + propertyId);\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: DELETE_ADDITIONAL_ADDRESS,\n            payload: fetch(`${SERVICE_URL}/user-properties/delete-user-property-by-id`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                body: JSON.stringify({\n                    propertyId: propertyId\n                }),\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n}\nexport const fetchUserProperties = () => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: FETCH_USER_PROPERTIES,\n            payload: fetch(`${SERVICE_URL}/user-properties/list-all`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const getInmate = (id, propertyId) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: FETCH_INMATES,\n            payload: fetch(`${SERVICE_URL}/residents/inmates/get/${id}?propertyId=` + propertyId, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const saveInmate = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        const url = data.id\n            ? `${SERVICE_URL}/residents/inmates/save/${data.id}?tenant=${PARTNER_TOKEN}`\n            : `${SERVICE_URL}/residents/inmates/save?tenant=${PARTNER_TOKEN}`;\n\n        return dispatch({\n            type: SAVE_INMATE,\n            payload: fetch(url, {\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const deleteInmate = (id, propertyId) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: DELETE_INMATE,\n            payload: fetch(`${SERVICE_URL}/residents/inmates/delete/${id}?propertyId=${propertyId}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'DELETE',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const getUserPropertyById = (id) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: GET_USER_PROPERTY,\n            payload: fetch(`${SERVICE_URL}/residents/property/get?id=${id}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\nexport const getUserProperty = () => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: GET_USER_PROPERTY,\n            payload: fetch(`${SERVICE_URL}/residents/property/get`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const saveUserProperty = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: SAVE_USER_PROPERTY,\n            payload: fetch(`${SERVICE_URL}/residents/property/save?tenant=${PARTNER_TOKEN}`, {\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\n\nexport const saveAdditionalAddress = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: SAVE_ADDITIONAL_ADDRESS,\n            payload: fetch(`${SERVICE_URL}/user-properties/save-property`, {\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const saveUserPropertyData = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: SAVE_USER_PROPERTIES_DATA,\n            payload: fetch(`${SERVICE_URL}/user-properties/save-user-property`, {\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const resendMobileVerificationCode = () => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: RESEND_MOBILE_VERIFICATION_CODE,\n            payload: fetch(\n                `${SERVICE_URL}/residents/resend-mobile-verification-code?tenant=${PARTNER_TOKEN}`,\n                {\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`,\n                    },\n                    method: 'POST',\n                },\n            )\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const resendMobileVerificationCodeByMobileNumber = (mobileNumber) => {\n    return (dispatch, getState) => {\n        // const token = getState().auth.jwt;\n\n        return dispatch({\n            type: RESEND_MOBILE_VERIFICATION_CODE,\n            payload: fetch(\n                `${SERVICE_URL}/public/resend-mobile-verification-code-mobile-number?mobileNumber=${mobileNumber}`,\n                {\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                    },\n                    method: 'POST',\n                },\n            )\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const resendEmailVerificationCode = () => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: RESEND_EMAIL_VERIFICATION_CODE,\n            payload: fetch(\n                `${SERVICE_URL}/residents/resend-email-verification-code?tenant=${PARTNER_TOKEN}`,\n                {\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`,\n                    },\n                    method: 'POST',\n                },\n            )\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const toggleVerificationModal = () => {\n    return { type: TOGGLE_VERIFICATION_MODAL };\n};\n\nexport const updateAccount = (data) => {\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: UPDATE_ACCOUNT,\n            payload: fetch(`${SERVICE_URL}/residents/update/self?tenant=${PARTNER_TOKEN}`, {\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'PUT',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const saveBatchProperties = (data) => {\n    // console.log('......saving batch 111...' + JSON.stringify(data));\n\n    return (dispatch, getState) => {\n        const token = getState().auth.jwt;\n\n        return dispatch({\n            type: SAVE_SECONDORY_PROPERTY,\n            payload: fetch(`${SERVICE_URL}/residents/create-properties`, {\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n}","import { SERVICE_URL, PARTNER_TOKEN } from '../../constants';\nimport {\n    AUTH_CHANGE_PASSWORD_ALT,\n    AUTH_CHANGE_PASSWORD,\n    AUTH_LOGIN,\n    AUTH_LOGOUT,\n    AUTH_RESET_PASSWORD,\n    AUTH_RESET_PASSWORD_VERIFY,\n    AUTH_GET_ME\n} from '../actionTypes';\nimport md5 from 'md5';\nexport const loginUser = (identifier, password) => {\n    return {\n        type: AUTH_LOGIN,\n        payload: fetch(`${SERVICE_URL}/public/login?tenant=${PARTNER_TOKEN}`, {\n            body: JSON.stringify({\n                identifier,\n                password,\n            }),\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            method: 'POST',\n        })\n            .then((r) => r.json())\n            .then((responseData) => {\n                if (responseData.statusCode >= 300) {\n                    return Promise.reject(responseData);\n                } else {\n                    return responseData;\n                }\n            }),\n    };\n};\n\nexport const logoutUser = () => {\n    return {\n        type: AUTH_LOGOUT,\n        payload: new Promise((resolve) => resolve()),\n    };\n};\n\nexport const changePassword = (password) => {\n    return (dispatch, getState) => {\n        let token = getState().auth.jwt;\n        console.log('password: =' + password + ' token=' + token);\n        return dispatch({\n            type: AUTH_CHANGE_PASSWORD,\n            payload: fetch(`${SERVICE_URL}/residents/change-password?tenant=${PARTNER_TOKEN}`, {\n                body: JSON.stringify({\n                    password,\n                }),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\n\nexport const iOSChangePassword = (mobileNumber, password) => {\n    const hash = md5('29' + mobileNumber + '34' + password + '046');\n    return (dispatch) => {\n        return dispatch({\n            type: AUTH_CHANGE_PASSWORD_ALT,\n            payload: fetch(`${SERVICE_URL}/public/ios-change-password?tenant=${PARTNER_TOKEN}`, {\n                body: JSON.stringify({\n                    mobileNumber,\n                    password,\n                    hash\n                }),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n\n};\n\nexport const resetPassword = (mobileNumber) => {\n    return (dispatch) => {\n        return dispatch({\n            type: AUTH_RESET_PASSWORD,\n            payload: fetch(`${SERVICE_URL}/public/reset-password?tenant=${PARTNER_TOKEN}`, {\n                body: JSON.stringify({\n                    mobileNumber,\n                }),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const verifyResetPassword = (mobileNumber, mobileVerificationCode) => {\n    return (dispatch) => {\n        return dispatch({\n            type: AUTH_RESET_PASSWORD_VERIFY,\n            payload: fetch(`${SERVICE_URL}/public/verify-reset-password?tenant=${PARTNER_TOKEN}`, {\n                body: JSON.stringify({\n                    mobileNumber,\n                    mobileVerificationCode,\n                }),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                method: 'POST',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\nexport const getMe = () => {\n    return (dispatch, getState) => {\n        let token = getState().auth.jwt;\n        console.log('..get me..token..' + token);\n        return dispatch({\n            type: AUTH_GET_ME,\n            payload: fetch(`${SERVICE_URL}/users/me?populate=*`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                method: 'GET',\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};","import { SERVICE_URL, PARTNER_TOKEN } from '../../constants';\nimport {\n    AUTH_REGISTER,\n    GET_INSTITUTE,\n    REGISTER_PROPERTY,\n    REGISTRATION_RESET_FORM,\n    REGISTRATION_VERIFY_ACCOUNT,\n    SET_PROPERTY_REGISTRATION_FORM,\n    SET_EDIT_MODE,\n} from '../actionTypes';\n\nexport const getInstitute = (email) => {\n    return {\n        type: GET_INSTITUTE,\n        payload: fetch(`${SERVICE_URL}/institutions/allowed?tenant=${PARTNER_TOKEN}`, {\n            method: 'POST',\n            body: JSON.stringify({\n                email,\n            }),\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n        })\n            .then((r) => r.json())\n            .then((responseData) => {\n                if (responseData.statusCode >= 300) {\n                    return Promise.reject(responseData);\n                } else {\n                    return responseData;\n                }\n            }),\n    };\n};\n\nexport const registerProperty = (data) => {\n    return (dispatch) => {\n        return dispatch({\n            type: REGISTER_PROPERTY,\n            payload: fetch(`${SERVICE_URL}/public/register-property?tenant=${PARTNER_TOKEN}`, {\n                method: 'POST',\n                body: JSON.stringify(data),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const verifyAccount = (data) => {\n    return {\n        type: REGISTRATION_VERIFY_ACCOUNT,\n        payload: fetch(`${SERVICE_URL}/public/verify?tenant=${PARTNER_TOKEN}`, {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n        })\n            .then((r) => r.json())\n            .then((responseData) => {\n                if (responseData.statusCode >= 300) {\n                    return Promise.reject(responseData);\n                } else {\n                    return responseData;\n                }\n            }),\n    };\n};\n\nexport const resetRegistrationForm = () => {\n    return {\n        type: REGISTRATION_RESET_FORM,\n    };\n};\n\nexport const registerUser = (data) => {\n    console.log('Do registration, data=' + JSON.stringify(data));\n    return {\n        type: AUTH_REGISTER,\n        payload: fetch(`${SERVICE_URL}/public/register?tenant=${PARTNER_TOKEN}`, {\n            body: JSON.stringify(data),\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            method: 'POST',\n        })\n            .then((r) => r.json())\n            .then((responseData) => {\n                if (responseData.statusCode >= 300) {\n                    return Promise.reject(responseData);\n                } else {\n                    //do get me\n                    console.log('..register return..' + JSON.stringify(responseData));\n\n                    return responseData;\n                }\n            }),\n    };\n};\n\nexport const setPropertyRegistrationForm = (data) => {\n    return {\n        type: SET_PROPERTY_REGISTRATION_FORM,\n        payload: new Promise((resolve) => {\n            // console.log('setPropertyRegistrationForm.....' + JSON.stringify(data));\n            resolve(data);\n        }),\n    };\n};\n\nexport const setEditMode = (data) => {\n    return {\n        type: SET_EDIT_MODE,\n        // payload: new Promise((resolve) => {\n        //     // console.log('set edit mode.....' + JSON.stringify(data));\n        //     resolve(data);\n        // }),\n    };\n};\n\nexport const isPropertyRegistered = (email) => {\n    return (dispatch) => {\n        return dispatch({\n            type: REGISTER_PROPERTY,\n            payload: fetch(`${SERVICE_URL}/public/is-property-registered?tenant=${PARTNER_TOKEN}`, {\n                method: 'POST',\n                body: JSON.stringify({ email }),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n\nexport const isMobileRegistered = (mobileNumber) => {\n    return (dispatch) => {\n        return dispatch({\n            type: REGISTER_PROPERTY,\n            payload: fetch(`${SERVICE_URL}/public/is-mobile-registered`, {\n                method: 'POST',\n                body: JSON.stringify({ mobileNumber }),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            })\n                .then((r) => r.json())\n                .then((responseData) => {\n                    if (responseData.statusCode >= 300) {\n                        return Promise.reject(responseData);\n                    } else {\n                        return responseData;\n                    }\n                }),\n        });\n    };\n};\n","import React from \"react\";\n\nfunction Toggle(props) {\n  const {\n    text,\n    size = \"default\",\n    checked,\n    disabled,\n    onChange,\n    offstyle = \"btn-danger\",\n    onstyle = \"btn-success\"\n  } = props;\n\n  let displayStyle = checked ? onstyle : offstyle;\n  return (\n    <>\n      <label className=\"switch_label\">\n        <span className={`${size} switch-wrapper`}>\n          <input\n            type=\"checkbox\"\n            checked={checked}\n            disabled={disabled}\n            onChange={e => onChange(e)}\n          />\n          <span className={`${displayStyle} switch`}>\n            <span className=\"switch-handle\" />\n          </span>\n        </span>\n        <span className=\"switch-label\">{text}</span>\n      </label>\n    </>\n  );\n}\n\nexport default Toggle;\n","import React, { useState, useCallback } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavLink as ReactRouterLink, useHistory } from \"react-router-dom\";\nimport {\n    Collapse,\n    Nav,\n    Navbar,\n    NavbarBrand,\n    NavbarToggler,\n    NavItem,\n    NavLink,\n    Button,\n    ButtonDropdown, DropdownItem, DropdownMenu, DropdownToggle, Dropdown\n} from 'reactstrap';\n\nimport Toggle from '../../components/Toggle';\nimport { setEditMode } from '../../../redux/actionCreators/registrationActionCreators';\nimport { deleteAccount } from '../../../redux/actionCreators/appActionCreators';\nimport { logoutUser } from '../../../redux/actionCreators/authActionCreators';\nimport { toastr } from 'react-redux-toastr';\nimport { getLoginType, clearLoginType } from '../../../utils/utils';\nimport { loadConnectedTotal } from '../../../redux/actionCreators/adminActionCreators';\n\nconst Header = () => {\n    const user = useSelector((state) => state.auth.me);\n    const history = useHistory();\n    const [isOpen, setIsOpen] = useState(false);\n    const toggle = () => setIsOpen(!isOpen);\n    const collapse = () => setIsOpen(false);\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const utilsData = useSelector((state) => state.utilsData);\n    const [editSwitch, setEditSwitch] = useState(false);\n    const [totalConnected, setTotalConnected] = useState(null);\n\n    const dispatch = useDispatch();\n\n    let userName = '';\n    let userEmail = '';\n    let loginType = 0;\n\n    try {\n        userName = [user.firstName, user.lastName]\n            .filter((i) => i)\n            .join(' ')\n            .trim();\n    } catch (e) { }\n\n\n    if (user !== null && user !== undefined && user.property !== null && user.property !== undefined) {\n        //  console.log('user.property =' + JSON.stringify(user.property));\n        loginType = getLoginType();\n        // console.log('..loginType=..' + loginType);\n        if (user.companyName) {\n            userEmail = user.property.email + '@' + user.companyName + '.com';\n            localStorage.setItem(\"current_domain\", user.companyName + '.com');\n        } else if (user.lastName) {\n            userEmail = user.property.email + '@' + user.lastName + '.com';\n            localStorage.setItem(\"current_domain\", user.lastName + '.com');\n        }\n        if (user.noDelivery && user.noDelivery === 1) {\n            userEmail = '';\n        }\n        if (parseInt(loginType) === 2) {\n            const jsonData = {\n                id_type: 0,\n                id: user.id\n            }\n            dispatch(loadConnectedTotal(jsonData)).then(resp => {\n                console.log('..get total ..' + JSON.stringify(resp));\n                setTotalConnected(resp.value.value[0].iCount);\n            }).catch(error => {\n\n            });\n        }\n\n    } else {\n        userEmail = 'Enter your address to create your account';\n    }\n    const toggleDropDownMenu = useCallback(() => {\n        setDropDownOpen(!dropDownOpen)\n    });\n    const handleEditModeChange = useCallback(() => {\n        // setEditMode(!editMode);\n        if (utilsData.drawing) {\n            toastr.error('Error', 'Drawing addresses boundary, can not switch');\n            return;\n        }\n        utilsData.editMode = !editSwitch;\n        if (utilsData.editMode) {\n            console.log('...edit mode is enable !!!!..');\n        } else {\n            console.log('...edit mode is turn off !!!..');\n        }\n\n        setEditSwitch(utilsData.editMode);\n        const data = {\n            utilsData: {\n                editMode: !editSwitch\n            }\n        };\n        dispatch(setEditMode(data));\n\n    });\n    const onClickDeleteAccount = useCallback(() => {\n        dispatch(deleteAccount()).then(({ value: retObj }) => {\n            console.log('....delete acount return...' + JSON.stringify(retObj));\n            clearLoginType();\n            if (retObj.status === 'successed') {\n                dispatch(logoutUser()).then(() => {\n                    // history.push('/');\n                    localStorage.removeItem(\"current_domain\");\n                    setTimeout(() => {\n                        location.reload(true);\n                    }, 500);\n\n                });\n            } else {\n                console.log('error message:' + retObj.message);\n                toastr.error('Error !', retObj.message);\n            }\n        });\n    }, [dispatch, history]);\n    const adminGroup = [process.env.REACT_APP_ROLE_ADMIN_NAME, process.env.REACT_APP_ROLE_PM_NAME];\n    const menuLinks = [\n        { menuText: 'Change Address', menuID: 1 },\n        { menuText: 'Change Email', menuID: 2 },\n        { menuText: 'Change Mobile', menuID: 3 },\n        { menuText: 'Change Password', menuID: 6 },\n        { menuText: 'Delete Account', menuID: 4 },\n        { menuText: 'logout', menuID: 5 },\n\n    ]\n    return (\n        <Navbar className=\"header fixed-top\" color=\"light\" light expand=\"md\">\n            <NavbarBrand className=\"pixels\" href=\"mailto:anything@AlphC.com\">\n                <img src={'/assets/img/logo2.png'} alt={'logo2'} />\n            </NavbarBrand>\n            <NavbarBrand tag={ReactRouterLink} className=\"mr-auto\" to=\"/\">\n                <img src={'/assets/img/logo-alphc.png'} alt={'logo'} />\n            </NavbarBrand>\n            <NavbarToggler onClick={toggle} tag={'div'}>\n                <i className=\"fa fa-bars\" />\n            </NavbarToggler>\n            <Collapse isOpen={isOpen} navbar>\n                <div style={{ width: \"64%\", textAlign: \"center\", fontSize: \"20px\", fontWeight: \"bold\" }}> {userEmail}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {totalConnected ? 'Connected:' + totalConnected : ''} </div>\n                <Nav className=\"ml-auto\" navbar>\n                    <NavItem>\n                        {user && parseInt(loginType) === 2 ? <Toggle\n                            checked={editSwitch}\n                            text=\"Edit Mode\"\n                            size=\"default\"\n                            disabled={false}\n                            onChange={handleEditModeChange}\n                            offstyle=\"btn-danger\"\n                            onstyle=\"btn-success\"\n                        /> : null}\n                    </NavItem>\n                    {/* <NavItem>\n                        <NavLink\n                            tag={ReactRouterLink}\n                            onClick={collapse}\n                            to=\"/pricing\">\n                            Pricing\n                        </NavLink>\n                    </NavItem> */}\n                    <NavItem>\n                        <NavLink\n                            tag={ReactRouterLink}\n                            onClick={collapse}\n                            to=\"/patents\">\n                            Patents\n                        </NavLink>\n                    </NavItem>\n                    {user ? (\n                        <>\n\n                            <ButtonDropdown >\n                                <Dropdown isOpen={dropDownOpen} toggle={toggleDropDownMenu} >\n                                    <DropdownToggle className=\"head-dropdown-toggle\">\n                                        Menu\n                                    </DropdownToggle>\n                                    <DropdownMenu className=\"city-dropdown\">\n                                        {\n                                            menuLinks.map(menu => {\n                                                return <DropdownItem key={'key' + menu.menuID} onClick={() => {\n                                                    // setSelectedCity(city.full_name);\n                                                    console.log('selected menu..' + menu.menuID);\n                                                    switch (menu.menuID) {\n                                                        case 1:\n                                                            history.push('/edit-property');\n                                                            break;\n                                                        case 2:\n                                                            history.push('/change-email');\n                                                            break;\n                                                        case 3:\n                                                            history.push('/change-mobile');\n                                                            break;\n                                                        case 4:\n                                                            //delete account\n                                                            toastr.confirm(\n                                                                'Are you sure you want to delete your account? This action is irreversible!',\n                                                                {\n                                                                    onOk: onClickDeleteAccount,\n                                                                },\n                                                            );\n                                                            break;\n                                                        case 5:\n                                                            localStorage.removeItem(\"current_domain\");\n                                                            clearLoginType();\n                                                            history.push('/logout')\n                                                            break;\n                                                        case 6:\n                                                            history.push('/change-password');\n                                                            break;\n                                                    }\n                                                    // localStorage.setItem('city_short_name',city.short_name);\n                                                    // localStorage.setItem('city_full_name',city.full_name);\n                                                    // //do search\n                                                    // window.location.reload();\n                                                }\n                                                } >{menu.menuText}</DropdownItem>\n                                            })\n                                        }\n                                    </DropdownMenu>\n                                </Dropdown>\n                            </ButtonDropdown>\n\n                            {/* <NavItem>\n                                <NavLink\n                                    tag={ReactRouterLink}\n                                    onClick={collapse}\n                                    to=\"/logout\">\n                                    Logout(\n                                    {userName ? userName : user.mobileNumber})\n                                </NavLink>\n                            </NavItem> */}\n                        </>\n                    ) : (\n                        <NavItem>\n                            <NavLink\n                                tag={ReactRouterLink}\n                                onClick={collapse}\n                                to=\"/login\">\n                                Login\n                            </NavLink>\n                        </NavItem>\n                    )}\n                </Nav>\n            </Collapse>\n        </Navbar>\n    );\n};\n\nexport default Header;\n","import mapboxgl from 'mapbox-gl';\nimport ReactDOM from 'react-dom';\nimport {\n    AlertStatus,\n    MapMarkerUrls,\n    PendingStatuses,\n    PropertyStatus,\n} from '../constants';\n\nexport const getNavigatorLocation = () => {\n    return new Promise((resolve, reject) => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) =>\n                    resolve({\n                        latitude: position.coords.latitude,\n                        longitude: position.coords.longitude,\n                    }),\n                (positionError) => reject(positionError),\n            );\n        } else {\n            reject('No geolocation api');\n        }\n    });\n};\n\nconst showPropertyTooltip = (map, renderTooltip, e) => {\n    let features = map.queryRenderedFeatures(e.point, {\n        layers: [\n            'other-properties',\n            'safe-properties',\n            'pending-properties',\n            'has_injured-properties',\n        ],\n    });\n\n    if (!features.length) {\n        return;\n    }\n\n    var feature = features[0];\n\n    const element = document.createElement('div');\n\n    let domain = localStorage.getItem('current_domain');\n    if (domain === undefined || domain === null) {\n        domain = 'alphc.com'\n    }\n    if (feature.properties.companyName) {\n        domain = feature.properties.companyName + \".com\";\n    }\n    if (feature.properties.lastName) {\n        domain = feature.properties.lastName + \".com\";\n    }\n    if (feature.properties.email.includes(\"@\")) {\n        domain = '';\n    }\n    if (domain.length > 0) {\n        domain = \"@\" + domain;\n    }\n    ReactDOM.render(\n        renderTooltip({\n            email: feature.properties.email + domain, // CHANGE THIS TO REFLECT THE PROPERTIES YOU WANT TO SHOW\n            id: feature.properties.id,\n            property: feature.properties\n        }),\n        element,\n    );\n\n    new mapboxgl.Popup({\n        closeButton: false,\n        // closeOnClick: false,\n        maxWidth: 'none',\n        offset: [0, -55],\n    })\n        .setDOMContent(element)\n        .setLngLat(feature.geometry.coordinates)\n        .addTo(map);\n};\nexport const removeAllImages = (map) => {\n    map.removeStyleImage(MapMarkerUrls.property.default);\n    map.removeStyleImage(MapMarkerUrls.property.hasInjured);\n    map.removeStyleImage(MapMarkerUrls.property.pending);\n    map.removeStyleImage(MapMarkerUrls.property.safe);\n    map.removeStyleImage(MapMarkerUrls.property.secondary);\n}\nexport const showPropertiesOnMapEx = (map, data, renderTooltip, bAddImage) => {\n    const propertiesWithAlert = data.filter((i) => i.property_alert);\n\n    const other = data.filter((i) => !i.property_alert);\n\n    const safe = propertiesWithAlert.filter(\n        (i) => i.property_alert.status === PropertyStatus.SAFE,\n    );\n    const pending = propertiesWithAlert.filter(\n        (i) => i.property_alert.status === PropertyStatus.PENDING,\n    );\n    const hasInjured = propertiesWithAlert.filter(\n        (i) => i.property_alert.status === PropertyStatus.HAS_INJURED,\n    );\n\n    const secondaryAddress = data.filter((p) => !p.primaryHolder);\n    const primaryAddress = other.filter((p) => p.primaryHolder);\n\n    console.log('..primary ..' + primaryAddress.length + ' secondary ..' + secondaryAddress.length);\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.property.default,\n        'primary-properties',\n        primaryAddress,\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.property.secondary,\n        'secondary-properties',\n        secondaryAddress,\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.property.safe,\n        'safe-properties',\n        safe,\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.property.pending,\n        'pending-properties',\n        pending,\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.property.hasInjured,\n        'has_injured-properties',\n        hasInjured,\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    map.on('click', showPropertyTooltip.bind(undefined, map, renderTooltip));\n};\nexport const showPropertiesOnMap = (map, data, renderTooltip, bAddImage, user) => {\n    const businessProperty = data.filter((i) => i.is_business === 1 || i.is_business);\n\n    const consumerProperty = data.filter((i) => i.is_business === 0 || !i.is_business);\n\n\n    /*\n    let defaultItems = other.filter(\n        (i) => i.color === PropertyStatus.DEFAULT,\n    );\n    if (user !== null && user !== undefined) {\n        const noneOwnerData = propertiesWithAlert.filter(\n            (i) => i.primaryAddress === 1 && i.ownerMobileNumber !== user.mobileNumber,\n        );\n        defaultItems = defaultItems.concat(noneOwnerData);\n    }\n    // safe: '/map-markers/green_home_pin.png',\n    const safe = other.filter(\n        (i) => i.color === PropertyStatus.SAFE,\n    );\n\n    // pending: '/map-markers/grey_home_pin.png',\n    const pending = other.filter(\n        (i) => i.color === PropertyStatus.PENDING,\n    );\n\n    // hasInjured: '/map-markers/red_home_pin.png',\n    const hasInjured = other.filter(\n        (i) => i.color === PropertyStatus.HAS_INJURED,\n    );\n    let primary = null;\n    if (user !== null && user !== undefined) {\n        primary = propertiesWithAlert.filter(\n            (i) => i.primaryAddress === 1 && i.ownerMobileNumber === user.mobileNumber,\n        );\n    } else {\n        primary = propertiesWithAlert.filter(\n            (i) => i.primaryAddress,\n        );\n    }\n    // secondary: '/map-markers/second_home_pin.png',\n    const secondary = other.filter(\n        (i) => i.color === PropertyStatus.SECONDARY,\n    );\n    primary.map(item => {\n        hasInjured.push(item);\n    })\n    */\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.property.default,\n        'other-properties',\n        consumerProperty,\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.property.secondary,\n        'secondary-properties',\n        [],\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.property.safe,\n        'safe-properties',\n        [],\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.property.pending,\n        'pending-properties',\n        [],\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.property.hasInjured,\n        'has_injured-properties',\n        businessProperty,\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    map.on('click', showPropertyTooltip.bind(undefined, map, renderTooltip));\n};\n\nexport const clearPropertiesFromMap = (map) => {\n    clearLayer(map, 'has_injured-properties');\n    clearLayer(map, 'pending-properties');\n    clearLayer(map, 'safe-properties');\n    clearLayer(map, 'other-properties');\n};\n\nconst showResidentTooltip = (map, renderTooltip, e) => {\n    let features = map.queryRenderedFeatures(e.point, {\n        layers: [\n            'injured-residents',\n            'pending-residents',\n            'safe-residents',\n            'away-residents',\n            'other-residents',\n        ],\n    });\n\n    if (!features.length) {\n        return;\n    }\n\n    var feature = features[0];\n    console.log('feature =' + JSON.stringify(feature));\n\n    const element = document.createElement('div');\n\n    ReactDOM.render(\n        renderTooltip({\n            email: feature.properties.email,\n            id: feature.properties.id,\n            user: feature.properties,\n            location: JSON.parse(feature.properties.location),\n        }),\n        element,\n    );\n\n    new mapboxgl.Popup({\n        closeButton: false,\n        maxWidth: 'none',\n        offset: [0, -55],\n    })\n        .setDOMContent(element)\n        .setLngLat(feature.geometry.coordinates)\n        .addTo(map);\n};\n\nexport const showResidentsOnMap = (map, data, renderTooltip) => {\n    const residentsWithLocation = data.filter(\n        (i) => i.location && i.location.latitude,\n    );\n\n    const residentsWithAlert = residentsWithLocation.filter(\n        (i) => i.user_alert,\n    );\n    const other = residentsWithLocation.filter((i) => !i.user_alert);\n\n    const away = residentsWithAlert.filter(\n        (i) => i.user_alert.status === AlertStatus.AWAY,\n    );\n    const safe = residentsWithAlert.filter(\n        (i) => i.user_alert.status === AlertStatus.SAFE,\n    );\n    const pending = residentsWithAlert.filter((i) =>\n        PendingStatuses.includes(i.user_alert.status),\n    );\n    const injured = residentsWithAlert.filter(\n        (i) => i.user_alert.status === AlertStatus.INJURED,\n    );\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.user.default,\n        'other-residents',\n        other,\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.user.away,\n        'away-residents',\n        away,\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    showPointLayer(\n        map,\n        MapMarkerUrls.user.safe,\n        'safe-residents',\n        safe,\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.user.pending,\n        'pending-residents',\n        pending,\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    showPointLayer(\n        bAddImage,\n        map,\n        MapMarkerUrls.user.injured,\n        'injured-residents',\n        injured,\n        (i) => [i.location.longitude, i.location.latitude],\n    );\n\n    map.on('click', showResidentTooltip.bind(undefined, map, renderTooltip));\n};\n\nexport const clearResidentsFromMap = (map) => {\n    clearLayer(map, 'injured-residents');\n    clearLayer(map, 'pending-residents');\n    clearLayer(map, 'safe-residents');\n    clearLayer(map, 'away-residents');\n    clearLayer(map, 'other-residents');\n};\n\nexport const showDistancesOnMap = (map, residents) => {\n    const residentsWithLocation = residents.filter(\n        (i) =>\n            i.location &&\n            i.location.latitude &&\n            i.property &&\n            i.property.location &&\n            i.property.location.latitude,\n    );\n\n    showLineLayer(\n        map,\n        MapMarkerUrls.user.injured,\n        'resident-property-distances',\n        residentsWithLocation,\n        (i) => [\n            [i.location.longitude, i.location.latitude],\n            [i.property.location.longitude, i.property.location.latitude],\n        ],\n    );\n};\n\nexport const clearDistancesFromMap = (map) => {\n    clearLayer(map, 'resident-property-distances');\n};\n\nexport const showLineLayer = (\n    map,\n    imageUrl,\n    layerId,\n    data,\n    coordinateSelector,\n    callback,\n) => {\n    map.addSource(layerId, {\n        type: 'geojson',\n        data: {\n            type: 'FeatureCollection',\n            features: data.map((p) => ({\n                type: 'Feature',\n                properties: p,\n                geometry: {\n                    type: 'LineString',\n                    coordinates: coordinateSelector(p).filter((i) => i),\n                },\n            })),\n        },\n    });\n\n    map.addLayer({\n        id: layerId,\n        source: layerId,\n        type: 'line',\n        layout: {\n            'line-join': 'round',\n            'line-cap': 'round',\n        },\n        paint: {\n            'line-color': '#888888',\n            'line-width': 3,\n            'line-dasharray': [2, 2],\n        },\n    });\n\n    if (callback) callback();\n};\n\nconst showPointLayer = (\n    bAddImage,\n    map,\n    imageUrl,\n    layerId,\n    data,\n    coordinateSelector,\n    callback,\n) => {\n    // if(bAddImage)\n    {\n        map.loadImage(imageUrl, function (error, image) {\n            if (error) throw error;\n\n            try {\n\n                map.addImage(`${layerId}-marker`, image);\n\n                map.addSource(layerId, {\n                    type: 'geojson',\n                    data: {\n                        type: 'FeatureCollection',\n                        features: data.map((p) => ({\n                            type: 'Feature',\n                            properties: p,\n                            geometry: {\n                                type: 'Point',\n                                coordinates: coordinateSelector(p).filter((i) => i),\n                            },\n                        })),\n                    },\n                });\n\n                map.addLayer({\n                    id: layerId,\n                    source: layerId,\n                    type: 'symbol',\n                    layout: {\n                        'icon-image': `${layerId}-marker`,\n                        'icon-allow-overlap': true,\n                        'icon-anchor': 'bottom',\n                        'icon-size': 0.6,\n                    },\n                });\n            } catch (error) {\n                console.log('add layer error:' + JSON.stringify(error));\n            };\n\n            if (callback) callback();\n        });\n    }\n    // else{\n    //     map.addSource(layerId, {\n    //         type: 'geojson',\n    //         data: {\n    //             type: 'FeatureCollection',\n    //             features: data.map((p) => ({\n    //                 type: 'Feature',\n    //                 properties: p,\n    //                 geometry: {\n    //                     type: 'Point',\n    //                     coordinates: coordinateSelector(p).filter((i) => i),\n    //                 },\n    //             })),\n    //         },\n    //     });\n\n    //     map.addLayer({\n    //         id: layerId,\n    //         source: layerId,\n    //         type: 'symbol',\n    //         layout: {\n    //             'icon-image': `${layerId}-marker`,\n    //             'icon-allow-overlap': true,\n    //             'icon-anchor': 'bottom',\n    //             'icon-size': 0.6,\n    //         },\n    //     });\n    //     if (callback) callback();\n    // }\n};\n\nexport const clearLayer = (map, layerId) => {\n    if (map.hasImage(`${layerId}-marker`)) map.removeImage(`${layerId}-marker`);\n\n    if (map.getLayer(layerId)) map.removeLayer(layerId);\n    if (map.getSource(layerId)) map.removeSource(layerId);\n};\n\nexport const showPrimaryDistancesOnMap = (map, properties, user) => {\n    const residentsWithLocation = properties.filter(\n        (i) =>\n            i.location &&\n            i.location.latitude && i.connected === \"1\"\n    );\n    const primaryAddress = properties.filter(\n        (i) =>\n            i.primaryAddress == 1 && i.ownerMobileNumber === user.mobileNumber\n    );\n\n    showLineLayer(\n        map,\n        MapMarkerUrls.user.injured,\n        'resident-property-distances',\n        residentsWithLocation,\n        (i) => [\n            [primaryAddress[0].location.longitude, primaryAddress[0].location.latitude],\n            [i.location.longitude, i.location.latitude],\n        ],\n    );\n};"],"names":["sendContactForm","data","undefined","PARTNER_TOKEN","console","log","JSON","stringify","dispatch","type","SEND_CONTACT_FORM","payload","fetch","SERVICE_URL","body","headers","Accept","method","then","r","json","responseData","statusCode","Promise","reject","changePropertyColor","getState","token","auth","jwt","CHANGE_PROPERTY_COLOR","Authorization","cancelChangePropertyColor","CANCEL_CHANGE_PROPERTY_COLOR","cancelShowBusinessInfo","CANCEL_DISPLAY_BUSINESS","deleteAccount","DELETE_ACCOUNT","deleteUserAdditionalAddressById","propertyId","DELETE_ADDITIONAL_ADDRESS","getUserProperty","GET_USER_PROPERTY","saveUserProperty","SAVE_USER_PROPERTY","resendMobileVerificationCode","RESEND_MOBILE_VERIFICATION_CODE","resendEmailVerificationCode","RESEND_EMAIL_VERIFICATION_CODE","toggleVerificationModal","TOGGLE_VERIFICATION_MODAL","updateAccount","UPDATE_ACCOUNT","saveBatchProperties","SAVE_SECONDORY_PROPERTY","loginUser","identifier","password","AUTH_LOGIN","logoutUser","AUTH_LOGOUT","resolve","changePassword","AUTH_CHANGE_PASSWORD","getMe","AUTH_GET_ME","verifyAccount","REGISTRATION_VERIFY_ACCOUNT","resetRegistrationForm","REGISTRATION_RESET_FORM","registerUser","AUTH_REGISTER","setPropertyRegistrationForm","SET_PROPERTY_REGISTRATION_FORM","setEditMode","SET_EDIT_MODE","isPropertyRegistered","email","REGISTER_PROPERTY","props","text","size","checked","disabled","onChange","offstyle","onstyle","displayStyle","className","e","user","useSelector","state","me","history","useHistory","useState","isOpen","setIsOpen","collapse","dropDownOpen","setDropDownOpen","utilsData","editSwitch","setEditSwitch","totalConnected","setTotalConnected","useDispatch","userEmail","loginType","firstName","lastName","filter","i","join","trim","property","getLoginType","companyName","localStorage","setItem","noDelivery","parseInt","jsonData","id_type","id","loadConnectedTotal","resp","value","iCount","catch","error","toggleDropDownMenu","useCallback","handleEditModeChange","drawing","toastr","editMode","onClickDeleteAccount","retObj","clearLoginType","status","removeItem","setTimeout","location","reload","message","Navbar","color","light","expand","NavbarBrand","href","src","alt","tag","ReactRouterLink","to","NavbarToggler","onClick","Collapse","navbar","style","width","textAlign","fontSize","fontWeight","Nav","NavItem","NavLink","ButtonDropdown","Dropdown","toggle","DropdownToggle","DropdownMenu","menuText","menuID","map","menu","DropdownItem","push","onOk","showPropertyTooltip","renderTooltip","features","queryRenderedFeatures","point","layers","length","feature","element","document","createElement","domain","getItem","properties","includes","ReactDOM","mapboxgl","closeButton","maxWidth","offset","setDOMContent","setLngLat","geometry","coordinates","addTo","showPropertiesOnMap","bAddImage","businessProperty","is_business","consumerProperty","showPointLayer","MapMarkerUrls","longitude","latitude","on","bind","clearPropertiesFromMap","clearLayer","clearResidentsFromMap","clearDistancesFromMap","showLineLayer","imageUrl","layerId","coordinateSelector","callback","addSource","p","addLayer","source","layout","paint","loadImage","image","addImage","hasImage","removeImage","getLayer","removeLayer","getSource","removeSource","showPrimaryDistancesOnMap","residentsWithLocation","connected","primaryAddress","ownerMobileNumber","mobileNumber"],"sourceRoot":""}