{"version":3,"file":"static/js/964.bf5ad7df.chunk.js","mappings":"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","sources":["site/pages/AccountVerification.js","site/layouts/HomeLayout.js","site/pages/Login.js"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Button, Modal, ModalBody, Row } from 'reactstrap';\nimport { toggleVerificationModal } from '../../redux/actionCreators/appActionCreators';\nimport EmailVerification from './accountVerification/EmailVerification';\nimport MobileVerification from './accountVerification/MobileVerification';\n\nconst AccountVerification = () => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const showVerificationModal = useSelector(\n        (state) => state.app.showVerificationModal,\n    );\n\n    const registrationUser = useSelector((state) => state.registerForm.user);\n    let user = useSelector((state) => state.auth.user);\n    // const user1 = useSelector((state) => state.auth.user);\n    // const state = useSelector((state) => state);\n    // console.log('..state..' + JSON.stringify(state));\n    if (registrationUser) return null;\n    // if (user === null || user === undefined) {\n    //     user = user1;\n    // }\n\n    if (!user) return null;\n\n    const userHasEmail = user.username !== user.email;\n\n    const userVerified =\n        (userHasEmail && user.emailVerified && user.mobileVerified) ||\n        (!userHasEmail && user.mobileVerified);\n\n    if (!showVerificationModal) return null;\n\n    return (\n        <Modal\n            size=\"lg\"\n            isOpen={true}\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered>\n            <ModalBody>\n                {!userVerified && (\n                    <div className=\"pb-3\">\n                        Please verify your email and mobile phone to start using\n                        website.\n                    </div>\n                )}\n                <EmailVerification />\n                <MobileVerification />\n                {userVerified && (\n                    <>\n                        <div className={'success mt-5 mb-3'}>\n                            Verification Successful!\n                        </div>\n                        <Button\n                            block\n                            color={'success'}\n                            onClick={() => {\n                                try {\n                                    window.ReactNativeWebView.postMessage(\n                                        JSON.stringify({ action: 'goBack' }),\n                                    );\n                                } catch (e) { }\n\n                                dispatch(toggleVerificationModal());\n                                localStorage.setItem(\"show_login_tips\", 2);\n                                setTimeout(function () {\n                                    // location.reload(true);\n                                    history.push('/logout');\n                                }, 500)\n                            }}>\n                            Login and Complete Business Profile\n                        </Button>\n                    </>\n                )}\n\n                {!userVerified && (\n                    <Row noGutters className=\"justify-content-end\">\n                        <Button\n                            color={'link'}\n                            size={'sm'}\n                            onClick={() => {\n                                history.push('/logout');\n                            }}>\n                            Logout\n                        </Button>\n                    </Row>\n                )}\n            </ModalBody>\n        </Modal>\n    );\n};\n\nexport default AccountVerification;\n","import React from \"react\";\n\nimport Footer from '../pages/newHome/Footer';\nimport Header from '../pages/newHome/Header';\nimport AccountVerification from \"../pages/AccountVerification\";\nconst HomeLayout = ({children}) => {\n    return (\n        <main>\n            <Header />\n            <div className=\"content\">{children}</div>\n            <Footer />\n            <AccountVerification />\n        </main>\n    );\n};\n\nexport default HomeLayout;\n","import { useFormik } from 'formik';\nimport React, { useState } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport {\n    Button,\n    Col,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    Spinner,\n} from 'reactstrap';\nimport Alert from 'reactstrap/es/Alert';\nimport * as Yup from 'yup';\nimport MobileInput from '../../common/components/MobileInput';\nimport { loginUser, getMe } from '../../redux/actionCreators/authActionCreators';\nimport HomeLayout from '../layouts/HomeLayout';\nimport { toastr } from 'react-redux-toastr';\nimport { setLoginType } from '../../utils/utils';\n\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string().required('Mobile number is required'),\n    password: Yup.string()\n        .min(6, 'Password is  too Short!')\n        .max(16, 'Password is too Long!')\n        .required('Password is required'),\n});\n\nconst Login = ({ history }) => {\n    const dispatch = useDispatch();\n    const [error, setError] = useState(null);\n    const [loginAs, setLoginAs] = useState(1);\n\n    const [txtPassword, setTxtPassword] = React.useState({\n        password: \"\",\n        showPassword: false,\n    });\n\n    const handleClickShowPassword = () => {\n        setValues({ ...valutxtPasswordes, showPassword: !txtPassword.showPassword });\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    const handlePasswordChange = (prop) => (event) => {\n        setValues({ ...values, [prop]: event.target.value });\n    };\n\n    const formik = useFormik({\n        initialValues: {\n            email: 'test@nyzsoft.com',\n            password: '123456',\n        },\n        validationSchema,\n        onSubmit: (values, { setSubmitting }) => {\n            setError(null);\n            setSubmitting(true);\n            dispatch(loginUser(values.email, values.password, loginAs))\n                .then((response) => {\n                    if (response.value.error && response.value.error.status > 300) {\n                        toastr.error('Error', response.value.error.details[0].messages[0].message);\n                    } else {\n                        console.log('..start get me');\n                        dispatch(getMe(loginAs)).then(resp => {\n                            history.push('/');\n                        }).catch(error => {\n                            toastr.error('Error', \"Mobile Or Password doesn't match, Please verify!\");\n                        });\n\n                    }\n                })\n                .catch((error) => {\n                    console.log('..login error' + JSON.stringify(error));\n                    // toastr.error('Error', response.message[0].messages[0].message);\n                })\n                .finally(() => {\n                    setSubmitting(false);\n                });\n        },\n    });\n\n    const {\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        errors,\n        touched,\n        isSubmitting,\n        values,\n        setFieldValue,\n        setFieldTouched,\n    } = formik;\n\n    const consumerLogin = (e) => {\n        console.log('..consumer login');\n        setLoginType(1);\n        setLoginAs(1);\n        handleSubmit();\n    }\n    const businessOwnerLogin = (e) => {\n        console.log('..business owner login');\n        setLoginType(2);\n        setLoginAs(2);\n        handleSubmit();\n    }\n    const Eye = () => {\n        if (password == \"password\") {\n            setpassword(\"text\");\n            seteye(false);\n            settype(true);\n        }\n        else {\n            setpassword(\"password\");\n            seteye(true);\n            settype(false);\n        }\n    }\n    const [eye, seteye] = useState(true);\n    const [password, setpassword] = useState(\"password\");\n    const [type, settype] = useState(false);\n    return (\n        <HomeLayout>\n            <Row noGutters className=\"login-container\">\n                <Col lg={4} md={12} className=\"sidenav\">\n                    <div className=\"login-main-text\">\n                        <h2>\n                            Application\n                            <br /> Login Page\n                        </h2>\n                        <p className=\"mt-5 flex-grow-0\">\n                            You can login with your email address or mobile\n                            number. Click{' '}\n                            <b>\n                                <Link to={'/'}>here</Link>\n                            </b>{' '}\n                            to go back to homepage.\n                        </p>\n                    </div>\n                </Col>\n                <Col lg={6} md={12} className=\"main\">\n                    <div className=\"login-form\">\n                        <Form onSubmit={handleSubmit}>\n                            {error && (\n                                <Col>\n                                    <Alert color={'danger'}>{error}</Alert>\n                                </Col>\n                            )}\n                            <Col>\n                                <FormGroup>\n                                    <Label for=\"email\">Mobile Number</Label>\n                                    <MobileInput\n                                        setFieldValue={setFieldValue}\n                                        setFieldTouched={setFieldTouched}\n                                        placeholder=\"Mobile Number\"\n                                        name={'email'}\n                                        value={values.email}\n                                        invalid={touched.email && errors.email}\n                                    />\n                                    <FormFeedback>{errors.email}</FormFeedback>\n                                </FormGroup>\n                            </Col>\n                            <Col>\n                                <FormGroup className='passwordFormGroup'>\n                                    <Label for=\"password\">Password</Label>\n\n                                    <Input\n                                        type={password}\n                                        name=\"password\"\n                                        id=\"password\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        invalid={\n                                            touched.password && errors.password\n                                        }\n                                        placeholder=\"********\"\n\n                                    />\n                                    <i onClick={Eye} className={`fa ${eye ? \"fa-eye-slash\" : \"fa-eye\"}`}></i>\n\n                                    <FormFeedback>\n                                        {errors.password}\n                                    </FormFeedback>\n                                </FormGroup>\n                            </Col>\n                        </Form>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <Button onClick={(e) => consumerLogin(e)} block disabled={isSubmitting}>\n                                        {isSubmitting && loginAs === 1 ? (\n                                            <Spinner size={'sm'} />\n                                        ) : (\n                                            'Login Personal Account'\n                                        )}\n                                    </Button>\n                                </Col><Col>\n                                    <Button onClick={(e) => businessOwnerLogin(e)} block disabled={isSubmitting}>\n                                        {isSubmitting && loginAs === 2 ? (\n                                            <Spinner size={'sm'} />\n                                        ) : (\n                                            'Login Business Account'\n                                        )}\n                                    </Button>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <FormGroup> <br /> <br />\n                                        <a href=\"/reset-password\">Forgot Password ?</a>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                        </Col>\n\n\n                    </div>\n                </Col>\n            </Row>\n        </HomeLayout>\n    );\n};\n\nexport default Login;\n"],"names":["history","useHistory","dispatch","useDispatch","showVerificationModal","useSelector","state","app","registrationUser","registerForm","user","auth","userHasEmail","username","email","userVerified","emailVerified","mobileVerified","Modal","size","isOpen","centered","ModalBody","className","EmailVerification","MobileVerification","Button","block","color","onClick","window","ReactNativeWebView","postMessage","JSON","stringify","action","e","toggleVerificationModal","localStorage","setItem","setTimeout","push","Row","noGutters","children","Header","Footer","validationSchema","Yup","shape","required","password","min","max","useState","error","setError","loginAs","setLoginAs","React","showPassword","formik","useFormik","initialValues","onSubmit","values","setSubmitting","loginUser","then","response","value","status","toastr","details","messages","message","console","log","getMe","resp","catch","finally","handleChange","handleBlur","handleSubmit","errors","touched","isSubmitting","setFieldValue","setFieldTouched","eye","seteye","setpassword","settype","lg","md","to","for","placeholder","name","invalid","type","id","onChange","onBlur","setLoginType","disabled","href"],"sourceRoot":""}